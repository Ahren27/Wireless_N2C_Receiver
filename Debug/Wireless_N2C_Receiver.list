
Wireless_N2C_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800a660  0800a660  0000b660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a930  0800a930  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a930  0800a930  0000b930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a938  0800a938  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a938  0800a938  0000b938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a93c  0800a93c  0000b93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800a940  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d0c  20000068  0800a9a8  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d74  0800a9a8  0000cd74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020efb  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005448  00000000  00000000  0002cf93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff8  00000000  00000000  000323e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001842  00000000  00000000  000343d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf4e  00000000  00000000  00035c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000249c3  00000000  00000000  00062b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a264  00000000  00000000  0008752b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019178f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008904  00000000  00000000  001917d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0019a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a648 	.word	0x0800a648

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800a648 	.word	0x0800a648

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <split_data>:
char az_str2[13];
char bc_str2[13];
char bz_str2[13];

// Decode Raw Bytes Measurement into Global Variables
void split_data(uint8_t measurments1[], uint8_t measurments2[]) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	// x and y axis from first 2 bytes
	stick_x1 = measurments1[0];
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b8a      	ldr	r3, [pc, #552]	@ (8000c84 <split_data+0x238>)
 8000a5c:	701a      	strb	r2, [r3, #0]
	stick_y1 = measurments1[1];
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	785a      	ldrb	r2, [r3, #1]
 8000a62:	4b89      	ldr	r3, [pc, #548]	@ (8000c88 <split_data+0x23c>)
 8000a64:	701a      	strb	r2, [r3, #0]

	// x and y axis from first 2 bytes
	stick_x2 = measurments2[0];
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b88      	ldr	r3, [pc, #544]	@ (8000c8c <split_data+0x240>)
 8000a6c:	701a      	strb	r2, [r3, #0]
	stick_y2 = measurments2[1];
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	785a      	ldrb	r2, [r3, #1]
 8000a72:	4b87      	ldr	r3, [pc, #540]	@ (8000c90 <split_data+0x244>)
 8000a74:	701a      	strb	r2, [r3, #0]

	// Might want to Reset accelerometer values
	acc_x1 = 0;
 8000a76:	4b87      	ldr	r3, [pc, #540]	@ (8000c94 <split_data+0x248>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	801a      	strh	r2, [r3, #0]
	acc_y1 = 0;
 8000a7c:	4b86      	ldr	r3, [pc, #536]	@ (8000c98 <split_data+0x24c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	801a      	strh	r2, [r3, #0]
	acc_z1 = 0;
 8000a82:	4b86      	ldr	r3, [pc, #536]	@ (8000c9c <split_data+0x250>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	801a      	strh	r2, [r3, #0]

	// Might want to Reset accelerometer values
	acc_x2 = 0;
 8000a88:	4b85      	ldr	r3, [pc, #532]	@ (8000ca0 <split_data+0x254>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	801a      	strh	r2, [r3, #0]
	acc_y2 = 0;
 8000a8e:	4b85      	ldr	r3, [pc, #532]	@ (8000ca4 <split_data+0x258>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	801a      	strh	r2, [r3, #0]
	acc_z2 = 0;
 8000a94:	4b84      	ldr	r3, [pc, #528]	@ (8000ca8 <split_data+0x25c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	801a      	strh	r2, [r3, #0]

	// higher 8 bits of accelerometer from next 3 bytes
	acc_x1 |= (measurments1[2] << 2);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8000c94 <split_data+0x248>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b78      	ldr	r3, [pc, #480]	@ (8000c94 <split_data+0x248>)
 8000ab4:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (measurments1[3] << 2);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3303      	adds	r3, #3
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	4b75      	ldr	r3, [pc, #468]	@ (8000c98 <split_data+0x24c>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b72      	ldr	r3, [pc, #456]	@ (8000c98 <split_data+0x24c>)
 8000ad0:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (measurments1[4] << 2);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	4b6f      	ldr	r3, [pc, #444]	@ (8000c9c <split_data+0x250>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b6c      	ldr	r3, [pc, #432]	@ (8000c9c <split_data+0x250>)
 8000aec:	801a      	strh	r2, [r3, #0]

	// higher 8 bits of accelerometer from next 3 bytes
	acc_x2 |= (measurments2[2] << 2);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	3302      	adds	r3, #2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	4b69      	ldr	r3, [pc, #420]	@ (8000ca0 <split_data+0x254>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b66      	ldr	r3, [pc, #408]	@ (8000ca0 <split_data+0x254>)
 8000b08:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (measurments2[3] << 2);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	3303      	adds	r3, #3
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	4b63      	ldr	r3, [pc, #396]	@ (8000ca4 <split_data+0x258>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b60      	ldr	r3, [pc, #384]	@ (8000ca4 <split_data+0x258>)
 8000b24:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (measurments2[4] << 2);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca8 <split_data+0x25c>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca8 <split_data+0x25c>)
 8000b40:	801a      	strh	r2, [r3, #0]

	// lower 2 bits from last byte
	acc_x1 |= (((1 << 2) - 1) & (measurments1[5] >> 3));
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3305      	adds	r3, #5
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	4b4f      	ldr	r3, [pc, #316]	@ (8000c94 <split_data+0x248>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b4c      	ldr	r3, [pc, #304]	@ (8000c94 <split_data+0x248>)
 8000b64:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (((1 << 2) - 1) & (measurments1[5] >> 5));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3305      	adds	r3, #5
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	095b      	lsrs	r3, r3, #5
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	4b47      	ldr	r3, [pc, #284]	@ (8000c98 <split_data+0x24c>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b44      	ldr	r3, [pc, #272]	@ (8000c98 <split_data+0x24c>)
 8000b88:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (((1 << 2) - 1) & (measurments1[5] >> 7));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3305      	adds	r3, #5
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	09db      	lsrs	r3, r3, #7
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b41      	ldr	r3, [pc, #260]	@ (8000c9c <split_data+0x250>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8000c9c <split_data+0x250>)
 8000ba2:	801a      	strh	r2, [r3, #0]

	// lower 2 bits from last byte
	acc_x2 |= (((1 << 2) - 1) & (measurments2[5] >> 3));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	3305      	adds	r3, #5
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	b21a      	sxth	r2, r3
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca0 <split_data+0x254>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <split_data+0x254>)
 8000bc6:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (((1 << 2) - 1) & (measurments2[5] >> 5));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	3305      	adds	r3, #5
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <split_data+0x258>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca4 <split_data+0x258>)
 8000bea:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (((1 << 2) - 1) & (measurments2[5] >> 7));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	3305      	adds	r3, #5
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	09db      	lsrs	r3, r3, #7
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <split_data+0x25c>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <split_data+0x25c>)
 8000c04:	801a      	strh	r2, [r3, #0]

	// Buttons are last 2 bits of last byte
	button_c1 = (1 & ~(measurments1[5] >> 1));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3305      	adds	r3, #5
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	085b      	lsrs	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf0c      	ite	eq
 8000c18:	2301      	moveq	r3, #1
 8000c1a:	2300      	movne	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <split_data+0x260>)
 8000c22:	701a      	strb	r2, [r3, #0]
	button_z1 = (1 & ~(measurments1[5] >> 0));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3305      	adds	r3, #5
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <split_data+0x264>)
 8000c3c:	701a      	strb	r2, [r3, #0]

	// Buttons are last 2 bits of last byte
	button_c2 = (1 & ~(measurments2[5] >> 1));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3305      	adds	r3, #5
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	085b      	lsrs	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <split_data+0x268>)
 8000c5a:	701a      	strb	r2, [r3, #0]
	button_z2 = (1 & ~(measurments2[5] >> 0));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	3305      	adds	r3, #5
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf0c      	ite	eq
 8000c6a:	2301      	moveq	r3, #1
 8000c6c:	2300      	movne	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <split_data+0x26c>)
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000084 	.word	0x20000084
 8000c88:	20000085 	.word	0x20000085
 8000c8c:	2000008e 	.word	0x2000008e
 8000c90:	2000008f 	.word	0x2000008f
 8000c94:	20000086 	.word	0x20000086
 8000c98:	20000088 	.word	0x20000088
 8000c9c:	2000008a 	.word	0x2000008a
 8000ca0:	20000090 	.word	0x20000090
 8000ca4:	20000092 	.word	0x20000092
 8000ca8:	20000094 	.word	0x20000094
 8000cac:	2000008c 	.word	0x2000008c
 8000cb0:	2000008d 	.word	0x2000008d
 8000cb4:	20000096 	.word	0x20000096
 8000cb8:	20000097 	.word	0x20000097

08000cbc <print_data>:

// Uploads data to serial port
void print_data() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	// Convert Data to Strings
	sprintf(sx_str1, "StickX1:%i", stick_x1);
 8000cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8000df8 <print_data+0x13c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	494c      	ldr	r1, [pc, #304]	@ (8000dfc <print_data+0x140>)
 8000cca:	484d      	ldr	r0, [pc, #308]	@ (8000e00 <print_data+0x144>)
 8000ccc:	f008 ff80 	bl	8009bd0 <siprintf>
	sprintf(sy_str1, "StickY1:%i", stick_y1);
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000e04 <print_data+0x148>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	494b      	ldr	r1, [pc, #300]	@ (8000e08 <print_data+0x14c>)
 8000cda:	484c      	ldr	r0, [pc, #304]	@ (8000e0c <print_data+0x150>)
 8000cdc:	f008 ff78 	bl	8009bd0 <siprintf>

	sprintf(ax_str1, "AccX1:%i", acc_x1);
 8000ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8000e10 <print_data+0x154>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	494a      	ldr	r1, [pc, #296]	@ (8000e14 <print_data+0x158>)
 8000cea:	484b      	ldr	r0, [pc, #300]	@ (8000e18 <print_data+0x15c>)
 8000cec:	f008 ff70 	bl	8009bd0 <siprintf>
	sprintf(ay_str1, "AccY1:%i", acc_y1);
 8000cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8000e1c <print_data+0x160>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4949      	ldr	r1, [pc, #292]	@ (8000e20 <print_data+0x164>)
 8000cfa:	484a      	ldr	r0, [pc, #296]	@ (8000e24 <print_data+0x168>)
 8000cfc:	f008 ff68 	bl	8009bd0 <siprintf>
	sprintf(az_str1, "AccZ1:%i", acc_z1);
 8000d00:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <print_data+0x16c>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	4948      	ldr	r1, [pc, #288]	@ (8000e2c <print_data+0x170>)
 8000d0a:	4849      	ldr	r0, [pc, #292]	@ (8000e30 <print_data+0x174>)
 8000d0c:	f008 ff60 	bl	8009bd0 <siprintf>

	sprintf(bc_str1, "ButtonC1:%i", button_c1);
 8000d10:	4b48      	ldr	r3, [pc, #288]	@ (8000e34 <print_data+0x178>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	4947      	ldr	r1, [pc, #284]	@ (8000e38 <print_data+0x17c>)
 8000d1a:	4848      	ldr	r0, [pc, #288]	@ (8000e3c <print_data+0x180>)
 8000d1c:	f008 ff58 	bl	8009bd0 <siprintf>
	sprintf(bz_str1, "ButtonZ1:%i", button_z1);
 8000d20:	4b47      	ldr	r3, [pc, #284]	@ (8000e40 <print_data+0x184>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	4946      	ldr	r1, [pc, #280]	@ (8000e44 <print_data+0x188>)
 8000d2a:	4847      	ldr	r0, [pc, #284]	@ (8000e48 <print_data+0x18c>)
 8000d2c:	f008 ff50 	bl	8009bd0 <siprintf>

	// Convert Data to Strings
	sprintf(sx_str2, "StickX2:%i", stick_x2);
 8000d30:	4b46      	ldr	r3, [pc, #280]	@ (8000e4c <print_data+0x190>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	4945      	ldr	r1, [pc, #276]	@ (8000e50 <print_data+0x194>)
 8000d3a:	4846      	ldr	r0, [pc, #280]	@ (8000e54 <print_data+0x198>)
 8000d3c:	f008 ff48 	bl	8009bd0 <siprintf>
	sprintf(sy_str2, "StickY2:%i", stick_y2);
 8000d40:	4b45      	ldr	r3, [pc, #276]	@ (8000e58 <print_data+0x19c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	4944      	ldr	r1, [pc, #272]	@ (8000e5c <print_data+0x1a0>)
 8000d4a:	4845      	ldr	r0, [pc, #276]	@ (8000e60 <print_data+0x1a4>)
 8000d4c:	f008 ff40 	bl	8009bd0 <siprintf>

	sprintf(ax_str2, "AccX2:%i", acc_x2);
 8000d50:	4b44      	ldr	r3, [pc, #272]	@ (8000e64 <print_data+0x1a8>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	4943      	ldr	r1, [pc, #268]	@ (8000e68 <print_data+0x1ac>)
 8000d5a:	4844      	ldr	r0, [pc, #272]	@ (8000e6c <print_data+0x1b0>)
 8000d5c:	f008 ff38 	bl	8009bd0 <siprintf>
	sprintf(ay_str2, "AccY2:%i", acc_y2);
 8000d60:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <print_data+0x1b4>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	4942      	ldr	r1, [pc, #264]	@ (8000e74 <print_data+0x1b8>)
 8000d6a:	4843      	ldr	r0, [pc, #268]	@ (8000e78 <print_data+0x1bc>)
 8000d6c:	f008 ff30 	bl	8009bd0 <siprintf>
	sprintf(az_str2, "AccZ2:%i", acc_z2);
 8000d70:	4b42      	ldr	r3, [pc, #264]	@ (8000e7c <print_data+0x1c0>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	4941      	ldr	r1, [pc, #260]	@ (8000e80 <print_data+0x1c4>)
 8000d7a:	4842      	ldr	r0, [pc, #264]	@ (8000e84 <print_data+0x1c8>)
 8000d7c:	f008 ff28 	bl	8009bd0 <siprintf>

	sprintf(bc_str2, "ButtonC2:%i", button_c2);
 8000d80:	4b41      	ldr	r3, [pc, #260]	@ (8000e88 <print_data+0x1cc>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	4940      	ldr	r1, [pc, #256]	@ (8000e8c <print_data+0x1d0>)
 8000d8a:	4841      	ldr	r0, [pc, #260]	@ (8000e90 <print_data+0x1d4>)
 8000d8c:	f008 ff20 	bl	8009bd0 <siprintf>
	sprintf(bz_str2, "ButtonZ2:%i", button_z2);
 8000d90:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <print_data+0x1d8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	461a      	mov	r2, r3
 8000d98:	493f      	ldr	r1, [pc, #252]	@ (8000e98 <print_data+0x1dc>)
 8000d9a:	4840      	ldr	r0, [pc, #256]	@ (8000e9c <print_data+0x1e0>)
 8000d9c:	f008 ff18 	bl	8009bd0 <siprintf>

	// Print strings to terminal
	UART_PrintLn(sx_str1);
 8000da0:	4817      	ldr	r0, [pc, #92]	@ (8000e00 <print_data+0x144>)
 8000da2:	f000 fe15 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(sy_str1);
 8000da6:	4819      	ldr	r0, [pc, #100]	@ (8000e0c <print_data+0x150>)
 8000da8:	f000 fe12 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(ax_str1);
 8000dac:	481a      	ldr	r0, [pc, #104]	@ (8000e18 <print_data+0x15c>)
 8000dae:	f000 fe0f 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(ay_str1);
 8000db2:	481c      	ldr	r0, [pc, #112]	@ (8000e24 <print_data+0x168>)
 8000db4:	f000 fe0c 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(az_str1);
 8000db8:	481d      	ldr	r0, [pc, #116]	@ (8000e30 <print_data+0x174>)
 8000dba:	f000 fe09 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(bc_str1);
 8000dbe:	481f      	ldr	r0, [pc, #124]	@ (8000e3c <print_data+0x180>)
 8000dc0:	f000 fe06 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(bz_str1);
 8000dc4:	4820      	ldr	r0, [pc, #128]	@ (8000e48 <print_data+0x18c>)
 8000dc6:	f000 fe03 	bl	80019d0 <UART_PrintLn>

	// Print strings to terminal
	UART_PrintLn(sx_str2);
 8000dca:	4822      	ldr	r0, [pc, #136]	@ (8000e54 <print_data+0x198>)
 8000dcc:	f000 fe00 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(sy_str2);
 8000dd0:	4823      	ldr	r0, [pc, #140]	@ (8000e60 <print_data+0x1a4>)
 8000dd2:	f000 fdfd 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(ax_str2);
 8000dd6:	4825      	ldr	r0, [pc, #148]	@ (8000e6c <print_data+0x1b0>)
 8000dd8:	f000 fdfa 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(ay_str2);
 8000ddc:	4826      	ldr	r0, [pc, #152]	@ (8000e78 <print_data+0x1bc>)
 8000dde:	f000 fdf7 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(az_str2);
 8000de2:	4828      	ldr	r0, [pc, #160]	@ (8000e84 <print_data+0x1c8>)
 8000de4:	f000 fdf4 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(bc_str2);
 8000de8:	4829      	ldr	r0, [pc, #164]	@ (8000e90 <print_data+0x1d4>)
 8000dea:	f000 fdf1 	bl	80019d0 <UART_PrintLn>
	UART_PrintLn(bz_str2);
 8000dee:	482b      	ldr	r0, [pc, #172]	@ (8000e9c <print_data+0x1e0>)
 8000df0:	f000 fdee 	bl	80019d0 <UART_PrintLn>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000084 	.word	0x20000084
 8000dfc:	0800a660 	.word	0x0800a660
 8000e00:	20000098 	.word	0x20000098
 8000e04:	20000085 	.word	0x20000085
 8000e08:	0800a66c 	.word	0x0800a66c
 8000e0c:	200000a8 	.word	0x200000a8
 8000e10:	20000086 	.word	0x20000086
 8000e14:	0800a678 	.word	0x0800a678
 8000e18:	200000b8 	.word	0x200000b8
 8000e1c:	20000088 	.word	0x20000088
 8000e20:	0800a684 	.word	0x0800a684
 8000e24:	200000c8 	.word	0x200000c8
 8000e28:	2000008a 	.word	0x2000008a
 8000e2c:	0800a690 	.word	0x0800a690
 8000e30:	200000d8 	.word	0x200000d8
 8000e34:	2000008c 	.word	0x2000008c
 8000e38:	0800a69c 	.word	0x0800a69c
 8000e3c:	200000e8 	.word	0x200000e8
 8000e40:	2000008d 	.word	0x2000008d
 8000e44:	0800a6a8 	.word	0x0800a6a8
 8000e48:	200000f8 	.word	0x200000f8
 8000e4c:	2000008e 	.word	0x2000008e
 8000e50:	0800a6b4 	.word	0x0800a6b4
 8000e54:	20000108 	.word	0x20000108
 8000e58:	2000008f 	.word	0x2000008f
 8000e5c:	0800a6c0 	.word	0x0800a6c0
 8000e60:	20000118 	.word	0x20000118
 8000e64:	20000090 	.word	0x20000090
 8000e68:	0800a6cc 	.word	0x0800a6cc
 8000e6c:	20000128 	.word	0x20000128
 8000e70:	20000092 	.word	0x20000092
 8000e74:	0800a6d8 	.word	0x0800a6d8
 8000e78:	20000138 	.word	0x20000138
 8000e7c:	20000094 	.word	0x20000094
 8000e80:	0800a6e4 	.word	0x0800a6e4
 8000e84:	20000148 	.word	0x20000148
 8000e88:	20000096 	.word	0x20000096
 8000e8c:	0800a6f0 	.word	0x0800a6f0
 8000e90:	20000158 	.word	0x20000158
 8000e94:	20000097 	.word	0x20000097
 8000e98:	0800a6fc 	.word	0x0800a6fc
 8000e9c:	20000168 	.word	0x20000168

08000ea0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
return 0;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <MX_GPIO_Init+0xe4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a32      	ldr	r2, [pc, #200]	@ (8000fa4 <MX_GPIO_Init+0xe4>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <MX_GPIO_Init+0xe4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <MX_GPIO_Init+0xe4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8000fa4 <MX_GPIO_Init+0xe4>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <MX_GPIO_Init+0xe4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <MX_GPIO_Init+0xe4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a26      	ldr	r2, [pc, #152]	@ (8000fa4 <MX_GPIO_Init+0xe4>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <MX_GPIO_Init+0xe4>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f28:	f003 fc40 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2140      	movs	r1, #64	@ 0x40
 8000f30:	481d      	ldr	r0, [pc, #116]	@ (8000fa8 <MX_GPIO_Init+0xe8>)
 8000f32:	f003 fc3b 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000f36:	2380      	movs	r3, #128	@ 0x80
 8000f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4818      	ldr	r0, [pc, #96]	@ (8000fac <MX_GPIO_Init+0xec>)
 8000f4c:	f003 fa84 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8000f50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f003 fa74 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000f70:	2340      	movs	r3, #64	@ 0x40
 8000f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4619      	mov	r1, r3
 8000f86:	4808      	ldr	r0, [pc, #32]	@ (8000fa8 <MX_GPIO_Init+0xe8>)
 8000f88:	f003 fa66 	bl	8004458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2105      	movs	r1, #5
 8000f90:	2017      	movs	r0, #23
 8000f92:	f003 fa29 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f96:	2017      	movs	r0, #23
 8000f98:	f003 fa42 	bl	8004420 <HAL_NVIC_EnableIRQ>

}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	48000800 	.word	0x48000800

08000fb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fb6:	f003 f903 	bl	80041c0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000fba:	f000 f987 	bl	80012cc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fbe:	f7ff ff7f 	bl	8000ec0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000fc2:	f000 f9ed 	bl	80013a0 <MX_SPI1_Init>

	/* Set up Spirit */
	SPSGRF_Init();
 8000fc6:	f000 fa89 	bl	80014dc <SPSGRF_Init>

	/* Set source and destination addresses */
	SpiritPktStackSetMyAddress(NODE_ADDRESS);
 8000fca:	2078      	movs	r0, #120	@ 0x78
 8000fcc:	f001 f9d6 	bl	800237c <SpiritPktCommonSetMyAddress>
	SpiritPktStackSetDestinationAddress(TARGET_ADDRESS);
 8000fd0:	2077      	movs	r0, #119	@ 0x77
 8000fd2:	f001 f9b9 	bl	8002348 <SpiritPktCommonSetDestinationAddress>

	/* Set up RTOS */

	/* Create the tasks */
	retVal = xTaskCreate(Task1, "Set Up Program", configMINIMAL_STACK_SIZE,
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <main+0x88>)
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2328      	movs	r3, #40	@ 0x28
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2280      	movs	r2, #128	@ 0x80
 8000fe2:	4916      	ldr	r1, [pc, #88]	@ (800103c <main+0x8c>)
 8000fe4:	4816      	ldr	r0, [pc, #88]	@ (8001040 <main+0x90>)
 8000fe6:	f007 f975 	bl	80082d4 <xTaskCreate>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <main+0x94>)
 8000fee:	6013      	str	r3, [r2, #0]
	NULL, osPriorityHigh, &task1Handler);
	if (retVal != pdPASS) {
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <main+0x94>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d001      	beq.n	8000ffc <main+0x4c>
		while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <main+0x48>
			;
	} // check if task creation failed

	sendDataSema = xSemaphoreCreateBinary();
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	2100      	movs	r1, #0
 8001000:	2001      	movs	r0, #1
 8001002:	f006 fb5e 	bl	80076c2 <xQueueGenericCreate>
 8001006:	4603      	mov	r3, r0
 8001008:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <main+0x98>)
 800100a:	6013      	str	r3, [r2, #0]
	if (sendDataSema == NULL) {
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <main+0x98>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <main+0x68>
		while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <main+0x64>
			;
	} // check if binary semaphore creation failed

	radioMutex = xSemaphoreCreateMutex();
 8001018:	2001      	movs	r0, #1
 800101a:	f006 fbca 	bl	80077b2 <xQueueCreateMutex>
 800101e:	4603      	mov	r3, r0
 8001020:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <main+0x9c>)
 8001022:	6013      	str	r3, [r2, #0]
	if (radioMutex == NULL) {
 8001024:	4b09      	ldr	r3, [pc, #36]	@ (800104c <main+0x9c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <main+0x80>
		while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <main+0x7c>
			;
	} // check if mutex creation failed

	/* Start scheduler */
	vTaskStartScheduler();
 8001030:	f007 fb5a 	bl	80086e8 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <main+0x84>
 8001038:	20000178 	.word	0x20000178
 800103c:	0800a708 	.word	0x0800a708
 8001040:	08001051 	.word	0x08001051
 8001044:	2000018c 	.word	0x2000018c
 8001048:	20000184 	.word	0x20000184
 800104c:	20000188 	.word	0x20000188

08001050 <Task1>:
}

/* Define Tasks --------------------------------------------------------------*/

/* Configure Device */
void Task1(void *argument) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af02      	add	r7, sp, #8
 8001056:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Configure Peripherals
		UART_Init();
 8001058:	f000 fc50 	bl	80018fc <UART_Init>

		retVal = xTaskCreate(Task2, "Receive Data",
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <Task1+0x60>)
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2318      	movs	r3, #24
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	4912      	ldr	r1, [pc, #72]	@ (80010b4 <Task1+0x64>)
 800106a:	4813      	ldr	r0, [pc, #76]	@ (80010b8 <Task1+0x68>)
 800106c:	f007 f932 	bl	80082d4 <xTaskCreate>
 8001070:	4603      	mov	r3, r0
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <Task1+0x6c>)
 8001074:	6013      	str	r3, [r2, #0]
		configMINIMAL_STACK_SIZE,
		NULL, osPriorityNormal, &task2Handler);
		if (retVal != pdPASS) {
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <Task1+0x6c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d001      	beq.n	8001082 <Task1+0x32>
			while (1)
 800107e:	bf00      	nop
 8001080:	e7fd      	b.n	800107e <Task1+0x2e>
				;
		} // check if task creation failed

		retVal = xTaskCreate(Task3, "Decode and Print Data",
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <Task1+0x70>)
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	2318      	movs	r3, #24
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	490d      	ldr	r1, [pc, #52]	@ (80010c4 <Task1+0x74>)
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <Task1+0x78>)
 8001092:	f007 f91f 	bl	80082d4 <xTaskCreate>
 8001096:	4603      	mov	r3, r0
 8001098:	4a08      	ldr	r2, [pc, #32]	@ (80010bc <Task1+0x6c>)
 800109a:	6013      	str	r3, [r2, #0]
		configMINIMAL_STACK_SIZE,
		NULL, osPriorityNormal, &task3Handler);
		if (retVal != pdPASS) {
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <Task1+0x6c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d001      	beq.n	80010a8 <Task1+0x58>
			while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <Task1+0x54>
				;
		} // check if task creation failed

		// Task not needed for rest of program duration, so delete it
		vTaskDelete(NULL);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f007 fa73 	bl	8008594 <vTaskDelete>
		UART_Init();
 80010ae:	e7d3      	b.n	8001058 <Task1+0x8>
 80010b0:	2000017c 	.word	0x2000017c
 80010b4:	0800a718 	.word	0x0800a718
 80010b8:	080010cd 	.word	0x080010cd
 80010bc:	2000018c 	.word	0x2000018c
 80010c0:	20000180 	.word	0x20000180
 80010c4:	0800a728 	.word	0x0800a728
 80010c8:	080011f5 	.word	0x080011f5

080010cc <Task2>:
	}
}

/* Transmit Data */
void Task2(void *argument) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09a      	sub	sp, #104	@ 0x68
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	// Create payload
	uint8_t payload[MAX_PAYLOAD_SIZE] = { 0 };
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	225c      	movs	r2, #92	@ 0x5c
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f008 fd95 	bl	8009c10 <memset>

	// Infinite Loop
	for (;;) {
		// Reset Tx flag
		xRxDoneFlag = S_RESET;
 80010e6:	4b3a      	ldr	r3, [pc, #232]	@ (80011d0 <Task2+0x104>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]

		// Clear payload
		memset(payload, 0, sizeof(payload));
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	2260      	movs	r2, #96	@ 0x60
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f008 fd8b 	bl	8009c10 <memset>

		// Get current time
		startTick = xTaskGetTickCount();
 80010fa:	f007 fc4b 	bl	8008994 <xTaskGetTickCount>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a34      	ldr	r2, [pc, #208]	@ (80011d4 <Task2+0x108>)
 8001102:	6013      	str	r3, [r2, #0]

		// Take the mutex before starting the transmission
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001104:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <Task2+0x10c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	4618      	mov	r0, r3
 800110e:	f006 fdeb 	bl	8007ce8 <xQueueSemaphoreTake>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	d12c      	bne.n	8001172 <Task2+0xa6>
			SpiritGotoReadyState();
 8001118:	f000 fa9c 	bl	8001654 <SpiritGotoReadyState>
			SPSGRF_StartRx();
 800111c:	f000 fac8 	bl	80016b0 <SPSGRF_StartRx>

			// Wait for at least 1000ms (1 seconds) for receiving any packets
			while (!xRxDoneFlag && (waitingTick < RECV_TIMEOUT)) {
 8001120:	e007      	b.n	8001132 <Task2+0x66>
				// Get waiting time
				waitingTick = xTaskGetTickCount() - startTick;
 8001122:	f007 fc37 	bl	8008994 <xTaskGetTickCount>
 8001126:	4602      	mov	r2, r0
 8001128:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <Task2+0x108>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	4a2b      	ldr	r2, [pc, #172]	@ (80011dc <Task2+0x110>)
 8001130:	6013      	str	r3, [r2, #0]
			while (!xRxDoneFlag && (waitingTick < RECV_TIMEOUT)) {
 8001132:	4b27      	ldr	r3, [pc, #156]	@ (80011d0 <Task2+0x104>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d104      	bne.n	8001146 <Task2+0x7a>
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <Task2+0x110>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001144:	d3ed      	bcc.n	8001122 <Task2+0x56>
			}

			// Get the length of the payload and source address
			rxLen = SPSGRF_GetRxData(payload);
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fab9 	bl	80016c2 <SPSGRF_GetRxData>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <Task2+0x114>)
 8001156:	701a      	strb	r2, [r3, #0]
			rxSrcAddr = SpiritPktStackGetReceivedSourceAddress();
 8001158:	f001 f92a 	bl	80023b0 <SpiritPktCommonGetReceivedSourceAddress>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <Task2+0x118>)
 8001162:	701a      	strb	r2, [r3, #0]

			// Release the mutex after transmission
			xSemaphoreGive(radioMutex);
 8001164:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <Task2+0x10c>)
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	f006 fb39 	bl	80077e4 <xQueueGenericSend>
		}

		if (waitingTick > RECV_TIMEOUT) {
 8001172:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <Task2+0x110>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800117a:	d90a      	bls.n	8001192 <Task2+0xc6>
			sleepFlag = 1;
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <Task2+0x11c>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
			if (sleepFlag) {
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <Task2+0x11c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <Task2+0xc6>
				vTaskDelay(50 / portTICK_PERIOD_MS);
 800118c:	2032      	movs	r0, #50	@ 0x32
 800118e:	f007 fa75 	bl	800867c <vTaskDelay>
			}
		}

		if (rxSrcAddr == TARGET_ADDRESS) {
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <Task2+0x118>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b77      	cmp	r3, #119	@ 0x77
 800119a:	d114      	bne.n	80011c6 <Task2+0xfa>
			// Assuming the payload format:
			// First 6 bytes are for measurments1
			// Next 6 bytes are for measurments2

			// Ensure payload is at least the size of both measurement arrays
			if (rxLen >= 12) {
 800119c:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <Task2+0x114>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b0b      	cmp	r3, #11
 80011a4:	d90f      	bls.n	80011c6 <Task2+0xfa>
				memcpy(measurments1, payload, 6);
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <Task2+0x120>)
 80011a8:	f107 0208 	add.w	r2, r7, #8
 80011ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b0:	6018      	str	r0, [r3, #0]
 80011b2:	3304      	adds	r3, #4
 80011b4:	8019      	strh	r1, [r3, #0]
				memcpy(measurments2, payload + 6, 6);
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	3306      	adds	r3, #6
 80011bc:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <Task2+0x124>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	6010      	str	r0, [r2, #0]
 80011c2:	889b      	ldrh	r3, [r3, #4]
 80011c4:	8093      	strh	r3, [r2, #4]
			}
		}

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 80011c6:	2005      	movs	r0, #5
 80011c8:	f007 fa58 	bl	800867c <vTaskDelay>
		xRxDoneFlag = S_RESET;
 80011cc:	e78b      	b.n	80010e6 <Task2+0x1a>
 80011ce:	bf00      	nop
 80011d0:	2000019f 	.word	0x2000019f
 80011d4:	200001a0 	.word	0x200001a0
 80011d8:	20000188 	.word	0x20000188
 80011dc:	200001a4 	.word	0x200001a4
 80011e0:	200001a8 	.word	0x200001a8
 80011e4:	200001a9 	.word	0x200001a9
 80011e8:	200001aa 	.word	0x200001aa
 80011ec:	20000190 	.word	0x20000190
 80011f0:	20000198 	.word	0x20000198

080011f4 <Task3>:
	}
}

/* Decode and Print Data */
void Task3(void *argument) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Take the mutex before starting the transmission
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <Task3+0x54>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f006 fd6f 	bl	8007ce8 <xQueueSemaphoreTake>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d10c      	bne.n	800122a <Task3+0x36>
			// Decode Raw Bytes Measurement into Global Variables
			split_data(measurments1, measurments2);
 8001210:	490e      	ldr	r1, [pc, #56]	@ (800124c <Task3+0x58>)
 8001212:	480f      	ldr	r0, [pc, #60]	@ (8001250 <Task3+0x5c>)
 8001214:	f7ff fc1a 	bl	8000a4c <split_data>

			// Uploads data to serial port
			print_data();
 8001218:	f7ff fd50 	bl	8000cbc <print_data>

			// Release the mutex after transmission
			xSemaphoreGive(radioMutex);
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <Task3+0x54>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	f006 fadd 	bl	80077e4 <xQueueGenericSend>
		}

		if (sleepFlag) {
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <Task3+0x60>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <Task3+0x4c>
			vTaskDelay(50 / portTICK_PERIOD_MS);
 8001234:	2032      	movs	r0, #50	@ 0x32
 8001236:	f007 fa21 	bl	800867c <vTaskDelay>
			sleepFlag = 0;
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <Task3+0x60>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		}

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 8001240:	2005      	movs	r0, #5
 8001242:	f007 fa1b 	bl	800867c <vTaskDelay>
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001246:	e7d9      	b.n	80011fc <Task3+0x8>
 8001248:	20000188 	.word	0x20000188
 800124c:	20000198 	.word	0x20000198
 8001250:	20000190 	.word	0x20000190
 8001254:	200001aa 	.word	0x200001aa

08001258 <HAL_GPIO_EXTI_Callback>:
	}
}

/* Callback to handle external interrupts */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin) {
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2b80      	cmp	r3, #128	@ 0x80
 8001266:	d128      	bne.n	80012ba <HAL_GPIO_EXTI_Callback+0x62>
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fdb5 	bl	8001ddc <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT) {
 8001272:	7b3b      	ldrb	r3, [r7, #12]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_GPIO_EXTI_Callback+0x2c>
		xTxDoneFlag = S_SET;
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY) {
 8001284:	7b3b      	ldrb	r3, [r7, #12]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <HAL_GPIO_EXTI_Callback+0x3e>
		xRxDoneFlag = S_SET;
 8001290:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC || xIrqStatus.IRQ_RX_TIMEOUT) {
 8001296:	7b3b      	ldrb	r3, [r7, #12]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d105      	bne.n	80012ae <HAL_GPIO_EXTI_Callback+0x56>
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_EXTI_Callback+0x64>
		SpiritCmdStrobeRx();
 80012ae:	f000 ffbd 	bl	800222c <SpiritManagementWaCmdStrobeRx>
 80012b2:	2061      	movs	r0, #97	@ 0x61
 80012b4:	f000 fcc4 	bl	8001c40 <SpiritCmdStrobeCommand>
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_EXTI_Callback+0x64>
		return;
 80012ba:	bf00      	nop
	}
}
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000019e 	.word	0x2000019e
 80012c8:	2000019f 	.word	0x2000019f

080012cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b096      	sub	sp, #88	@ 0x58
 80012d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2244      	movs	r2, #68	@ 0x44
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f008 fc98 	bl	8009c10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012f2:	f003 fa99 	bl	8004828 <HAL_PWREx_ControlVoltageScaling>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80012fc:	f000 f84a 	bl	8001394 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001308:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130a:	2310      	movs	r3, #16
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130e:	2302      	movs	r3, #2
 8001310:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001312:	2302      	movs	r3, #2
 8001314:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800131a:	230a      	movs	r3, #10
 800131c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800131e:	2307      	movs	r3, #7
 8001320:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001322:	2302      	movs	r3, #2
 8001324:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001326:	2302      	movs	r3, #2
 8001328:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fad0 	bl	80048d4 <HAL_RCC_OscConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x72>
		Error_Handler();
 800133a:	f000 f82b 	bl	8001394 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800133e:	230f      	movs	r3, #15
 8001340:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	2303      	movs	r3, #3
 8001344:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001352:	463b      	mov	r3, r7
 8001354:	2104      	movs	r1, #4
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fe98 	bl	800508c <HAL_RCC_ClockConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x9a>
		Error_Handler();
 8001362:	f000 f817 	bl	8001394 <Error_Handler>
	}
}
 8001366:	bf00      	nop
 8001368:	3758      	adds	r7, #88	@ 0x58
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001382:	f002 ff35 	bl	80041f0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40014800 	.word	0x40014800

08001394 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <Error_Handler+0x8>

080013a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <MX_SPI1_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b8:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013d6:	2210      	movs	r2, #16
 80013d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013ee:	2207      	movs	r2, #7
 80013f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_SPI1_Init+0x74>)
 80013fa:	2208      	movs	r2, #8
 80013fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_SPI1_Init+0x74>)
 8001400:	f004 f884 	bl	800550c <HAL_SPI_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800140a:	f7ff ffc3 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200001ac 	.word	0x200001ac
 8001418:	40013000 	.word	0x40013000

0800141c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a25      	ldr	r2, [pc, #148]	@ (80014d0 <HAL_SPI_MspInit+0xb4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d144      	bne.n	80014c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <HAL_SPI_MspInit+0xb8>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	4a24      	ldr	r2, [pc, #144]	@ (80014d4 <HAL_SPI_MspInit+0xb8>)
 8001444:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001448:	6613      	str	r3, [r2, #96]	@ 0x60
 800144a:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <HAL_SPI_MspInit+0xb8>)
 800144c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_SPI_MspInit+0xb8>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a1e      	ldr	r2, [pc, #120]	@ (80014d4 <HAL_SPI_MspInit+0xb8>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <HAL_SPI_MspInit+0xb8>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_SPI_MspInit+0xb8>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <HAL_SPI_MspInit+0xb8>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_SPI_MspInit+0xb8>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001486:	23c0      	movs	r3, #192	@ 0xc0
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001496:	2305      	movs	r3, #5
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f002 ffd8 	bl	8004458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a8:	2308      	movs	r3, #8
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b8:	2305      	movs	r3, #5
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_SPI_MspInit+0xbc>)
 80014c4:	f002 ffc8 	bl	8004458 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40013000 	.word	0x40013000
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000400 	.word	0x48000400

080014dc <SPSGRF_Init>:
/**
 * @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
 * @param  None
 * @retval None
 */
void SPSGRF_Init(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b090      	sub	sp, #64	@ 0x40
 80014e0:	af00      	add	r7, sp, #0
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlpInit;
	SGpioInit xGpioInit;

	SpiritSpiInit();
 80014e2:	f002 fd19 	bl	8003f18 <RadioSpiInit>

	// restart the radio
	SpiritEnterShutdown();
 80014e6:	f002 fe47 	bl	8004178 <RadioEnterShutdown>
	SpiritExitShutdown();
 80014ea:	f002 fe50 	bl	800418e <RadioExitShutdown>
	SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 80014ee:	f000 fecd 	bl	800228c <SpiritManagementWaExtraCurrent>

	// wait for the radio to enter the ready state
	do {
		for (volatile uint8_t i = 0; i != 0xFF; i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	70fb      	strb	r3, [r7, #3]
 80014f6:	e004      	b.n	8001502 <SPSGRF_Init+0x26>
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2bff      	cmp	r3, #255	@ 0xff
 8001508:	d1f6      	bne.n	80014f8 <SPSGRF_Init+0x1c>
			; // delay for state transition
		SpiritRefreshStatus(); // reads the MC_STATUS register
 800150a:	f002 fce3 	bl	8003ed4 <SpiritRefreshStatus>
	} while (g_xStatus.MC_STATE != MC_STATE_READY);
 800150e:	4b4b      	ldr	r3, [pc, #300]	@ (800163c <SPSGRF_Init+0x160>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b03      	cmp	r3, #3
 800151a:	d1ea      	bne.n	80014f2 <SPSGRF_Init+0x16>

	// Initialize radio RF parameters
	xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 800151c:	2300      	movs	r3, #0
 800151e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001520:	4b47      	ldr	r3, [pc, #284]	@ (8001640 <SPSGRF_Init+0x164>)
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
	xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8001524:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <SPSGRF_Init+0x168>)
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	xRadioInit.xModulationSelect = MODULATION_SELECT;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	xRadioInit.lDatarate = DATARATE;
 8001534:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8001538:	637b      	str	r3, [r7, #52]	@ 0x34
	xRadioInit.lFreqDev = FREQ_DEVIATION;
 800153a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800153e:	63bb      	str	r3, [r7, #56]	@ 0x38
	xRadioInit.lBandwidth = BANDWIDTH;
 8001540:	4b40      	ldr	r3, [pc, #256]	@ (8001644 <SPSGRF_Init+0x168>)
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
	SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8001544:	4840      	ldr	r0, [pc, #256]	@ (8001648 <SPSGRF_Init+0x16c>)
 8001546:	f002 fb13 	bl	8003b70 <SpiritRadioSetXtalFrequency>
	SpiritRadioInit(&xRadioInit);
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4618      	mov	r0, r3
 8001550:	f001 f962 	bl	8002818 <SpiritRadioInit>

	// Set the transmitter power level
	SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001554:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 800164c <SPSGRF_Init+0x170>
 8001558:	2007      	movs	r0, #7
 800155a:	f002 f9a5 	bl	80038a8 <SpiritRadioSetPALeveldBm>
	SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 800155e:	2007      	movs	r0, #7
 8001560:	f002 f9f8 	bl	8003954 <SpiritRadioSetPALevelMaxIndex>

	// Configure packet handler to use the Basic packet format
	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
 8001564:	2318      	movs	r3, #24
 8001566:	753b      	strb	r3, [r7, #20]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001568:	2306      	movs	r3, #6
 800156a:	757b      	strb	r3, [r7, #21]
	xSTackInit.lSyncWords = SYNC_WORD;
 800156c:	f04f 3388 	mov.w	r3, #2290649224	@ 0x88888888
 8001570:	61bb      	str	r3, [r7, #24]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 8001572:	2301      	movs	r3, #1
 8001574:	773b      	strb	r3, [r7, #28]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001576:	2307      	movs	r3, #7
 8001578:	777b      	strb	r3, [r7, #29]
	xSTackInit.xCrcMode = CRC_MODE;
 800157a:	2320      	movs	r3, #32
 800157c:	77bb      	strb	r3, [r7, #30]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 800157e:	2300      	movs	r3, #0
 8001580:	77fb      	strb	r3, [r7, #31]
	// xSTackInit.xAddressField = EN_ADDRESS;
	xSTackInit.xFec = EN_FEC;
 8001582:	2300      	movs	r3, #0
 8001584:	f887 3020 	strb.w	r3, [r7, #32]
	xSTackInit.xDataWhitening = EN_WHITENING;
 8001588:	2301      	movs	r3, #1
 800158a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	SpiritPktStackInit(&xSTackInit);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4618      	mov	r0, r3
 8001594:	f000 ff24 	bl	80023e0 <SpiritPktStackInit>

	// Configure destination address criteria for automatic packet filtering
	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001598:	2301      	movs	r3, #1
 800159a:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 800159c:	2377      	movs	r3, #119	@ 0x77
 800159e:	737b      	strb	r3, [r7, #13]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73bb      	strb	r3, [r7, #14]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 80015a4:	23ee      	movs	r3, #238	@ 0xee
 80015a6:	73fb      	strb	r3, [r7, #15]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 80015a8:	2301      	movs	r3, #1
 80015aa:	743b      	strb	r3, [r7, #16]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 80015ac:	23ff      	movs	r3, #255	@ 0xff
 80015ae:	747b      	strb	r3, [r7, #17]
	SpiritPktStackAddressesInit(&xSTackAddress);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 ffe3 	bl	8002580 <SpiritPktStackAddressesInit>

	// Configure the spirit LLP registers
	xSTackLlpInit.xAutoAck = S_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	723b      	strb	r3, [r7, #8]
	xSTackLlpInit.xNMaxRetx = S_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	72bb      	strb	r3, [r7, #10]
	xSTackLlpInit.xPiggybacking = PKT_DISABLE_RETX;
 80015c2:	2300      	movs	r3, #0
 80015c4:	727b      	strb	r3, [r7, #9]
	SpiritPktStackLlpInit(&xSTackLlpInit);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 f846 	bl	800265c <SpiritPktStackLlpInit>

	// Configure GPIO3 as interrupt request pin (active low)
	xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 80015d0:	2302      	movs	r3, #2
 80015d2:	713b      	strb	r3, [r7, #4]
	xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	717b      	strb	r3, [r7, #5]
	xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 80015d8:	2300      	movs	r3, #0
 80015da:	71bb      	strb	r3, [r7, #6]
	SpiritGpioInit(&xGpioInit);
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fb46 	bl	8001c70 <SpiritGpioInit>

	// Generate an interrupt request for the following IRQs
	SpiritIrqDeInit(NULL);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f000 fb67 	bl	8001cb8 <SpiritIrqDeInit>
	SpiritIrq(TX_DATA_SENT, S_ENABLE);
 80015ea:	2101      	movs	r1, #1
 80015ec:	2004      	movs	r0, #4
 80015ee:	f000 fb8f 	bl	8001d10 <SpiritIrq>
	SpiritIrq(RX_DATA_READY, S_ENABLE);
 80015f2:	2101      	movs	r1, #1
 80015f4:	2001      	movs	r0, #1
 80015f6:	f000 fb8b 	bl	8001d10 <SpiritIrq>
	SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80015fa:	2101      	movs	r1, #1
 80015fc:	2002      	movs	r0, #2
 80015fe:	f000 fb87 	bl	8001d10 <SpiritIrq>
	SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8001602:	2101      	movs	r1, #1
 8001604:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8001608:	f000 fb82 	bl	8001d10 <SpiritIrq>
	SpiritIrqClearStatus();
 800160c:	f000 fc18 	bl	8001e40 <SpiritIrqClearStatus>

	// Enable the synchronization quality indicator check (perfect match required)
	// NOTE: 9.10.4: "It is recommended to always enable the SQI check."
	SpiritQiSetSqiThreshold(SQI_TH_0);
 8001610:	2000      	movs	r0, #0
 8001612:	f001 f8ad 	bl	8002770 <SpiritQiSetSqiThreshold>
	SpiritQiSqiCheck(S_ENABLE);
 8001616:	2001      	movs	r0, #1
 8001618:	f001 f872 	bl	8002700 <SpiritQiSqiCheck>

	// Set the RSSI Threshold for Carrier Sense (9.10.2)
	// NOTE: CS_MODE = 0 at reset
	SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 800161c:	f06f 0077 	mvn.w	r0, #119	@ 0x77
 8001620:	f001 f8da 	bl	80027d8 <SpiritQiSetRssiThresholddBm>

	// Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
	SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 8001624:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001650 <SPSGRF_Init+0x174>
 8001628:	f002 fab2 	bl	8003b90 <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
	SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 800162c:	2002      	movs	r0, #2
 800162e:	f002 fc09 	bl	8003e44 <SpiritTimerSetRxTimeoutStopCondition>
}
 8001632:	bf00      	nop
 8001634:	3740      	adds	r7, #64	@ 0x40
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000026c 	.word	0x2000026c
 8001640:	3689cac0 	.word	0x3689cac0
 8001644:	000186a0 	.word	0x000186a0
 8001648:	02faf080 	.word	0x02faf080
 800164c:	4139999a 	.word	0x4139999a
 8001650:	42480000 	.word	0x42480000

08001654 <SpiritGotoReadyState>:

void SpiritGotoReadyState(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

	/* Wait for the radio to enter the ready state */
	do {

		/* Go to the ready state */
		if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <SpiritGotoReadyState+0x54>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b0f      	cmp	r3, #15
 8001664:	d103      	bne.n	800166e <SpiritGotoReadyState+0x1a>
			SpiritCmdStrobeReady();
 8001666:	2062      	movs	r0, #98	@ 0x62
 8001668:	f000 faea 	bl	8001c40 <SpiritCmdStrobeCommand>
 800166c:	e002      	b.n	8001674 <SpiritGotoReadyState+0x20>
		} else {
			SpiritCmdStrobeSabort();
 800166e:	2067      	movs	r0, #103	@ 0x67
 8001670:	f000 fae6 	bl	8001c40 <SpiritCmdStrobeCommand>
		}

		/* Delay for state transition */
		for (i = 0; i != 0xFF; i++)
 8001674:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <SpiritGotoReadyState+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e004      	b.n	8001686 <SpiritGotoReadyState+0x32>
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <SpiritGotoReadyState+0x58>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <SpiritGotoReadyState+0x58>)
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <SpiritGotoReadyState+0x58>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2bff      	cmp	r3, #255	@ 0xff
 800168c:	d1f6      	bne.n	800167c <SpiritGotoReadyState+0x28>
			;

		/* Update the global status register variable */
		SpiritRefreshStatus();
 800168e:	f002 fc21 	bl	8003ed4 <SpiritRefreshStatus>

	} while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SpiritGotoReadyState+0x54>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b03      	cmp	r3, #3
 800169e:	d1db      	bne.n	8001658 <SpiritGotoReadyState+0x4>
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000026c 	.word	0x2000026c
 80016ac:	20000210 	.word	0x20000210

080016b0 <SPSGRF_StartRx>:
/**
 * @brief  Enter the receive state.
 * @param  None
 * @retval None
 */
void SPSGRF_StartRx(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	SpiritCmdStrobeRx();
 80016b4:	f000 fdba 	bl	800222c <SpiritManagementWaCmdStrobeRx>
 80016b8:	2061      	movs	r0, #97	@ 0x61
 80016ba:	f000 fac1 	bl	8001c40 <SpiritCmdStrobeCommand>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <SPSGRF_GetRxData>:
/**
 * @brief  To be called after a reception is complete
 * @param  rxBuff: pointer to a buffer to hold the received data
 * @retval Number of bytes received
 */
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff) {
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	uint8_t len;

	len = SpiritLinearFifoReadNumElementsRxFifo();
 80016ca:	f000 fbd1 	bl	8001e70 <SpiritLinearFifoReadNumElementsRxFifo>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
	SpiritSpiReadLinearFifo(len, rxBuff);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fd06 	bl	80040e8 <RadioSpiReadFifo>

	return len;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_MspInit+0x4c>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f2:	4a10      	ldr	r2, [pc, #64]	@ (8001734 <HAL_MspInit+0x4c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_MspInit+0x4c>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_MspInit+0x4c>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_MspInit+0x4c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	6593      	str	r3, [r2, #88]	@ 0x58
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <HAL_MspInit+0x4c>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	210f      	movs	r1, #15
 8001722:	f06f 0001 	mvn.w	r0, #1
 8001726:	f002 fe5f 	bl	80043e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	@ 0x30
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001746:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <HAL_InitTick+0xc8>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	4a2d      	ldr	r2, [pc, #180]	@ (8001800 <HAL_InitTick+0xc8>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001750:	6613      	str	r3, [r2, #96]	@ 0x60
 8001752:	4b2b      	ldr	r3, [pc, #172]	@ (8001800 <HAL_InitTick+0xc8>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800175e:	f107 020c 	add.w	r2, r7, #12
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f003 fe3d 	bl	80053e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800176e:	f003 fe25 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8001772:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001776:	4a23      	ldr	r2, [pc, #140]	@ (8001804 <HAL_InitTick+0xcc>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	0c9b      	lsrs	r3, r3, #18
 800177e:	3b01      	subs	r3, #1
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <HAL_InitTick+0xd0>)
 8001784:	4a21      	ldr	r2, [pc, #132]	@ (800180c <HAL_InitTick+0xd4>)
 8001786:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001788:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <HAL_InitTick+0xd0>)
 800178a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800178e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001790:	4a1d      	ldr	r2, [pc, #116]	@ (8001808 <HAL_InitTick+0xd0>)
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <HAL_InitTick+0xd0>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_InitTick+0xd0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <HAL_InitTick+0xd0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80017a8:	4817      	ldr	r0, [pc, #92]	@ (8001808 <HAL_InitTick+0xd0>)
 80017aa:	f004 fddd 	bl	8006368 <HAL_TIM_Base_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d11b      	bne.n	80017f4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80017bc:	4812      	ldr	r0, [pc, #72]	@ (8001808 <HAL_InitTick+0xd0>)
 80017be:	f004 fe35 	bl	800642c <HAL_TIM_Base_Start_IT>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80017d0:	201a      	movs	r0, #26
 80017d2:	f002 fe25 	bl	8004420 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d808      	bhi.n	80017ee <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80017dc:	2200      	movs	r2, #0
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	201a      	movs	r0, #26
 80017e2:	f002 fe01 	bl	80043e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <HAL_InitTick+0xd8>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e002      	b.n	80017f4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3730      	adds	r7, #48	@ 0x30
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	431bde83 	.word	0x431bde83
 8001808:	20000214 	.word	0x20000214
 800180c:	40014800 	.word	0x40014800
 8001810:	2000000c 	.word	0x2000000c

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <NMI_Handler+0x4>

0800181c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <MemManage_Handler+0x4>

0800182c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <UsageFault_Handler+0x4>

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 800184e:	2080      	movs	r0, #128	@ 0x80
 8001850:	f002 ffc4 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800185e:	f004 fe55 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000214 	.word	0x20000214

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	@ (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f008 fa16 	bl	8009ccc <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20018000 	.word	0x20018000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20000260 	.word	0x20000260
 80018d4:	20001d78 	.word	0x20001d78

080018d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <UART_Init>:
 */

#include "main.h"
#include "uart.h"

void UART_Init(void) {
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
	// Configure GPIOA for USART2
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8001900:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <UART_Init+0x98>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001904:	4a23      	ldr	r2, [pc, #140]	@ (8001994 <UART_Init+0x98>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN);
 800190c:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <UART_Init+0x98>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	4a20      	ldr	r2, [pc, #128]	@ (8001994 <UART_Init+0x98>)
 8001912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001916:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 2 and 3 to AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001918:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001922:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001926:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8001928:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001932:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001936:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 8001938:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001942:	f423 43ee 	bic.w	r3, r3, #30464	@ 0x7700
 8001946:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 8001948:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001952:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001956:	6213      	str	r3, [r2, #32]
	 * TE		1
	 * RE		1
	 * USEM		0
	 * UE		1
	 */
	USART2->CR1 |= (0b000100000);
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <UART_Init+0x9c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0e      	ldr	r2, [pc, #56]	@ (8001998 <UART_Init+0x9c>)
 800195e:	f043 0320 	orr.w	r3, r3, #32
 8001962:	6013      	str	r3, [r2, #0]

	// Configure BR
	USART2->BRR = (694);
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <UART_Init+0x9c>)
 8001966:	f240 22b6 	movw	r2, #694	@ 0x2b6
 800196a:	60da      	str	r2, [r3, #12]

	// Enable  bits
	USART2->CR1 |= (0b1101);
 800196c:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <UART_Init+0x9c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <UART_Init+0x9c>)
 8001972:	f043 030d 	orr.w	r3, r3, #13
 8001976:	6013      	str	r3, [r2, #0]

	// Enable interupts
	NVIC->ISER[1] |= (1 << (USART2_IRQn & 0X1F));
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <UART_Init+0xa0>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a07      	ldr	r2, [pc, #28]	@ (800199c <UART_Init+0xa0>)
 800197e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001982:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001984:	b662      	cpsie	i
}
 8001986:	bf00      	nop
	__enable_irq();

}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	40004400 	.word	0x40004400
 800199c:	e000e100 	.word	0xe000e100

080019a0 <UART_Print_Char>:

// Prints a character to the UART serial connection
void UART_Print_Char(char character) {
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	while (!(USART2->ISR & 1 << 7)) {
 80019aa:	bf00      	nop
 80019ac:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <UART_Print_Char+0x2c>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f9      	beq.n	80019ac <UART_Print_Char+0xc>
	};
	USART2->TDR = character;
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <UART_Print_Char+0x2c>)
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	b292      	uxth	r2, r2
 80019be:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40004400 	.word	0x40004400

080019d0 <UART_PrintLn>:

// Prints a character to the UART serial connection and appends a NEWLINE char
void UART_PrintLn(char *output) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 80019dc:	e009      	b.n	80019f2 <UART_PrintLn+0x22>
		UART_Print_Char(output[i]);
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ffda 	bl	80019a0 <UART_Print_Char>
		i++;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	3301      	adds	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ef      	bne.n	80019de <UART_PrintLn+0xe>
	}
	// Finish with new line and return cairage chars
	while (!(USART2->ISR & 1 << 7)) {
 80019fe:	bf00      	nop
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <UART_PrintLn+0x4c>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f9      	beq.n	8001a00 <UART_PrintLn+0x30>
	};
	USART2->TDR = '\n';
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <UART_PrintLn+0x4c>)
 8001a0e:	220a      	movs	r2, #10
 8001a10:	851a      	strh	r2, [r3, #40]	@ 0x28
	//while(!(USART2 -> ISR & 1 << 7)){};
	//USART2 -> TDR = '\r';
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40004400 	.word	0x40004400

08001a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a24:	f7ff ff58 	bl	80018d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a2a:	490d      	ldr	r1, [pc, #52]	@ (8001a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <LoopForever+0xe>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a40:	4c0a      	ldr	r4, [pc, #40]	@ (8001a6c <LoopForever+0x16>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f008 f943 	bl	8009cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a52:	f7ff faad 	bl	8000fb0 <main>

08001a56 <LoopForever>:

LoopForever:
    b LoopForever
 8001a56:	e7fe      	b.n	8001a56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a64:	0800a940 	.word	0x0800a940
  ldr r2, =_sbss
 8001a68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a6c:	20001d74 	.word	0x20001d74

08001a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC1_2_IRQHandler>
	...

08001a74 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001a7e:	f107 030f 	add.w	r3, r7, #15
 8001a82:	461a      	mov	r2, r3
 8001a84:	2101      	movs	r1, #1
 8001a86:	2050      	movs	r0, #80	@ 0x50
 8001a88:	f002 faa2 	bl	8003fd0 <RadioSpiReadRegisters>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <SpiritCalibrationVco+0x6c>)
 8001a90:	b212      	sxth	r2, r2
 8001a92:	4611      	mov	r1, r2
 8001a94:	7019      	strb	r1, [r3, #0]
 8001a96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001a9a:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e004      	b.n	8001ab8 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	f023 0302 	bic.w	r3, r3, #2
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001ab8:	f107 030f 	add.w	r3, r7, #15
 8001abc:	461a      	mov	r2, r3
 8001abe:	2101      	movs	r1, #1
 8001ac0:	2050      	movs	r0, #80	@ 0x50
 8001ac2:	f002 fa39 	bl	8003f38 <RadioSpiWriteRegisters>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <SpiritCalibrationVco+0x6c>)
 8001aca:	b212      	sxth	r2, r2
 8001acc:	4611      	mov	r1, r2
 8001ace:	7019      	strb	r1, [r3, #0]
 8001ad0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ad4:	705a      	strb	r2, [r3, #1]

}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	2000026c 	.word	0x2000026c

08001ae4 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	461a      	mov	r2, r3
 8001aee:	2101      	movs	r1, #1
 8001af0:	20e5      	movs	r0, #229	@ 0xe5
 8001af2:	f002 fa6d 	bl	8003fd0 <RadioSpiReadRegisters>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <SpiritCalibrationGetVcoCalData+0x34>)
 8001afa:	b212      	sxth	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	7019      	strb	r1, [r3, #0]
 8001b00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b04:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b0c:	b2db      	uxtb	r3, r3

}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000026c 	.word	0x2000026c

08001b1c <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001b26:	f107 030f 	add.w	r3, r7, #15
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	206e      	movs	r0, #110	@ 0x6e
 8001b30:	f002 fa4e 	bl	8003fd0 <RadioSpiReadRegisters>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001b38:	b212      	sxth	r2, r2
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	7019      	strb	r1, [r3, #0]
 8001b3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b42:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001b58:	f107 030f 	add.w	r3, r7, #15
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2101      	movs	r1, #1
 8001b60:	206e      	movs	r0, #110	@ 0x6e
 8001b62:	f002 f9e9 	bl	8003f38 <RadioSpiWriteRegisters>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001b6a:	b212      	sxth	r2, r2
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	7019      	strb	r1, [r3, #0]
 8001b70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b74:	705a      	strb	r2, [r3, #1]

}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000026c 	.word	0x2000026c

08001b84 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001b8e:	f107 030f 	add.w	r3, r7, #15
 8001b92:	461a      	mov	r2, r3
 8001b94:	2101      	movs	r1, #1
 8001b96:	206f      	movs	r0, #111	@ 0x6f
 8001b98:	f002 fa1a 	bl	8003fd0 <RadioSpiReadRegisters>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001ba0:	b212      	sxth	r2, r2
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	7019      	strb	r1, [r3, #0]
 8001ba6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001baa:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001bc0:	f107 030f 	add.w	r3, r7, #15
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	206f      	movs	r0, #111	@ 0x6f
 8001bca:	f002 f9b5 	bl	8003f38 <RadioSpiWriteRegisters>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001bd2:	b212      	sxth	r2, r2
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	7019      	strb	r1, [r3, #0]
 8001bd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001bdc:	705a      	strb	r2, [r3, #1]

}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000026c 	.word	0x2000026c

08001bec <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001bf6:	f107 030f 	add.w	r3, r7, #15
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	209e      	movs	r0, #158	@ 0x9e
 8001c00:	f002 f9e6 	bl	8003fd0 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	f023 0306 	bic.w	r3, r3, #6
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e004      	b.n	8001c2a <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001c2a:	f107 030f 	add.w	r3, r7, #15
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2101      	movs	r1, #1
 8001c32:	209e      	movs	r0, #158	@ 0x9e
 8001c34:	f002 f980 	bl	8003f38 <RadioSpiWriteRegisters>
  
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fa0b 	bl	8004068 <RadioSpiCommandStrobes>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <SpiritCmdStrobeCommand+0x2c>)
 8001c56:	b212      	sxth	r2, r2
 8001c58:	4611      	mov	r1, r2
 8001c5a:	7019      	strb	r1, [r3, #0]
 8001c5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c60:	705a      	strb	r2, [r3, #1]
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000026c 	.word	0x2000026c

08001c70 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	785a      	ldrb	r2, [r3, #1]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	789b      	ldrb	r3, [r3, #2]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	f107 020f 	add.w	r2, r7, #15
 8001c92:	2101      	movs	r1, #1
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 f94f 	bl	8003f38 <RadioSpiWriteRegisters>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <SpiritGpioInit+0x44>)
 8001c9e:	b212      	sxth	r2, r2
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	7019      	strb	r1, [r3, #0]
 8001ca4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ca8:	705a      	strb	r2, [r3, #1]

}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000026c 	.word	0x2000026c

08001cb8 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00c      	beq.n	8001ce4 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001cca:	f107 0308 	add.w	r3, r7, #8
 8001cce:	2204      	movs	r2, #4
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f007 ff9c 	bl	8009c10 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2104      	movs	r1, #4
 8001cec:	2090      	movs	r0, #144	@ 0x90
 8001cee:	f002 f923 	bl	8003f38 <RadioSpiWriteRegisters>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <SpiritIrqDeInit+0x54>)
 8001cf6:	b212      	sxth	r2, r2
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	7019      	strb	r1, [r3, #0]
 8001cfc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d00:	705a      	strb	r2, [r3, #1]
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000026c 	.word	0x2000026c

08001d10 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	461a      	mov	r2, r3
 8001d26:	2104      	movs	r1, #4
 8001d28:	2090      	movs	r0, #144	@ 0x90
 8001d2a:	f002 f951 	bl	8003fd0 <RadioSpiReadRegisters>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b29      	ldr	r3, [pc, #164]	@ (8001dd8 <SpiritIrq+0xc8>)
 8001d32:	b212      	sxth	r2, r2
 8001d34:	4611      	mov	r1, r2
 8001d36:	7019      	strb	r1, [r3, #0]
 8001d38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d3c:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	74fb      	strb	r3, [r7, #19]
 8001d42:	e011      	b.n	8001d68 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001d44:	7cfb      	ldrb	r3, [r7, #19]
 8001d46:	3318      	adds	r3, #24
 8001d48:	443b      	add	r3, r7
 8001d4a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	f1c3 0303 	rsb	r3, r3, #3
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4413      	add	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001d62:	7cfb      	ldrb	r3, [r7, #19]
 8001d64:	3301      	adds	r3, #1
 8001d66:	74fb      	strb	r3, [r7, #19]
 8001d68:	7cfb      	ldrb	r3, [r7, #19]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d9ea      	bls.n	8001d44 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e003      	b.n	8001d88 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	74bb      	strb	r3, [r7, #18]
 8001d8c:	e00e      	b.n	8001dac <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001d8e:	7cbb      	ldrb	r3, [r7, #18]
 8001d90:	f1c3 0303 	rsb	r3, r3, #3
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	40da      	lsrs	r2, r3
 8001d9a:	7cbb      	ldrb	r3, [r7, #18]
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	3318      	adds	r3, #24
 8001da0:	443b      	add	r3, r7
 8001da2:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001da6:	7cbb      	ldrb	r3, [r7, #18]
 8001da8:	3301      	adds	r3, #1
 8001daa:	74bb      	strb	r3, [r7, #18]
 8001dac:	7cbb      	ldrb	r3, [r7, #18]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d9ed      	bls.n	8001d8e <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	461a      	mov	r2, r3
 8001db8:	2104      	movs	r1, #4
 8001dba:	2090      	movs	r0, #144	@ 0x90
 8001dbc:	f002 f8bc 	bl	8003f38 <RadioSpiWriteRegisters>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <SpiritIrq+0xc8>)
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	7019      	strb	r1, [r3, #0]
 8001dca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dce:	705a      	strb	r2, [r3, #1]

}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000026c 	.word	0x2000026c

08001ddc <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	461a      	mov	r2, r3
 8001dee:	2104      	movs	r1, #4
 8001df0:	20fa      	movs	r0, #250	@ 0xfa
 8001df2:	f002 f8ed 	bl	8003fd0 <RadioSpiReadRegisters>
 8001df6:	4602      	mov	r2, r0
 8001df8:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <SpiritIrqGetStatus+0x60>)
 8001dfa:	b212      	sxth	r2, r2
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	7019      	strb	r1, [r3, #0]
 8001e00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e04:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	74fb      	strb	r3, [r7, #19]
 8001e0a:	e00e      	b.n	8001e2a <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001e0c:	7cfb      	ldrb	r3, [r7, #19]
 8001e0e:	f1c3 0303 	rsb	r3, r3, #3
 8001e12:	3318      	adds	r3, #24
 8001e14:	443b      	add	r3, r7
 8001e16:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001e24:	7cfb      	ldrb	r3, [r7, #19]
 8001e26:	3301      	adds	r3, #1
 8001e28:	74fb      	strb	r3, [r7, #19]
 8001e2a:	7cfb      	ldrb	r3, [r7, #19]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d9ed      	bls.n	8001e0c <SpiritIrqGetStatus+0x30>
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000026c 	.word	0x2000026c

08001e40 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	20fa      	movs	r0, #250	@ 0xfa
 8001e4e:	f002 f8bf 	bl	8003fd0 <RadioSpiReadRegisters>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <SpiritIrqClearStatus+0x2c>)
 8001e56:	b212      	sxth	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	7019      	strb	r1, [r3, #0]
 8001e5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e60:	705a      	strb	r2, [r3, #1]

}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000026c 	.word	0x2000026c

08001e70 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	20e7      	movs	r0, #231	@ 0xe7
 8001e7e:	f002 f8a7 	bl	8003fd0 <RadioSpiReadRegisters>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8001e86:	b212      	sxth	r2, r2
 8001e88:	4611      	mov	r1, r2
 8001e8a:	7019      	strb	r1, [r3, #0]
 8001e8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e90:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e98:	b2db      	uxtb	r3, r3

}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000026c 	.word	0x2000026c

08001ea8 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8001ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001eac:	b08a      	sub	sp, #40	@ 0x28
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a70      	ldr	r2, [pc, #448]	@ (8002078 <SpiritManagementSetFrequencyBase+0x1d0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d307      	bcc.n	8001eca <SpiritManagementSetFrequencyBase+0x22>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a6f      	ldr	r2, [pc, #444]	@ (800207c <SpiritManagementSetFrequencyBase+0x1d4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d803      	bhi.n	8001eca <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ec8:	e01a      	b.n	8001f00 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a6c      	ldr	r2, [pc, #432]	@ (8002080 <SpiritManagementSetFrequencyBase+0x1d8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d907      	bls.n	8001ee2 <SpiritManagementSetFrequencyBase+0x3a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a6b      	ldr	r2, [pc, #428]	@ (8002084 <SpiritManagementSetFrequencyBase+0x1dc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d803      	bhi.n	8001ee2 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8001eda:	2301      	movs	r3, #1
 8001edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ee0:	e00e      	b.n	8001f00 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a68      	ldr	r2, [pc, #416]	@ (8002088 <SpiritManagementSetFrequencyBase+0x1e0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d907      	bls.n	8001efa <SpiritManagementSetFrequencyBase+0x52>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a67      	ldr	r2, [pc, #412]	@ (800208c <SpiritManagementSetFrequencyBase+0x1e4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d803      	bhi.n	8001efa <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ef8:	e002      	b.n	8001f00 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8001efa:	2303      	movs	r3, #3
 8001efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8001f00:	f000 ffc8 	bl	8002e94 <SpiritRadioGetFrequencyOffset>
 8001f04:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8001f06:	f000 ffa5 	bl	8002e54 <SpiritRadioGetChannelSpace>
 8001f0a:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8001f0c:	f000 ff8a 	bl	8002e24 <SpiritRadioGetChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	441a      	add	r2, r3
 8001f1a:	7efb      	ldrb	r3, [r7, #27]
 8001f1c:	69f9      	ldr	r1, [r7, #28]
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8001f26:	f001 fda3 	bl	8003a70 <SpiritRadioGetRefDiv>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8001f30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d83a      	bhi.n	8001fae <SpiritManagementSetFrequencyBase+0x106>
 8001f38:	a201      	add	r2, pc, #4	@ (adr r2, 8001f40 <SpiritManagementSetFrequencyBase+0x98>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08001f99 	.word	0x08001f99
 8001f44:	08001f81 	.word	0x08001f81
 8001f48:	08001f69 	.word	0x08001f69
 8001f4c:	08001f51 	.word	0x08001f51
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4a4f      	ldr	r2, [pc, #316]	@ (8002090 <SpiritManagementSetFrequencyBase+0x1e8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d803      	bhi.n	8001f60 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff fe47 	bl	8001bec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001f5e:	e026      	b.n	8001fae <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f7ff fe43 	bl	8001bec <SpiritCalibrationSelectVco>
    break;
 8001f66:	e022      	b.n	8001fae <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002094 <SpiritManagementSetFrequencyBase+0x1ec>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d803      	bhi.n	8001f78 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff fe3b 	bl	8001bec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001f76:	e01a      	b.n	8001fae <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff fe37 	bl	8001bec <SpiritCalibrationSelectVco>
    break;
 8001f7e:	e016      	b.n	8001fae <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	4a45      	ldr	r2, [pc, #276]	@ (8002098 <SpiritManagementSetFrequencyBase+0x1f0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d803      	bhi.n	8001f90 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fe2f 	bl	8001bec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001f8e:	e00e      	b.n	8001fae <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f7ff fe2b 	bl	8001bec <SpiritCalibrationSelectVco>
    break;
 8001f96:	e00a      	b.n	8001fae <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	4a40      	ldr	r2, [pc, #256]	@ (800209c <SpiritManagementSetFrequencyBase+0x1f4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d803      	bhi.n	8001fa8 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff fe23 	bl	8001bec <SpiritCalibrationSelectVco>
 8001fa6:	e002      	b.n	8001fae <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff fe1f 	bl	8001bec <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f000 fe50 	bl	8002c54 <SpiritRadioSearchWCP>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7fe fa9b 	bl	80004f4 <__aeabi_ui2d>
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	460d      	mov	r5, r1
 8001fc2:	7cfb      	ldrb	r3, [r7, #19]
 8001fc4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001fc8:	4935      	ldr	r1, [pc, #212]	@ (80020a0 <SpiritManagementSetFrequencyBase+0x1f8>)
 8001fca:	5c8a      	ldrb	r2, [r1, r2]
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	049b      	lsls	r3, r3, #18
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fa9e 	bl	8000514 <__aeabi_i2d>
 8001fd8:	4680      	mov	r8, r0
 8001fda:	4689      	mov	r9, r1
 8001fdc:	f001 fdbc 	bl	8003b58 <SpiritRadioGetXtalFrequency>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fa86 	bl	80004f4 <__aeabi_ui2d>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4640      	mov	r0, r8
 8001fee:	4649      	mov	r1, r9
 8001ff0:	f7fe fc24 	bl	800083c <__aeabi_ddiv>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	f7fe faf4 	bl	80005e8 <__aeabi_dmul>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fd00 	bl	8000a0c <__aeabi_d2uiz>
 800200c:	4603      	mov	r3, r0
 800200e:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	0d5b      	lsrs	r3, r3, #21
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	b2da      	uxtb	r2, r3
 800201c:	7cbb      	ldrb	r3, [r7, #18]
 800201e:	015b      	lsls	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	4313      	orrs	r3, r2
 8002024:	b2db      	uxtb	r3, r3
 8002026:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	0b5b      	lsrs	r3, r3, #13
 800202c:	b2db      	uxtb	r3, r3
 800202e:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	b2db      	uxtb	r3, r3
 8002036:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	b2da      	uxtb	r2, r3
 8002040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002044:	4917      	ldr	r1, [pc, #92]	@ (80020a4 <SpiritManagementSetFrequencyBase+0x1fc>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	4313      	orrs	r3, r2
 800204a:	b2db      	uxtb	r3, r3
 800204c:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 800204e:	f107 0308 	add.w	r3, r7, #8
 8002052:	461a      	mov	r2, r3
 8002054:	2104      	movs	r1, #4
 8002056:	2008      	movs	r0, #8
 8002058:	f001 ff6e 	bl	8003f38 <RadioSpiWriteRegisters>
 800205c:	4602      	mov	r2, r0
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <SpiritManagementSetFrequencyBase+0x200>)
 8002060:	b212      	sxth	r2, r2
 8002062:	4611      	mov	r1, r2
 8002064:	7019      	strb	r1, [r3, #0]
 8002066:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800206a:	705a      	strb	r2, [r3, #1]
}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	@ 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002076:	bf00      	nop
 8002078:	2e5f5680 	.word	0x2e5f5680
 800207c:	390c2fe0 	.word	0x390c2fe0
 8002080:	1701e47f 	.word	0x1701e47f
 8002084:	1c146a60 	.word	0x1c146a60
 8002088:	11d260bf 	.word	0x11d260bf
 800208c:	14ced7e0 	.word	0x14ced7e0
 8002090:	099cf4e1 	.word	0x099cf4e1
 8002094:	1339e9c3 	.word	0x1339e9c3
 8002098:	19a28d05 	.word	0x19a28d05
 800209c:	33451a0a 	.word	0x33451a0a
 80020a0:	0800a7a4 	.word	0x0800a7a4
 80020a4:	0800a7a0 	.word	0x0800a7a0
 80020a8:	2000026c 	.word	0x2000026c

080020ac <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 80020ba:	f001 fd4d 	bl	8003b58 <SpiritRadioGetXtalFrequency>
 80020be:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4a57      	ldr	r2, [pc, #348]	@ (8002224 <SpiritManagementWaVcoCalibration+0x178>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d90f      	bls.n	80020ec <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 80020cc:	f001 fcd0 	bl	8003a70 <SpiritRadioGetRefDiv>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 80020da:	f001 f83b 	bl	8003154 <SpiritRadioGetFrequencyBase>
 80020de:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f001 fc95 	bl	8003a10 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fede 	bl	8001ea8 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 80020ec:	f001 f832 	bl	8003154 <SpiritRadioGetFrequencyBase>
 80020f0:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 80020f2:	2325      	movs	r3, #37	@ 0x25
 80020f4:	707b      	strb	r3, [r7, #1]
 80020f6:	1c7b      	adds	r3, r7, #1
 80020f8:	461a      	mov	r2, r3
 80020fa:	2101      	movs	r1, #1
 80020fc:	20a1      	movs	r0, #161	@ 0xa1
 80020fe:	f001 ff1b 	bl	8003f38 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002102:	2001      	movs	r0, #1
 8002104:	f7ff fcb6 	bl	8001a74 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002108:	f001 fee4 	bl	8003ed4 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 800210c:	4b46      	ldr	r3, [pc, #280]	@ (8002228 <SpiritManagementWaVcoCalibration+0x17c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b40      	cmp	r3, #64	@ 0x40
 8002118:	d10d      	bne.n	8002136 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 800211e:	2062      	movs	r0, #98	@ 0x62
 8002120:	f7ff fd8e 	bl	8001c40 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8002124:	f001 fed6 	bl	8003ed4 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002128:	4b3f      	ldr	r3, [pc, #252]	@ (8002228 <SpiritManagementWaVcoCalibration+0x17c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b03      	cmp	r3, #3
 8002134:	d1f6      	bne.n	8002124 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 8002136:	2066      	movs	r0, #102	@ 0x66
 8002138:	f7ff fd82 	bl	8001c40 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 800213c:	2300      	movs	r3, #0
 800213e:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002140:	f001 fec8 	bl	8003ed4 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002144:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <SpiritManagementWaVcoCalibration+0x17c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b13      	cmp	r3, #19
 8002150:	d106      	bne.n	8002160 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 8002152:	7b7b      	ldrb	r3, [r7, #13]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	737a      	strb	r2, [r7, #13]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d101      	bne.n	8002160 <SpiritManagementWaVcoCalibration+0xb4>
 800215c:	2301      	movs	r3, #1
 800215e:	e05d      	b.n	800221c <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002160:	4b31      	ldr	r3, [pc, #196]	@ (8002228 <SpiritManagementWaVcoCalibration+0x17c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b0f      	cmp	r3, #15
 800216c:	d1e8      	bne.n	8002140 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 800216e:	f7ff fcb9 	bl	8001ae4 <SpiritCalibrationGetVcoCalData>
 8002172:	4603      	mov	r3, r0
 8002174:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8002176:	2062      	movs	r0, #98	@ 0x62
 8002178:	f7ff fd62 	bl	8001c40 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 800217c:	f001 feaa 	bl	8003ed4 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002180:	4b29      	ldr	r3, [pc, #164]	@ (8002228 <SpiritManagementWaVcoCalibration+0x17c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b03      	cmp	r3, #3
 800218c:	d1f6      	bne.n	800217c <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800218e:	2065      	movs	r0, #101	@ 0x65
 8002190:	f7ff fd56 	bl	8001c40 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002194:	2300      	movs	r3, #0
 8002196:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002198:	f001 fe9c 	bl	8003ed4 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 800219c:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <SpiritManagementWaVcoCalibration+0x17c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b13      	cmp	r3, #19
 80021a8:	d106      	bne.n	80021b8 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 80021aa:	7b7b      	ldrb	r3, [r7, #13]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	737a      	strb	r2, [r7, #13]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d101      	bne.n	80021b8 <SpiritManagementWaVcoCalibration+0x10c>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e031      	b.n	800221c <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80021b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <SpiritManagementWaVcoCalibration+0x17c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	d1e8      	bne.n	8002198 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 80021c6:	f7ff fc8d 	bl	8001ae4 <SpiritCalibrationGetVcoCalData>
 80021ca:	4603      	mov	r3, r0
 80021cc:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 80021ce:	2062      	movs	r0, #98	@ 0x62
 80021d0:	f7ff fd36 	bl	8001c40 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80021d4:	f001 fe7e 	bl	8003ed4 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 80021d8:	4b13      	ldr	r3, [pc, #76]	@ (8002228 <SpiritManagementWaVcoCalibration+0x17c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d1f6      	bne.n	80021d4 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 80021ec:	2063      	movs	r0, #99	@ 0x63
 80021ee:	f7ff fd27 	bl	8001c40 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff fc3e 	bl	8001a74 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 80021fe:	2000      	movs	r0, #0
 8002200:	f001 fc06 	bl	8003a10 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff fe4f 	bl	8001ea8 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fc85 	bl	8001b1c <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8002212:	78bb      	ldrb	r3, [r7, #2]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fcb5 	bl	8001b84 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	01c9c380 	.word	0x01c9c380
 8002228:	2000026c 	.word	0x2000026c

0800222c <SpiritManagementWaCmdStrobeRx>:
  }
}


void SpiritManagementWaCmdStrobeRx(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002232:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d00d      	beq.n	8002258 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 800223c:	2398      	movs	r3, #152	@ 0x98
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	461a      	mov	r2, r3
 8002244:	2101      	movs	r1, #1
 8002246:	20a5      	movs	r0, #165	@ 0xa5
 8002248:	f001 fe76 	bl	8003f38 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 800224c:	2000      	movs	r0, #0
 800224e:	f001 fb55 	bl	80038fc <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002252:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
  }
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000004 	.word	0x20000004

08002264 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <SpiritManagementWaTRxFcMem+0x20>)
 800226e:	2202      	movs	r2, #2
 8002270:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002272:	4a05      	ldr	r2, [pc, #20]	@ (8002288 <SpiritManagementWaTRxFcMem+0x24>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	20000004 	.word	0x20000004
 8002288:	20000264 	.word	0x20000264

0800228c <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002292:	23ca      	movs	r3, #202	@ 0xca
 8002294:	71fb      	strb	r3, [r7, #7]
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	461a      	mov	r2, r3
 800229a:	2101      	movs	r1, #1
 800229c:	20b2      	movs	r0, #178	@ 0xb2
 800229e:	f001 fe4b 	bl	8003f38 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80022a2:	2304      	movs	r3, #4
 80022a4:	71fb      	strb	r3, [r7, #7]
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	461a      	mov	r2, r3
 80022aa:	2101      	movs	r1, #1
 80022ac:	20a8      	movs	r0, #168	@ 0xa8
 80022ae:	f001 fe43 	bl	8003f38 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	461a      	mov	r2, r3
 80022b6:	2101      	movs	r1, #1
 80022b8:	20a8      	movs	r0, #168	@ 0xa8
 80022ba:	f001 fe89 	bl	8003fd0 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80022be:	2300      	movs	r3, #0
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	461a      	mov	r2, r3
 80022c6:	2101      	movs	r1, #1
 80022c8:	20a8      	movs	r0, #168	@ 0xa8
 80022ca:	f001 fe35 	bl	8003f38 <RadioSpiWriteRegisters>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80022e2:	f107 030f 	add.w	r3, r7, #15
 80022e6:	461a      	mov	r2, r3
 80022e8:	2101      	movs	r1, #1
 80022ea:	204f      	movs	r0, #79	@ 0x4f
 80022ec:	f001 fe70 	bl	8003fd0 <RadioSpiReadRegisters>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <SpiritPktCommonFilterOnCrc+0x6c>)
 80022f4:	b212      	sxth	r2, r2
 80022f6:	4611      	mov	r1, r2
 80022f8:	7019      	strb	r1, [r3, #0]
 80022fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022fe:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d105      	bne.n	8002312 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e004      	b.n	800231c <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 800231c:	f107 030f 	add.w	r3, r7, #15
 8002320:	461a      	mov	r2, r3
 8002322:	2101      	movs	r1, #1
 8002324:	204f      	movs	r0, #79	@ 0x4f
 8002326:	f001 fe07 	bl	8003f38 <RadioSpiWriteRegisters>
 800232a:	4602      	mov	r2, r0
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <SpiritPktCommonFilterOnCrc+0x6c>)
 800232e:	b212      	sxth	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	7019      	strb	r1, [r3, #0]
 8002334:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002338:	705a      	strb	r2, [r3, #1]

}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000026c 	.word	0x2000026c

08002348 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	461a      	mov	r2, r3
 8002356:	2101      	movs	r1, #1
 8002358:	204b      	movs	r0, #75	@ 0x4b
 800235a:	f001 fded 	bl	8003f38 <RadioSpiWriteRegisters>
 800235e:	4602      	mov	r2, r0
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <SpiritPktCommonSetDestinationAddress+0x30>)
 8002362:	b212      	sxth	r2, r2
 8002364:	4611      	mov	r1, r2
 8002366:	7019      	strb	r1, [r3, #0]
 8002368:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800236c:	705a      	strb	r2, [r3, #1]

}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000026c 	.word	0x2000026c

0800237c <SpiritPktCommonSetMyAddress>:
 * @param  cAddress Address of the present node.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetMyAddress(uint8_t cAddress)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  /* Writes value on the PCKT_FLT_GOALS_TX_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_TX_ADDR_BASE, 1, &cAddress);
 8002386:	1dfb      	adds	r3, r7, #7
 8002388:	461a      	mov	r2, r3
 800238a:	2101      	movs	r1, #1
 800238c:	204e      	movs	r0, #78	@ 0x4e
 800238e:	f001 fdd3 	bl	8003f38 <RadioSpiWriteRegisters>
 8002392:	4602      	mov	r2, r0
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <SpiritPktCommonSetMyAddress+0x30>)
 8002396:	b212      	sxth	r2, r2
 8002398:	4611      	mov	r1, r2
 800239a:	7019      	strb	r1, [r3, #0]
 800239c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023a0:	705a      	strb	r2, [r3, #1]

}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000026c 	.word	0x2000026c

080023b0 <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	461a      	mov	r2, r3
 80023ba:	2101      	movs	r1, #1
 80023bc:	20d2      	movs	r0, #210	@ 0xd2
 80023be:	f001 fe07 	bl	8003fd0 <RadioSpiReadRegisters>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 80023c6:	b212      	sxth	r2, r2
 80023c8:	4611      	mov	r1, r2
 80023ca:	7019      	strb	r1, [r3, #0]
 80023cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023d0:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 80023d2:	79fb      	ldrb	r3, [r7, #7]

}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000026c 	.word	0x2000026c

080023e0 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80023e8:	f107 0308 	add.w	r3, r7, #8
 80023ec:	461a      	mov	r2, r3
 80023ee:	2101      	movs	r1, #1
 80023f0:	2051      	movs	r0, #81	@ 0x51
 80023f2:	f001 fded 	bl	8003fd0 <RadioSpiReadRegisters>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b60      	ldr	r3, [pc, #384]	@ (800257c <SpiritPktStackInit+0x19c>)
 80023fa:	b212      	sxth	r2, r2
 80023fc:	4611      	mov	r1, r2
 80023fe:	7019      	strb	r1, [r3, #0]
 8002400:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002404:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002406:	7a3b      	ldrb	r3, [r7, #8]
 8002408:	f023 0320 	bic.w	r3, r3, #32
 800240c:	b2db      	uxtb	r3, r3
 800240e:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002410:	7a3b      	ldrb	r3, [r7, #8]
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	b2db      	uxtb	r3, r3
 8002418:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800241a:	f107 0308 	add.w	r3, r7, #8
 800241e:	461a      	mov	r2, r3
 8002420:	2101      	movs	r1, #1
 8002422:	2051      	movs	r0, #81	@ 0x51
 8002424:	f001 fd88 	bl	8003f38 <RadioSpiWriteRegisters>
 8002428:	4602      	mov	r2, r0
 800242a:	4b54      	ldr	r3, [pc, #336]	@ (800257c <SpiritPktStackInit+0x19c>)
 800242c:	b212      	sxth	r2, r2
 800242e:	4611      	mov	r1, r2
 8002430:	7019      	strb	r1, [r3, #0]
 8002432:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002436:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002438:	f107 0308 	add.w	r3, r7, #8
 800243c:	461a      	mov	r2, r3
 800243e:	2101      	movs	r1, #1
 8002440:	204f      	movs	r0, #79	@ 0x4f
 8002442:	f001 fdc5 	bl	8003fd0 <RadioSpiReadRegisters>
 8002446:	4602      	mov	r2, r0
 8002448:	4b4c      	ldr	r3, [pc, #304]	@ (800257c <SpiritPktStackInit+0x19c>)
 800244a:	b212      	sxth	r2, r2
 800244c:	4611      	mov	r1, r2
 800244e:	7019      	strb	r1, [r3, #0]
 8002450:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002454:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002456:	7a3b      	ldrb	r3, [r7, #8]
 8002458:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800245c:	b2db      	uxtb	r3, r3
 800245e:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	461a      	mov	r2, r3
 8002466:	2101      	movs	r1, #1
 8002468:	204f      	movs	r0, #79	@ 0x4f
 800246a:	f001 fd65 	bl	8003f38 <RadioSpiWriteRegisters>
 800246e:	4602      	mov	r2, r0
 8002470:	4b42      	ldr	r3, [pc, #264]	@ (800257c <SpiritPktStackInit+0x19c>)
 8002472:	b212      	sxth	r2, r2
 8002474:	4611      	mov	r1, r2
 8002476:	7019      	strb	r1, [r3, #0]
 8002478:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800247c:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7adb      	ldrb	r3, [r3, #11]
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	b2db      	uxtb	r3, r3
 8002488:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7a5b      	ldrb	r3, [r3, #9]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <SpiritPktStackInit+0xb8>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7a5b      	ldrb	r3, [r3, #9]
 800249c:	3b01      	subs	r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	785b      	ldrb	r3, [r3, #1]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7a9b      	ldrb	r3, [r3, #10]
 80024c2:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7b5b      	ldrb	r3, [r3, #13]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d104      	bne.n	80024d6 <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80024cc:	7afb      	ldrb	r3, [r7, #11]
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7b1b      	ldrb	r3, [r3, #12]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d104      	bne.n	80024e8 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 80024e8:	f107 0308 	add.w	r3, r7, #8
 80024ec:	461a      	mov	r2, r3
 80024ee:	2104      	movs	r1, #4
 80024f0:	2030      	movs	r0, #48	@ 0x30
 80024f2:	f001 fd21 	bl	8003f38 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e01d      	b.n	8002538 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f1c3 0303 	rsb	r3, r3, #3
 800250a:	429a      	cmp	r2, r3
 800250c:	da06      	bge.n	800251c <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	3310      	adds	r3, #16
 8002512:	443b      	add	r3, r7
 8002514:	2200      	movs	r2, #0
 8002516:	f803 2c08 	strb.w	r2, [r3, #-8]
 800251a:	e00a      	b.n	8002532 <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	40da      	lsrs	r2, r3
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	3310      	adds	r3, #16
 800252c:	443b      	add	r3, r7
 800252e:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	3301      	adds	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d9de      	bls.n	80024fc <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7a9b      	ldrb	r3, [r3, #10]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002546:	2000      	movs	r0, #0
 8002548:	f7ff fec6 	bl	80022d8 <SpiritPktCommonFilterOnCrc>
 800254c:	e002      	b.n	8002554 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 800254e:	2001      	movs	r0, #1
 8002550:	f7ff fec2 	bl	80022d8 <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	461a      	mov	r2, r3
 800255a:	2104      	movs	r1, #4
 800255c:	2036      	movs	r0, #54	@ 0x36
 800255e:	f001 fceb 	bl	8003f38 <RadioSpiWriteRegisters>
 8002562:	4602      	mov	r2, r0
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <SpiritPktStackInit+0x19c>)
 8002566:	b212      	sxth	r2, r2
 8002568:	4611      	mov	r1, r2
 800256a:	7019      	strb	r1, [r3, #0]
 800256c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002570:	705a      	strb	r2, [r3, #1]

}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	2000026c 	.word	0x2000026c

08002580 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	461a      	mov	r2, r3
 800258e:	2101      	movs	r1, #1
 8002590:	204f      	movs	r0, #79	@ 0x4f
 8002592:	f001 fd1d 	bl	8003fd0 <RadioSpiReadRegisters>
 8002596:	4602      	mov	r2, r0
 8002598:	4b2f      	ldr	r3, [pc, #188]	@ (8002658 <SpiritPktStackAddressesInit+0xd8>)
 800259a:	b212      	sxth	r2, r2
 800259c:	4611      	mov	r1, r2
 800259e:	7019      	strb	r1, [r3, #0]
 80025a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025a4:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d105      	bne.n	80025ba <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80025ae:	7b3b      	ldrb	r3, [r7, #12]
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	733b      	strb	r3, [r7, #12]
 80025b8:	e004      	b.n	80025c4 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80025ba:	7b3b      	ldrb	r3, [r7, #12]
 80025bc:	f023 0308 	bic.w	r3, r3, #8
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	789b      	ldrb	r3, [r3, #2]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80025cc:	7b3b      	ldrb	r3, [r7, #12]
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	733b      	strb	r3, [r7, #12]
 80025d6:	e004      	b.n	80025e2 <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80025d8:	7b3b      	ldrb	r3, [r7, #12]
 80025da:	f023 0304 	bic.w	r3, r3, #4
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	791b      	ldrb	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d105      	bne.n	80025f6 <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80025ea:	7b3b      	ldrb	r3, [r7, #12]
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	733b      	strb	r3, [r7, #12]
 80025f4:	e004      	b.n	8002600 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80025f6:	7b3b      	ldrb	r3, [r7, #12]
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	461a      	mov	r2, r3
 8002606:	2101      	movs	r1, #1
 8002608:	204f      	movs	r0, #79	@ 0x4f
 800260a:	f001 fc95 	bl	8003f38 <RadioSpiWriteRegisters>
 800260e:	4602      	mov	r2, r0
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <SpiritPktStackAddressesInit+0xd8>)
 8002612:	b212      	sxth	r2, r2
 8002614:	4611      	mov	r1, r2
 8002616:	7019      	strb	r1, [r3, #0]
 8002618:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800261c:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	795b      	ldrb	r3, [r3, #5]
 8002622:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	78db      	ldrb	r3, [r3, #3]
 8002628:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	785b      	ldrb	r3, [r3, #1]
 800262e:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	461a      	mov	r2, r3
 8002636:	2103      	movs	r1, #3
 8002638:	204c      	movs	r0, #76	@ 0x4c
 800263a:	f001 fc7d 	bl	8003f38 <RadioSpiWriteRegisters>
 800263e:	4602      	mov	r2, r0
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <SpiritPktStackAddressesInit+0xd8>)
 8002642:	b212      	sxth	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	7019      	strb	r1, [r3, #0]
 8002648:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800264c:	705a      	strb	r2, [r3, #1]
  
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000026c 	.word	0x2000026c

0800265c <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	461a      	mov	r2, r3
 800266a:	2102      	movs	r1, #2
 800266c:	2051      	movs	r0, #81	@ 0x51
 800266e:	f001 fcaf 	bl	8003fd0 <RadioSpiReadRegisters>
 8002672:	4602      	mov	r2, r0
 8002674:	4b21      	ldr	r3, [pc, #132]	@ (80026fc <SpiritPktStackLlpInit+0xa0>)
 8002676:	b212      	sxth	r2, r2
 8002678:	4611      	mov	r1, r2
 800267a:	7019      	strb	r1, [r3, #0]
 800267c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002680:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d105      	bne.n	8002696 <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 800268a:	7b3b      	ldrb	r3, [r7, #12]
 800268c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002690:	b2db      	uxtb	r3, r3
 8002692:	733b      	strb	r3, [r7, #12]
 8002694:	e004      	b.n	80026a0 <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 8002696:	7b3b      	ldrb	r3, [r7, #12]
 8002698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800269c:	b2db      	uxtb	r3, r3
 800269e:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 80026a8:	7b7b      	ldrb	r3, [r7, #13]
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	737b      	strb	r3, [r7, #13]
 80026b2:	e004      	b.n	80026be <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 80026b4:	7b7b      	ldrb	r3, [r7, #13]
 80026b6:	f023 0304 	bic.w	r3, r3, #4
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 80026be:	7b7b      	ldrb	r3, [r7, #13]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 80026c8:	7b7a      	ldrb	r2, [r7, #13]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	789b      	ldrb	r3, [r3, #2]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	461a      	mov	r2, r3
 80026da:	2102      	movs	r1, #2
 80026dc:	2051      	movs	r0, #81	@ 0x51
 80026de:	f001 fc2b 	bl	8003f38 <RadioSpiWriteRegisters>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <SpiritPktStackLlpInit+0xa0>)
 80026e6:	b212      	sxth	r2, r2
 80026e8:	4611      	mov	r1, r2
 80026ea:	7019      	strb	r1, [r3, #0]
 80026ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026f0:	705a      	strb	r2, [r3, #1]

}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000026c 	.word	0x2000026c

08002700 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800270a:	f107 030f 	add.w	r3, r7, #15
 800270e:	461a      	mov	r2, r3
 8002710:	2101      	movs	r1, #1
 8002712:	203a      	movs	r0, #58	@ 0x3a
 8002714:	f001 fc5c 	bl	8003fd0 <RadioSpiReadRegisters>
 8002718:	4602      	mov	r2, r0
 800271a:	4b14      	ldr	r3, [pc, #80]	@ (800276c <SpiritQiSqiCheck+0x6c>)
 800271c:	b212      	sxth	r2, r2
 800271e:	4611      	mov	r1, r2
 8002720:	7019      	strb	r1, [r3, #0]
 8002722:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002726:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e004      	b.n	8002744 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	f023 0302 	bic.w	r3, r3, #2
 8002740:	b2db      	uxtb	r3, r3
 8002742:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002744:	f107 030f 	add.w	r3, r7, #15
 8002748:	461a      	mov	r2, r3
 800274a:	2101      	movs	r1, #1
 800274c:	203a      	movs	r0, #58	@ 0x3a
 800274e:	f001 fbf3 	bl	8003f38 <RadioSpiWriteRegisters>
 8002752:	4602      	mov	r2, r0
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <SpiritQiSqiCheck+0x6c>)
 8002756:	b212      	sxth	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	7019      	strb	r1, [r3, #0]
 800275c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002760:	705a      	strb	r2, [r3, #1]

}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	2000026c 	.word	0x2000026c

08002770 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800277a:	f107 030f 	add.w	r3, r7, #15
 800277e:	461a      	mov	r2, r3
 8002780:	2101      	movs	r1, #1
 8002782:	203a      	movs	r0, #58	@ 0x3a
 8002784:	f001 fc24 	bl	8003fd0 <RadioSpiReadRegisters>
 8002788:	4602      	mov	r2, r0
 800278a:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <SpiritQiSetSqiThreshold+0x64>)
 800278c:	b212      	sxth	r2, r2
 800278e:	4611      	mov	r1, r2
 8002790:	7019      	strb	r1, [r3, #0]
 8002792:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002796:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80027ac:	f107 030f 	add.w	r3, r7, #15
 80027b0:	461a      	mov	r2, r3
 80027b2:	2101      	movs	r1, #1
 80027b4:	203a      	movs	r0, #58	@ 0x3a
 80027b6:	f001 fbbf 	bl	8003f38 <RadioSpiWriteRegisters>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <SpiritQiSetSqiThreshold+0x64>)
 80027be:	b212      	sxth	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	7019      	strb	r1, [r3, #0]
 80027c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027c8:	705a      	strb	r2, [r3, #1]

}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000026c 	.word	0x2000026c

080027d8 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3382      	adds	r3, #130	@ 0x82
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 80027ec:	f107 030f 	add.w	r3, r7, #15
 80027f0:	461a      	mov	r2, r3
 80027f2:	2101      	movs	r1, #1
 80027f4:	2022      	movs	r0, #34	@ 0x22
 80027f6:	f001 fb9f 	bl	8003f38 <RadioSpiWriteRegisters>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <SpiritQiSetRssiThresholddBm+0x3c>)
 80027fe:	b212      	sxth	r2, r2
 8002800:	4611      	mov	r1, r2
 8002802:	7019      	strb	r1, [r3, #0]
 8002804:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002808:	705a      	strb	r2, [r3, #1]

}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000026c 	.word	0x2000026c

08002818 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	@ 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002820:	23a0      	movs	r3, #160	@ 0xa0
 8002822:	747b      	strb	r3, [r7, #17]
 8002824:	f107 0311 	add.w	r3, r7, #17
 8002828:	461a      	mov	r2, r3
 800282a:	2101      	movs	r1, #1
 800282c:	209f      	movs	r0, #159	@ 0x9f
 800282e:	f001 fb83 	bl	8003f38 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002850:	eddf 6aae 	vldr	s13, [pc, #696]	@ 8002b0c <SpiritRadioInit+0x2f4>
 8002854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800285c:	ee17 3a90 	vmov	r3, s15
 8002860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002862:	2063      	movs	r0, #99	@ 0x63
 8002864:	f001 fc00 	bl	8004068 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002868:	2300      	movs	r3, #0
 800286a:	73bb      	strb	r3, [r7, #14]
 800286c:	e004      	b.n	8002878 <SpiritRadioInit+0x60>
 800286e:	7bbb      	ldrb	r3, [r7, #14]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	73bb      	strb	r3, [r7, #14]
 8002878:	7bbb      	ldrb	r3, [r7, #14]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2bff      	cmp	r3, #255	@ 0xff
 800287e:	d1f6      	bne.n	800286e <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002880:	f001 fb28 	bl	8003ed4 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002884:	4ba2      	ldr	r3, [pc, #648]	@ (8002b10 <SpiritRadioInit+0x2f8>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b40      	cmp	r3, #64	@ 0x40
 8002890:	d1ea      	bne.n	8002868 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002892:	4ba0      	ldr	r3, [pc, #640]	@ (8002b14 <SpiritRadioInit+0x2fc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4aa0      	ldr	r2, [pc, #640]	@ (8002b18 <SpiritRadioInit+0x300>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d803      	bhi.n	80028a4 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 800289c:	2000      	movs	r0, #0
 800289e:	f001 f909 	bl	8003ab4 <SpiritRadioSetDigDiv>
 80028a2:	e002      	b.n	80028aa <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 80028a4:	2001      	movs	r0, #1
 80028a6:	f001 f905 	bl	8003ab4 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 80028aa:	2062      	movs	r0, #98	@ 0x62
 80028ac:	f001 fbdc 	bl	8004068 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80028b0:	2300      	movs	r3, #0
 80028b2:	737b      	strb	r3, [r7, #13]
 80028b4:	e004      	b.n	80028c0 <SpiritRadioInit+0xa8>
 80028b6:	7b7b      	ldrb	r3, [r7, #13]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	737b      	strb	r3, [r7, #13]
 80028c0:	7b7b      	ldrb	r3, [r7, #13]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2bff      	cmp	r3, #255	@ 0xff
 80028c6:	d1f6      	bne.n	80028b6 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80028c8:	f001 fb04 	bl	8003ed4 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 80028cc:	4b90      	ldr	r3, [pc, #576]	@ (8002b10 <SpiritRadioInit+0x2f8>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d1ea      	bne.n	80028b0 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 80028da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e4:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8002b1c <SpiritRadioInit+0x304>
 80028e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80028ec:	4b89      	ldr	r3, [pc, #548]	@ (8002b14 <SpiritRadioInit+0x2fc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002900:	ee17 3a90 	vmov	r3, s15
 8002904:	857b      	strh	r3, [r7, #42]	@ 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002906:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	b29b      	uxth	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	b2db      	uxtb	r3, r3
 8002914:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002916:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002918:	b2db      	uxtb	r3, r3
 800291a:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	025a      	lsls	r2, r3, #9
 8002922:	4b7c      	ldr	r3, [pc, #496]	@ (8002b14 <SpiritRadioInit+0x2fc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	099b      	lsrs	r3, r3, #6
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	3301      	adds	r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fc93 	bl	8002264 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	461a      	mov	r2, r3
 8002944:	2101      	movs	r1, #1
 8002946:	20a3      	movs	r0, #163	@ 0xa3
 8002948:	f001 fb42 	bl	8003fd0 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 800294c:	7c3b      	ldrb	r3, [r7, #16]
 800294e:	f023 0302 	bic.w	r3, r3, #2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	743b      	strb	r3, [r7, #16]
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	461a      	mov	r2, r3
 800295c:	2101      	movs	r1, #1
 800295e:	20a3      	movs	r0, #163	@ 0xa3
 8002960:	f001 faea 	bl	8003f38 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f107 0216 	add.w	r2, r7, #22
 800296c:	f107 0117 	add.w	r1, r7, #23
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fc3b 	bl	80031ec <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7b5a      	ldrb	r2, [r3, #13]
 800297e:	7dbb      	ldrb	r3, [r7, #22]
 8002980:	4313      	orrs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	461a      	mov	r2, r3
 800298c:	2101      	movs	r1, #1
 800298e:	201c      	movs	r0, #28
 8002990:	f001 fb1e 	bl	8003fd0 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f107 0214 	add.w	r2, r7, #20
 800299c:	f107 0115 	add.w	r1, r7, #21
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fdbb 	bl	800351c <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 80029a6:	7d3b      	ldrb	r3, [r7, #20]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	b25a      	sxtb	r2, r3
 80029ac:	7c3b      	ldrb	r3, [r7, #16]
 80029ae:	b25b      	sxtb	r3, r3
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b25a      	sxtb	r2, r3
 80029ba:	7d7b      	ldrb	r3, [r7, #21]
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	4313      	orrs	r3, r2
 80029c0:	b25b      	sxtb	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f107 0212 	add.w	r2, r7, #18
 80029ce:	f107 0113 	add.w	r1, r7, #19
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fcbc 	bl	8003350 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	b25a      	sxtb	r2, r3
 80029de:	7cbb      	ldrb	r3, [r7, #18]
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	4313      	orrs	r3, r2
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 80029ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <SpiritRadioInit+0x2fc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0b1b      	lsrs	r3, r3, #12
 80029f0:	ee07 3a90 	vmov	s15, r3
 80029f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f8:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b20 <SpiritRadioInit+0x308>
 80029fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a00:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002b24 <SpiritRadioInit+0x30c>
 8002a04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a08:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002a0c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a18:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	dd09      	ble.n	8002a42 <SpiritRadioInit+0x22a>
 8002a2e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a36:	edc7 7a00 	vstr	s15, [r7]
 8002a3a:	783b      	ldrb	r3, [r7, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	e006      	b.n	8002a50 <SpiritRadioInit+0x238>
 8002a42:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a4a:	edc7 7a00 	vstr	s15, [r7]
 8002a4e:	783b      	ldrb	r3, [r7, #0]
 8002a50:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002a52:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <SpiritRadioInit+0x2fc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a30      	ldr	r2, [pc, #192]	@ (8002b18 <SpiritRadioInit+0x300>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d802      	bhi.n	8002a62 <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	777b      	strb	r3, [r7, #29]
 8002a60:	e033      	b.n	8002aca <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002a62:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <SpiritRadioInit+0x2fc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0b5b      	lsrs	r3, r3, #13
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a70:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002b20 <SpiritRadioInit+0x308>
 8002a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a78:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002b24 <SpiritRadioInit+0x30c>
 8002a7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002a84:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a90:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a98:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	dd09      	ble.n	8002aba <SpiritRadioInit+0x2a2>
 8002aa6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aae:	edc7 7a00 	vstr	s15, [r7]
 8002ab2:	783b      	ldrb	r3, [r7, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e006      	b.n	8002ac8 <SpiritRadioInit+0x2b0>
 8002aba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac2:	edc7 7a00 	vstr	s15, [r7]
 8002ac6:	783b      	ldrb	r3, [r7, #0]
 8002ac8:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002aca:	f107 030f 	add.w	r3, r7, #15
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	2007      	movs	r0, #7
 8002ad4:	f001 fa30 	bl	8003f38 <RadioSpiWriteRegisters>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <SpiritRadioInit+0x2f8>)
 8002adc:	b212      	sxth	r2, r2
 8002ade:	4611      	mov	r1, r2
 8002ae0:	7019      	strb	r1, [r3, #0]
 8002ae2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ae6:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <SpiritRadioInit+0x2fc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0e      	ldr	r2, [pc, #56]	@ (8002b28 <SpiritRadioInit+0x310>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d91e      	bls.n	8002b30 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <SpiritRadioInit+0x2fc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <SpiritRadioInit+0x314>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf8c      	ite	hi
 8002afc:	2301      	movhi	r3, #1
 8002afe:	2300      	movls	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f86c 	bl	8002be0 <SpiritRadioSetXtalFlag>
 8002b08:	e01d      	b.n	8002b46 <SpiritRadioInit+0x32e>
 8002b0a:	bf00      	nop
 8002b0c:	49742400 	.word	0x49742400
 8002b10:	2000026c 	.word	0x2000026c
 8002b14:	20000268 	.word	0x20000268
 8002b18:	01c9c37f 	.word	0x01c9c37f
 8002b1c:	48800000 	.word	0x48800000
 8002b20:	49afd520 	.word	0x49afd520
 8002b24:	42800000 	.word	0x42800000
 8002b28:	01c9c380 	.word	0x01c9c380
 8002b2c:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002b30:	4b28      	ldr	r3, [pc, #160]	@ (8002bd4 <SpiritRadioInit+0x3bc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a28      	ldr	r2, [pc, #160]	@ (8002bd8 <SpiritRadioInit+0x3c0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	bf8c      	ite	hi
 8002b3a:	2301      	movhi	r3, #1
 8002b3c:	2300      	movls	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f84d 	bl	8002be0 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	206c      	movs	r0, #108	@ 0x6c
 8002b50:	f001 f9f2 	bl	8003f38 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	200c      	movs	r0, #12
 8002b5e:	f001 f9eb 	bl	8003f38 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002b62:	f107 0318 	add.w	r3, r7, #24
 8002b66:	461a      	mov	r2, r3
 8002b68:	2104      	movs	r1, #4
 8002b6a:	201a      	movs	r0, #26
 8002b6c:	f001 f9e4 	bl	8003f38 <RadioSpiWriteRegisters>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <SpiritRadioInit+0x3c4>)
 8002b74:	b212      	sxth	r2, r2
 8002b76:	4611      	mov	r1, r2
 8002b78:	7019      	strb	r1, [r3, #0]
 8002b7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b7e:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002b80:	2001      	movs	r0, #1
 8002b82:	f000 ff13 	bl	80039ac <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002b8a:	23e3      	movs	r3, #227	@ 0xe3
 8002b8c:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	461a      	mov	r2, r3
 8002b94:	2102      	movs	r1, #2
 8002b96:	2099      	movs	r0, #153	@ 0x99
 8002b98:	f001 f9ce 	bl	8003f38 <RadioSpiWriteRegisters>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <SpiritRadioInit+0x3c4>)
 8002ba0:	b212      	sxth	r2, r2
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	7019      	strb	r1, [r3, #0]
 8002ba6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002baa:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002bac:	2322      	movs	r3, #34	@ 0x22
 8002bae:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	20bc      	movs	r0, #188	@ 0xbc
 8002bba:	f001 f9bd 	bl	8003f38 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f9a8 	bl	8002f18 <SpiritRadioSetFrequencyBase>
 8002bc8:	4603      	mov	r3, r0
  
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3730      	adds	r7, #48	@ 0x30
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000268 	.word	0x20000268
 8002bd8:	017d783f 	.word	0x017d783f
 8002bdc:	2000026c 	.word	0x2000026c

08002be0 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002bee:	f107 030f 	add.w	r3, r7, #15
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f001 f9ea 	bl	8003fd0 <RadioSpiReadRegisters>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <SpiritRadioSetXtalFlag+0x70>)
 8002c00:	b212      	sxth	r2, r2
 8002c02:	4611      	mov	r1, r2
 8002c04:	7019      	strb	r1, [r3, #0]
 8002c06:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c0a:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d105      	bne.n	8002c1e <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e004      	b.n	8002c28 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002c28:	f107 030f 	add.w	r3, r7, #15
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2101      	movs	r1, #1
 8002c30:	2001      	movs	r0, #1
 8002c32:	f001 f981 	bl	8003f38 <RadioSpiWriteRegisters>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <SpiritRadioSetXtalFlag+0x70>)
 8002c3a:	b212      	sxth	r2, r2
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	7019      	strb	r1, [r3, #0]
 8002c40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c44:	705a      	strb	r2, [r3, #1]
  
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000026c 	.word	0x2000026c

08002c54 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d54 <SpiritRadioSearchWCP+0x100>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d306      	bcc.n	8002c7e <SpiritRadioSearchWCP+0x2a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a39      	ldr	r2, [pc, #228]	@ (8002d58 <SpiritRadioSearchWCP+0x104>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d802      	bhi.n	8002c7e <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002c78:	2306      	movs	r3, #6
 8002c7a:	73bb      	strb	r3, [r7, #14]
 8002c7c:	e01f      	b.n	8002cbe <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a36      	ldr	r2, [pc, #216]	@ (8002d5c <SpiritRadioSearchWCP+0x108>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d906      	bls.n	8002c94 <SpiritRadioSearchWCP+0x40>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a35      	ldr	r2, [pc, #212]	@ (8002d60 <SpiritRadioSearchWCP+0x10c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d802      	bhi.n	8002c94 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002c8e:	230c      	movs	r3, #12
 8002c90:	73bb      	strb	r3, [r7, #14]
 8002c92:	e014      	b.n	8002cbe <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a33      	ldr	r2, [pc, #204]	@ (8002d64 <SpiritRadioSearchWCP+0x110>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d906      	bls.n	8002caa <SpiritRadioSearchWCP+0x56>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a32      	ldr	r2, [pc, #200]	@ (8002d68 <SpiritRadioSearchWCP+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d802      	bhi.n	8002caa <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	73bb      	strb	r3, [r7, #14]
 8002ca8:	e009      	b.n	8002cbe <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2f      	ldr	r2, [pc, #188]	@ (8002d6c <SpiritRadioSearchWCP+0x118>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d905      	bls.n	8002cbe <SpiritRadioSearchWCP+0x6a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d70 <SpiritRadioSearchWCP+0x11c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d801      	bhi.n	8002cbe <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d74 <SpiritRadioSearchWCP+0x120>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	7bba      	ldrb	r2, [r7, #14]
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002cd0:	f241 631f 	movw	r3, #5663	@ 0x161f
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d302      	bcc.n	8002cea <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e023      	b.n	8002d32 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e005      	b.n	8002cfc <SpiritRadioSearchWCP+0xa8>
 8002cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d00:	2b0e      	cmp	r3, #14
 8002d02:	dc0c      	bgt.n	8002d1e <SpiritRadioSearchWCP+0xca>
 8002d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d08:	4a1b      	ldr	r2, [pc, #108]	@ (8002d78 <SpiritRadioSearchWCP+0x124>)
 8002d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d8e8      	bhi.n	8002cf0 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <SpiritRadioSearchWCP+0xde>
      i--;
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	425a      	negs	r2, r3
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	f002 0207 	and.w	r2, r2, #7
 8002d40:	bf58      	it	pl
 8002d42:	4253      	negpl	r3, r2
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
  
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	2e5f5680 	.word	0x2e5f5680
 8002d58:	390c2fe0 	.word	0x390c2fe0
 8002d5c:	1701e47f 	.word	0x1701e47f
 8002d60:	1c146a60 	.word	0x1c146a60
 8002d64:	11d260bf 	.word	0x11d260bf
 8002d68:	14ced7e0 	.word	0x14ced7e0
 8002d6c:	08e18f3f 	.word	0x08e18f3f
 8002d70:	0a6fd060 	.word	0x0a6fd060
 8002d74:	10624dd3 	.word	0x10624dd3
 8002d78:	0800a864 	.word	0x0800a864

08002d7c <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	461a      	mov	r2, r3
 8002d86:	2104      	movs	r1, #4
 8002d88:	2008      	movs	r0, #8
 8002d8a:	f001 f921 	bl	8003fd0 <RadioSpiReadRegisters>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <SpiritRadioGetSynthWord+0x48>)
 8002d92:	b212      	sxth	r2, r2
 8002d94:	4611      	mov	r1, r2
 8002d96:	7019      	strb	r1, [r3, #0]
 8002d98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d9c:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002d9e:	793b      	ldrb	r3, [r7, #4]
 8002da0:	055b      	lsls	r3, r3, #21
 8002da2:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8002da6:	797b      	ldrb	r3, [r7, #5]
 8002da8:	035b      	lsls	r3, r3, #13
 8002daa:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002dac:	79bb      	ldrb	r3, [r7, #6]
 8002dae:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002db0:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002db2:	79fa      	ldrb	r2, [r7, #7]
 8002db4:	08d2      	lsrs	r2, r2, #3
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	4413      	add	r3, r2
  
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000026c 	.word	0x2000026c

08002dc8 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002dce:	1dfb      	adds	r3, r7, #7
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	200b      	movs	r0, #11
 8002dd6:	f001 f8fb 	bl	8003fd0 <RadioSpiReadRegisters>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <SpiritRadioGetBand+0x58>)
 8002dde:	b212      	sxth	r2, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	7019      	strb	r1, [r3, #0]
 8002de4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002de8:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e00e      	b.n	8002e16 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d101      	bne.n	8002e06 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e007      	b.n	8002e16 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d101      	bne.n	8002e14 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002e10:	2302      	movs	r3, #2
 8002e12:	e000      	b.n	8002e16 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002e14:	2303      	movs	r3, #3
  }
  
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2000026c 	.word	0x2000026c

08002e24 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8002e2a:	1dfb      	adds	r3, r7, #7
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2101      	movs	r1, #1
 8002e30:	206c      	movs	r0, #108	@ 0x6c
 8002e32:	f001 f8cd 	bl	8003fd0 <RadioSpiReadRegisters>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <SpiritRadioGetChannel+0x2c>)
 8002e3a:	b212      	sxth	r2, r2
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	7019      	strb	r1, [r3, #0]
 8002e40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e44:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002e46:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	2000026c 	.word	0x2000026c

08002e54 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2101      	movs	r1, #1
 8002e60:	200c      	movs	r0, #12
 8002e62:	f001 f8b5 	bl	8003fd0 <RadioSpiReadRegisters>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <SpiritRadioGetChannelSpace+0x38>)
 8002e6a:	b212      	sxth	r2, r2
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	7019      	strb	r1, [r3, #0]
 8002e70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e74:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <SpiritRadioGetChannelSpace+0x3c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	0bdb      	lsrs	r3, r3, #15
  
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	2000026c 	.word	0x2000026c
 8002e90:	20000268 	.word	0x20000268

08002e94 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	200e      	movs	r0, #14
 8002ea2:	f001 f895 	bl	8003fd0 <RadioSpiReadRegisters>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <SpiritRadioGetFrequencyOffset+0x7c>)
 8002eaa:	b212      	sxth	r2, r2
 8002eac:	4611      	mov	r1, r2
 8002eae:	7019      	strb	r1, [r3, #0]
 8002eb0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002eb4:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8002eb6:	793b      	ldrb	r3, [r7, #4]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	797a      	ldrb	r2, [r7, #5]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <SpiritRadioGetFrequencyOffset+0x4a>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002ed4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	e004      	b.n	8002ee8 <SpiritRadioGetFrequencyOffset+0x54>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8002ee8:	1cbb      	adds	r3, r7, #2
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8002eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ef2:	4a08      	ldr	r2, [pc, #32]	@ (8002f14 <SpiritRadioGetFrequencyOffset+0x80>)
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da03      	bge.n	8002f06 <SpiritRadioGetFrequencyOffset+0x72>
 8002efe:	f503 337f 	add.w	r3, r3, #261120	@ 0x3fc00
 8002f02:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002f06:	149b      	asrs	r3, r3, #18
  
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000026c 	.word	0x2000026c
 8002f14:	20000268 	.word	0x20000268

08002f18 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8002f18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f1c:	b08a      	sub	sp, #40	@ 0x28
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a79      	ldr	r2, [pc, #484]	@ (8003110 <SpiritRadioSetFrequencyBase+0x1f8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d307      	bcc.n	8002f40 <SpiritRadioSetFrequencyBase+0x28>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a78      	ldr	r2, [pc, #480]	@ (8003114 <SpiritRadioSetFrequencyBase+0x1fc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d803      	bhi.n	8002f40 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f3e:	e022      	b.n	8002f86 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a75      	ldr	r2, [pc, #468]	@ (8003118 <SpiritRadioSetFrequencyBase+0x200>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d907      	bls.n	8002f58 <SpiritRadioSetFrequencyBase+0x40>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a74      	ldr	r2, [pc, #464]	@ (800311c <SpiritRadioSetFrequencyBase+0x204>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d803      	bhi.n	8002f58 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f56:	e016      	b.n	8002f86 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a71      	ldr	r2, [pc, #452]	@ (8003120 <SpiritRadioSetFrequencyBase+0x208>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d907      	bls.n	8002f70 <SpiritRadioSetFrequencyBase+0x58>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a70      	ldr	r2, [pc, #448]	@ (8003124 <SpiritRadioSetFrequencyBase+0x20c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d803      	bhi.n	8002f70 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f6e:	e00a      	b.n	8002f86 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a6d      	ldr	r2, [pc, #436]	@ (8003128 <SpiritRadioSetFrequencyBase+0x210>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d906      	bls.n	8002f86 <SpiritRadioSetFrequencyBase+0x6e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a6c      	ldr	r2, [pc, #432]	@ (800312c <SpiritRadioSetFrequencyBase+0x214>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d802      	bhi.n	8002f86 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8002f80:	2303      	movs	r3, #3
 8002f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002f86:	f7ff ff85 	bl	8002e94 <SpiritRadioGetFrequencyOffset>
 8002f8a:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002f8c:	f7ff ff62 	bl	8002e54 <SpiritRadioGetChannelSpace>
 8002f90:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002f92:	f7ff ff47 	bl	8002e24 <SpiritRadioGetChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002f9a:	6a3a      	ldr	r2, [r7, #32]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	441a      	add	r2, r3
 8002fa0:	7efb      	ldrb	r3, [r7, #27]
 8002fa2:	69f9      	ldr	r1, [r7, #28]
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002fac:	f000 fd60 	bl	8003a70 <SpiritRadioGetRefDiv>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8002fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d839      	bhi.n	8003032 <SpiritRadioSetFrequencyBase+0x11a>
 8002fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <SpiritRadioSetFrequencyBase+0xac>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	0800301d 	.word	0x0800301d
 8002fc8:	08003005 	.word	0x08003005
 8002fcc:	08002fed 	.word	0x08002fed
 8002fd0:	08002fd5 	.word	0x08002fd5
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	4a56      	ldr	r2, [pc, #344]	@ (8003130 <SpiritRadioSetFrequencyBase+0x218>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d803      	bhi.n	8002fe4 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fe fe05 	bl	8001bec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002fe2:	e026      	b.n	8003032 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f7fe fe01 	bl	8001bec <SpiritCalibrationSelectVco>
    break;
 8002fea:	e022      	b.n	8003032 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	4a51      	ldr	r2, [pc, #324]	@ (8003134 <SpiritRadioSetFrequencyBase+0x21c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d803      	bhi.n	8002ffc <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fe fdf9 	bl	8001bec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002ffa:	e01a      	b.n	8003032 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7fe fdf5 	bl	8001bec <SpiritCalibrationSelectVco>
    break;
 8003002:	e016      	b.n	8003032 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	4a4c      	ldr	r2, [pc, #304]	@ (8003138 <SpiritRadioSetFrequencyBase+0x220>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d803      	bhi.n	8003014 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fe fded 	bl	8001bec <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003012:	e00e      	b.n	8003032 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003014:	2001      	movs	r0, #1
 8003016:	f7fe fde9 	bl	8001bec <SpiritCalibrationSelectVco>
    break;
 800301a:	e00a      	b.n	8003032 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	4a47      	ldr	r2, [pc, #284]	@ (800313c <SpiritRadioSetFrequencyBase+0x224>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d803      	bhi.n	800302c <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fe fde1 	bl	8001bec <SpiritCalibrationSelectVco>
 800302a:	e002      	b.n	8003032 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 800302c:	2001      	movs	r0, #1
 800302e:	f7fe fddd 	bl	8001bec <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7ff fe0e 	bl	8002c54 <SpiritRadioSearchWCP>
 8003038:	4603      	mov	r3, r0
 800303a:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 800303c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003040:	4a3f      	ldr	r2, [pc, #252]	@ (8003140 <SpiritRadioSetFrequencyBase+0x228>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	461a      	mov	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fa51 	bl	80004f4 <__aeabi_ui2d>
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
 8003056:	7cfb      	ldrb	r3, [r7, #19]
 8003058:	049b      	lsls	r3, r3, #18
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa5a 	bl	8000514 <__aeabi_i2d>
 8003060:	4680      	mov	r8, r0
 8003062:	4689      	mov	r9, r1
 8003064:	4b37      	ldr	r3, [pc, #220]	@ (8003144 <SpiritRadioSetFrequencyBase+0x22c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa43 	bl	80004f4 <__aeabi_ui2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4640      	mov	r0, r8
 8003074:	4649      	mov	r1, r9
 8003076:	f7fd fbe1 	bl	800083c <__aeabi_ddiv>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4620      	mov	r0, r4
 8003080:	4629      	mov	r1, r5
 8003082:	f7fd fab1 	bl	80005e8 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f7fd fcbd 	bl	8000a0c <__aeabi_d2uiz>
 8003092:	4603      	mov	r3, r0
 8003094:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	0d5b      	lsrs	r3, r3, #21
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	7cbb      	ldrb	r3, [r7, #18]
 80030a4:	015b      	lsls	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4313      	orrs	r3, r2
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0b5b      	lsrs	r3, r3, #13
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030ca:	491f      	ldr	r1, [pc, #124]	@ (8003148 <SpiritRadioSetFrequencyBase+0x230>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80030d4:	f107 0308 	add.w	r3, r7, #8
 80030d8:	461a      	mov	r2, r3
 80030da:	2104      	movs	r1, #4
 80030dc:	2008      	movs	r0, #8
 80030de:	f000 ff2b 	bl	8003f38 <RadioSpiWriteRegisters>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b19      	ldr	r3, [pc, #100]	@ (800314c <SpiritRadioSetFrequencyBase+0x234>)
 80030e6:	b212      	sxth	r2, r2
 80030e8:	4611      	mov	r1, r2
 80030ea:	7019      	strb	r1, [r3, #0]
 80030ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030f0:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80030f2:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <SpiritRadioSetFrequencyBase+0x238>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d103      	bne.n	8003102 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 80030fa:	f7fe ffd7 	bl	80020ac <SpiritManagementWaVcoCalibration>
 80030fe:	4603      	mov	r3, r0
 8003100:	e000      	b.n	8003104 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3728      	adds	r7, #40	@ 0x28
 8003108:	46bd      	mov	sp, r7
 800310a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800310e:	bf00      	nop
 8003110:	2e5f5680 	.word	0x2e5f5680
 8003114:	390c2fe0 	.word	0x390c2fe0
 8003118:	1701e47f 	.word	0x1701e47f
 800311c:	1c146a60 	.word	0x1c146a60
 8003120:	11d260bf 	.word	0x11d260bf
 8003124:	14ced7e0 	.word	0x14ced7e0
 8003128:	08e18f3f 	.word	0x08e18f3f
 800312c:	0a6fd060 	.word	0x0a6fd060
 8003130:	099cf4e1 	.word	0x099cf4e1
 8003134:	1339e9c3 	.word	0x1339e9c3
 8003138:	19a28d05 	.word	0x19a28d05
 800313c:	33451a0a 	.word	0x33451a0a
 8003140:	0800a7a8 	.word	0x0800a7a8
 8003144:	20000268 	.word	0x20000268
 8003148:	0800a7ac 	.word	0x0800a7ac
 800314c:	2000026c 	.word	0x2000026c
 8003150:	20000005 	.word	0x20000005

08003154 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003154:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 800315c:	f7ff fe0e 	bl	8002d7c <SpiritRadioGetSynthWord>
 8003160:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003162:	f7ff fe31 	bl	8002dc8 <SpiritRadioGetBand>
 8003166:	4603      	mov	r3, r0
 8003168:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 800316a:	f000 fc81 	bl	8003a70 <SpiritRadioGetRefDiv>
 800316e:	4603      	mov	r3, r0
 8003170:	3301      	adds	r3, #1
 8003172:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fd f9bd 	bl	80004f4 <__aeabi_ui2d>
 800317a:	4604      	mov	r4, r0
 800317c:	460d      	mov	r5, r1
 800317e:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <SpiritRadioGetFrequencyBase+0x90>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd f9b6 	bl	80004f4 <__aeabi_ui2d>
 8003188:	4680      	mov	r8, r0
 800318a:	4689      	mov	r9, r1
 800318c:	78bb      	ldrb	r3, [r7, #2]
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	4915      	ldr	r1, [pc, #84]	@ (80031e8 <SpiritRadioGetFrequencyBase+0x94>)
 8003192:	5c8a      	ldrb	r2, [r1, r2]
 8003194:	fb02 f303 	mul.w	r3, r2, r3
 8003198:	049b      	lsls	r3, r3, #18
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f9ba 	bl	8000514 <__aeabi_i2d>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4640      	mov	r0, r8
 80031a6:	4649      	mov	r1, r9
 80031a8:	f7fd fb48 	bl	800083c <__aeabi_ddiv>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	f7fd fa18 	bl	80005e8 <__aeabi_dmul>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	ec43 2b17 	vmov	d7, r2, r3
 80031c0:	eeb0 0a47 	vmov.f32	s0, s14
 80031c4:	eef0 0a67 	vmov.f32	s1, s15
 80031c8:	f007 f9f8 	bl	800a5bc <round>
 80031cc:	ec53 2b10 	vmov	r2, r3, d0
 80031d0:	4610      	mov	r0, r2
 80031d2:	4619      	mov	r1, r3
 80031d4:	f7fd fc1a 	bl	8000a0c <__aeabi_d2uiz>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031e4:	20000268 	.word	0x20000268
 80031e8:	0800a7a8 	.word	0x0800a7a8

080031ec <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 80031fc:	230f      	movs	r3, #15
 80031fe:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003204:	f000 fc86 	bl	8003b14 <SpiritRadioGetDigDiv>
 8003208:	4603      	mov	r3, r0
 800320a:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 800320c:	e015      	b.n	800323a <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 800320e:	4b4f      	ldr	r3, [pc, #316]	@ (800334c <SpiritRadioSearchDatarateME+0x160>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003216:	f1c3 0114 	rsb	r1, r3, #20
 800321a:	7ebb      	ldrb	r3, [r7, #26]
 800321c:	440b      	add	r3, r1
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003228:	2301      	movs	r3, #1
 800322a:	763b      	strb	r3, [r7, #24]
 800322c:	e005      	b.n	800323a <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 800322e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 800323a:	7e3b      	ldrb	r3, [r7, #24]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <SpiritRadioSearchDatarateME+0x5e>
 8003242:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003246:	2b00      	cmp	r3, #0
 8003248:	dae1      	bge.n	800320e <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 800324a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800324e:	2b00      	cmp	r3, #0
 8003250:	da01      	bge.n	8003256 <SpiritRadioSearchDatarateME+0x6a>
 8003252:	2300      	movs	r3, #0
 8003254:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8003256:	7ffa      	ldrb	r2, [r7, #31]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 800325c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003260:	f1c3 0317 	rsb	r3, r3, #23
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	409a      	lsls	r2, r3
 8003268:	4b38      	ldr	r3, [pc, #224]	@ (800334c <SpiritRadioSearchDatarateME+0x160>)
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	7ebb      	ldrb	r3, [r7, #26]
 800326e:	3305      	adds	r3, #5
 8003270:	fa21 f303 	lsr.w	r3, r1, r3
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 800327a:	2300      	movs	r3, #0
 800327c:	77bb      	strb	r3, [r7, #30]
 800327e:	e031      	b.n	80032e4 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8003280:	7e7a      	ldrb	r2, [r7, #25]
 8003282:	7fbb      	ldrb	r3, [r7, #30]
 8003284:	4413      	add	r3, r2
 8003286:	2b01      	cmp	r3, #1
 8003288:	d021      	beq.n	80032ce <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	b29a      	uxth	r2, r3
 800328e:	7e7b      	ldrb	r3, [r7, #25]
 8003290:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 8003294:	7fbb      	ldrb	r3, [r7, #30]
 8003296:	440b      	add	r3, r1
 8003298:	3b01      	subs	r3, #1
 800329a:	4618      	mov	r0, r3
 800329c:	4b2b      	ldr	r3, [pc, #172]	@ (800334c <SpiritRadioSearchDatarateME+0x160>)
 800329e:	6819      	ldr	r1, [r3, #0]
 80032a0:	7ebb      	ldrb	r3, [r7, #26]
 80032a2:	3305      	adds	r3, #5
 80032a4:	fa21 f303 	lsr.w	r3, r1, r3
 80032a8:	fb03 f100 	mul.w	r1, r3, r0
 80032ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032b0:	f1c3 0317 	rsb	r3, r3, #23
 80032b4:	fa21 f303 	lsr.w	r3, r1, r3
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	b29a      	uxth	r2, r3
 80032be:	7fbb      	ldrb	r3, [r7, #30]
 80032c0:	b212      	sxth	r2, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	3320      	adds	r3, #32
 80032c6:	443b      	add	r3, r7
 80032c8:	f823 2c10 	strh.w	r2, [r3, #-16]
 80032cc:	e007      	b.n	80032de <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80032ce:	7fbb      	ldrb	r3, [r7, #30]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	3320      	adds	r3, #32
 80032d4:	443b      	add	r3, r7
 80032d6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80032da:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 80032de:	7fbb      	ldrb	r3, [r7, #30]
 80032e0:	3301      	adds	r3, #1
 80032e2:	77bb      	strb	r3, [r7, #30]
 80032e4:	7fbb      	ldrb	r3, [r7, #30]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d9ca      	bls.n	8003280 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 80032ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032ee:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	76fb      	strb	r3, [r7, #27]
 80032f4:	e021      	b.n	800333a <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 80032f6:	7efb      	ldrb	r3, [r7, #27]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	3320      	adds	r3, #32
 80032fc:	443b      	add	r3, r7
 80032fe:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	bfb8      	it	lt
 8003306:	425b      	neglt	r3, r3
 8003308:	b29b      	uxth	r3, r3
 800330a:	8bba      	ldrh	r2, [r7, #28]
 800330c:	429a      	cmp	r2, r3
 800330e:	d911      	bls.n	8003334 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003310:	7efb      	ldrb	r3, [r7, #27]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	3320      	adds	r3, #32
 8003316:	443b      	add	r3, r7
 8003318:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	bfb8      	it	lt
 8003320:	425b      	neglt	r3, r3
 8003322:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003324:	7e7a      	ldrb	r2, [r7, #25]
 8003326:	7efb      	ldrb	r3, [r7, #27]
 8003328:	4413      	add	r3, r2
 800332a:	b2db      	uxtb	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003334:	7efb      	ldrb	r3, [r7, #27]
 8003336:	3301      	adds	r3, #1
 8003338:	76fb      	strb	r3, [r7, #27]
 800333a:	7efb      	ldrb	r3, [r7, #27]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d9da      	bls.n	80032f6 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000268 	.word	0x20000268

08003350 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	@ 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003362:	f000 fbd7 	bl	8003b14 <SpiritRadioGetDigDiv>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 800336c:	2302      	movs	r3, #2
 800336e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003372:	e002      	b.n	800337a <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 800337a:	4b63      	ldr	r3, [pc, #396]	@ (8003508 <SpiritRadioSearchChannelBwME+0x1b8>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	4a61      	ldr	r2, [pc, #388]	@ (800350c <SpiritRadioSearchChannelBwME+0x1bc>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003396:	e006      	b.n	80033a6 <SpiritRadioSearchChannelBwME+0x56>
 8003398:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800339c:	b2db      	uxtb	r3, r3
 800339e:	3301      	adds	r3, #1
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80033a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033aa:	2b59      	cmp	r3, #89	@ 0x59
 80033ac:	dc0f      	bgt.n	80033ce <SpiritRadioSearchChannelBwME+0x7e>
 80033ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033b2:	4a57      	ldr	r2, [pc, #348]	@ (8003510 <SpiritRadioSearchChannelBwME+0x1c0>)
 80033b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033b8:	461a      	mov	r2, r3
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	4a54      	ldr	r2, [pc, #336]	@ (8003514 <SpiritRadioSearchChannelBwME+0x1c4>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	0adb      	lsrs	r3, r3, #11
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d3e4      	bcc.n	8003398 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80033ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d077      	beq.n	80034c6 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80033d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033da:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80033e2:	e03a      	b.n	800345a <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 80033e4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80033e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80033ec:	4413      	add	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	dc06      	bgt.n	8003400 <SpiritRadioSearchChannelBwME+0xb0>
 80033f2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80033f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80033fa:	4413      	add	r3, r2
 80033fc:	2b5a      	cmp	r3, #90	@ 0x5a
 80033fe:	dc1e      	bgt.n	800343e <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	b29a      	uxth	r2, r3
 8003404:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003408:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800340c:	440b      	add	r3, r1
 800340e:	3b01      	subs	r3, #1
 8003410:	493f      	ldr	r1, [pc, #252]	@ (8003510 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003412:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003416:	4619      	mov	r1, r3
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	493d      	ldr	r1, [pc, #244]	@ (8003514 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003420:	fba1 1303 	umull	r1, r3, r1, r3
 8003424:	0adb      	lsrs	r3, r3, #11
 8003426:	b29b      	uxth	r3, r3
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	b29a      	uxth	r2, r3
 800342c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003430:	b212      	sxth	r2, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	3328      	adds	r3, #40	@ 0x28
 8003436:	443b      	add	r3, r7
 8003438:	f823 2c14 	strh.w	r2, [r3, #-20]
 800343c:	e008      	b.n	8003450 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 800343e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	3328      	adds	r3, #40	@ 0x28
 8003446:	443b      	add	r3, r7
 8003448:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800344c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003450:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003454:	3301      	adds	r3, #1
 8003456:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800345a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800345e:	2b02      	cmp	r3, #2
 8003460:	d9c0      	bls.n	80033e4 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003462:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003466:	847b      	strh	r3, [r7, #34]	@ 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800346e:	e026      	b.n	80034be <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003470:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	3328      	adds	r3, #40	@ 0x28
 8003478:	443b      	add	r3, r7
 800347a:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	bfb8      	it	lt
 8003482:	425b      	neglt	r3, r3
 8003484:	b29b      	uxth	r3, r3
 8003486:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003488:	429a      	cmp	r2, r3
 800348a:	d913      	bls.n	80034b4 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 800348c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	3328      	adds	r3, #40	@ 0x28
 8003494:	443b      	add	r3, r7
 8003496:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	bfb8      	it	lt
 800349e:	425b      	neglt	r3, r3
 80034a0:	847b      	strh	r3, [r7, #34]	@ 0x22
        i=i_tmp+j-1;
 80034a2:	7efa      	ldrb	r2, [r7, #27]
 80034a4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034a8:	4413      	add	r3, r2
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for(uint8_t j=0;j<3;j++)
 80034b4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034b8:	3301      	adds	r3, #1
 80034ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80034be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d9d4      	bls.n	8003470 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 80034c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80034ca:	4a13      	ldr	r2, [pc, #76]	@ (8003518 <SpiritRadioSearchChannelBwME+0x1c8>)
 80034cc:	fb82 1203 	smull	r1, r2, r2, r3
 80034d0:	1052      	asrs	r2, r2, #1
 80034d2:	17db      	asrs	r3, r3, #31
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 80034de:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80034e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <SpiritRadioSearchChannelBwME+0x1c8>)
 80034e4:	fb83 1302 	smull	r1, r3, r3, r2
 80034e8:	1059      	asrs	r1, r3, #1
 80034ea:	17d3      	asrs	r3, r2, #31
 80034ec:	1ac9      	subs	r1, r1, r3
 80034ee:	460b      	mov	r3, r1
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	701a      	strb	r2, [r3, #0]
  
}
 80034fe:	bf00      	nop
 8003500:	3728      	adds	r7, #40	@ 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000268 	.word	0x20000268
 800350c:	51eb851f 	.word	0x51eb851f
 8003510:	0800a7b0 	.word	0x0800a7b0
 8003514:	c9a633fd 	.word	0xc9a633fd
 8003518:	38e38e39 	.word	0x38e38e39

0800351c <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 800351c:	b5b0      	push	{r4, r5, r7, lr}
 800351e:	b08a      	sub	sp, #40	@ 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 800352c:	4b53      	ldr	r3, [pc, #332]	@ (800367c <SpiritRadioSearchFreqDevME+0x160>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003538:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8003680 <SpiritRadioSearchFreqDevME+0x164>
 800353c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003540:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800354a:	e028      	b.n	800359e <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 800354c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003550:	2201      	movs	r2, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	4618      	mov	r0, r3
 8003558:	f7fc ffdc 	bl	8000514 <__aeabi_i2d>
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	4b48      	ldr	r3, [pc, #288]	@ (8003684 <SpiritRadioSearchFreqDevME+0x168>)
 8003562:	f7fd f841 	bl	80005e8 <__aeabi_dmul>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f7fd fa4d 	bl	8000a0c <__aeabi_d2uiz>
 8003572:	ee07 0a90 	vmov	s15, r0
 8003576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800357a:	edd7 7a06 	vldr	s15, [r7, #24]
 800357e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003586:	ee17 3a90 	vmov	r3, s15
 800358a:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	429a      	cmp	r2, r3
 8003592:	d309      	bcc.n	80035a8 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003598:	3301      	adds	r3, #1
 800359a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800359e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d9d2      	bls.n	800354c <SpiritRadioSearchFreqDevME+0x30>
 80035a6:	e000      	b.n	80035aa <SpiritRadioSearchFreqDevME+0x8e>
      break;
 80035a8:	bf00      	nop
  }
  (*pcE) = i;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80035b0:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80035b8:	e043      	b.n	8003642 <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 80035be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc ffa6 	bl	8000514 <__aeabi_i2d>
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003688 <SpiritRadioSearchFreqDevME+0x16c>)
 80035ce:	f7fc fe55 	bl	800027c <__adddf3>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035e2:	f7fd f92b 	bl	800083c <__aeabi_ddiv>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4614      	mov	r4, r2
 80035ec:	461d      	mov	r5, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	2301      	movs	r3, #1
 80035f6:	4093      	lsls	r3, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ff8b 	bl	8000514 <__aeabi_i2d>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	f7fc ffef 	bl	80005e8 <__aeabi_dmul>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	f7fd f9fb 	bl	8000a0c <__aeabi_d2uiz>
 8003616:	ee07 0a90 	vmov	s15, r0
 800361a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800361e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362a:	ee17 3a90 	vmov	r3, s15
 800362e:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	429a      	cmp	r2, r3
 8003636:	d309      	bcc.n	800364c <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800363c:	3301      	adds	r3, #1
 800363e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003646:	2b07      	cmp	r3, #7
 8003648:	d9b7      	bls.n	80035ba <SpiritRadioSearchFreqDevME+0x9e>
 800364a:	e000      	b.n	800364e <SpiritRadioSearchFreqDevME+0x132>
      break;
 800364c:	bf00      	nop
  }
  
  (*pcM)=i;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003654:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	1ad2      	subs	r2, r2, r3
 800365c:	69f9      	ldr	r1, [r7, #28]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1acb      	subs	r3, r1, r3
 8003662:	429a      	cmp	r2, r3
 8003664:	d205      	bcs.n	8003672 <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	3b01      	subs	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	701a      	strb	r2, [r3, #0]
  
}
 8003672:	bf00      	nop
 8003674:	3728      	adds	r7, #40	@ 0x28
 8003676:	46bd      	mov	sp, r7
 8003678:	bdb0      	pop	{r4, r5, r7, pc}
 800367a:	bf00      	nop
 800367c:	20000268 	.word	0x20000268
 8003680:	48800000 	.word	0x48800000
 8003684:	401e0000 	.word	0x401e0000
 8003688:	40200000 	.word	0x40200000

0800368c <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003698:	2300      	movs	r3, #0
 800369a:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 800369c:	2300      	movs	r3, #0
 800369e:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a74      	ldr	r2, [pc, #464]	@ (8003874 <SpiritRadioGetdBm2Reg+0x1e8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d30c      	bcc.n	80036c2 <SpiritRadioGetdBm2Reg+0x36>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a73      	ldr	r2, [pc, #460]	@ (8003878 <SpiritRadioGetdBm2Reg+0x1ec>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d808      	bhi.n	80036c2 <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a71      	ldr	r2, [pc, #452]	@ (800387c <SpiritRadioGetdBm2Reg+0x1f0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d822      	bhi.n	8003702 <SpiritRadioGetdBm2Reg+0x76>
 80036bc:	2301      	movs	r3, #1
 80036be:	75fb      	strb	r3, [r7, #23]
 80036c0:	e01f      	b.n	8003702 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003880 <SpiritRadioGetdBm2Reg+0x1f4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d906      	bls.n	80036d8 <SpiritRadioGetdBm2Reg+0x4c>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a6d      	ldr	r2, [pc, #436]	@ (8003884 <SpiritRadioGetdBm2Reg+0x1f8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d802      	bhi.n	80036d8 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 80036d2:	2302      	movs	r3, #2
 80036d4:	75fb      	strb	r3, [r7, #23]
 80036d6:	e014      	b.n	8003702 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a6b      	ldr	r2, [pc, #428]	@ (8003888 <SpiritRadioGetdBm2Reg+0x1fc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d906      	bls.n	80036ee <SpiritRadioGetdBm2Reg+0x62>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a6a      	ldr	r2, [pc, #424]	@ (800388c <SpiritRadioGetdBm2Reg+0x200>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d802      	bhi.n	80036ee <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 80036e8:	2303      	movs	r3, #3
 80036ea:	75fb      	strb	r3, [r7, #23]
 80036ec:	e009      	b.n	8003702 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a67      	ldr	r2, [pc, #412]	@ (8003890 <SpiritRadioGetdBm2Reg+0x204>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d905      	bls.n	8003702 <SpiritRadioGetdBm2Reg+0x76>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a66      	ldr	r2, [pc, #408]	@ (8003894 <SpiritRadioGetdBm2Reg+0x208>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d801      	bhi.n	8003702 <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 80036fe:	2304      	movs	r3, #4
 8003700:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003702:	2301      	movs	r3, #1
 8003704:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003706:	edd7 7a02 	vldr	s15, [r7, #8]
 800370a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800370e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003712:	dd2f      	ble.n	8003774 <SpiritRadioGetdBm2Reg+0xe8>
 8003714:	7dfa      	ldrb	r2, [r7, #23]
 8003716:	4960      	ldr	r1, [pc, #384]	@ (8003898 <SpiritRadioGetdBm2Reg+0x20c>)
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	3308      	adds	r3, #8
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	eef2 6a0a 	vmov.f32	s13, #42	@ 0x41500000  13.0
 800372c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003730:	7dfa      	ldrb	r2, [r7, #23]
 8003732:	4959      	ldr	r1, [pc, #356]	@ (8003898 <SpiritRadioGetdBm2Reg+0x20c>)
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	440b      	add	r3, r1
 800373e:	330c      	adds	r3, #12
 8003740:	ed93 6a00 	vldr	s12, [r3]
 8003744:	7dfa      	ldrb	r2, [r7, #23]
 8003746:	4954      	ldr	r1, [pc, #336]	@ (8003898 <SpiritRadioGetdBm2Reg+0x20c>)
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	440b      	add	r3, r1
 8003752:	3308      	adds	r3, #8
 8003754:	edd3 6a00 	vldr	s13, [r3]
 8003758:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800375c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003760:	ed97 7a02 	vldr	s14, [r7, #8]
 8003764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376c:	dd02      	ble.n	8003774 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 800376e:	2300      	movs	r3, #0
 8003770:	75bb      	strb	r3, [r7, #22]
 8003772:	e035      	b.n	80037e0 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003774:	edd7 7a02 	vldr	s15, [r7, #8]
 8003778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003780:	d82e      	bhi.n	80037e0 <SpiritRadioGetdBm2Reg+0x154>
 8003782:	7dfa      	ldrb	r2, [r7, #23]
 8003784:	4944      	ldr	r1, [pc, #272]	@ (8003898 <SpiritRadioGetdBm2Reg+0x20c>)
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	440b      	add	r3, r1
 8003790:	3308      	adds	r3, #8
 8003792:	edd3 7a00 	vldr	s15, [r3]
 8003796:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800389c <SpiritRadioGetdBm2Reg+0x210>
 800379a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800379e:	7dfa      	ldrb	r2, [r7, #23]
 80037a0:	493d      	ldr	r1, [pc, #244]	@ (8003898 <SpiritRadioGetdBm2Reg+0x20c>)
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	440b      	add	r3, r1
 80037ac:	330c      	adds	r3, #12
 80037ae:	ed93 6a00 	vldr	s12, [r3]
 80037b2:	7dfa      	ldrb	r2, [r7, #23]
 80037b4:	4938      	ldr	r1, [pc, #224]	@ (8003898 <SpiritRadioGetdBm2Reg+0x20c>)
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	440b      	add	r3, r1
 80037c0:	3308      	adds	r3, #8
 80037c2:	edd3 6a00 	vldr	s13, [r3]
 80037c6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80037ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80037d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037da:	d501      	bpl.n	80037e0 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 80037dc:	2302      	movs	r3, #2
 80037de:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 80037e0:	7dfa      	ldrb	r2, [r7, #23]
 80037e2:	7dbb      	ldrb	r3, [r7, #22]
 80037e4:	0059      	lsls	r1, r3, #1
 80037e6:	482c      	ldr	r0, [pc, #176]	@ (8003898 <SpiritRadioGetdBm2Reg+0x20c>)
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	440b      	add	r3, r1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4403      	add	r3, r0
 80037f6:	ed93 7a00 	vldr	s14, [r3]
 80037fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80037fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003802:	7dfa      	ldrb	r2, [r7, #23]
 8003804:	7dbb      	ldrb	r3, [r7, #22]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	1c59      	adds	r1, r3, #1
 800380a:	4823      	ldr	r0, [pc, #140]	@ (8003898 <SpiritRadioGetdBm2Reg+0x20c>)
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	440b      	add	r3, r1
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4403      	add	r3, r0
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003822:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003826:	edd7 7a04 	vldr	s15, [r7, #16]
 800382a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800382e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003836:	d503      	bpl.n	8003840 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003838:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	e00a      	b.n	8003856 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003840:	edd7 7a04 	vldr	s15, [r7, #16]
 8003844:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80038a0 <SpiritRadioGetdBm2Reg+0x214>
 8003848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003850:	dd01      	ble.n	8003856 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003852:	4b14      	ldr	r3, [pc, #80]	@ (80038a4 <SpiritRadioGetdBm2Reg+0x218>)
 8003854:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003856:	edd7 7a04 	vldr	s15, [r7, #16]
 800385a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003862:	793b      	ldrb	r3, [r7, #4]
 8003864:	b2db      	uxtb	r3, r3
}
 8003866:	4618      	mov	r0, r3
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	2e5f5680 	.word	0x2e5f5680
 8003878:	390c2fe0 	.word	0x390c2fe0
 800387c:	35a4e8ff 	.word	0x35a4e8ff
 8003880:	1701e47f 	.word	0x1701e47f
 8003884:	1c146a60 	.word	0x1c146a60
 8003888:	11d260bf 	.word	0x11d260bf
 800388c:	14ced7e0 	.word	0x14ced7e0
 8003890:	08e18f3f 	.word	0x08e18f3f
 8003894:	0a6fd060 	.word	0x0a6fd060
 8003898:	0800a884 	.word	0x0800a884
 800389c:	42200000 	.word	0x42200000
 80038a0:	42b40000 	.word	0x42b40000
 80038a4:	42b40000 	.word	0x42b40000

080038a8 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	ed87 0a00 	vstr	s0, [r7]
 80038b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 80038b6:	f7ff fc4d 	bl	8003154 <SpiritRadioGetFrequencyBase>
 80038ba:	4603      	mov	r3, r0
 80038bc:	ed97 0a00 	vldr	s0, [r7]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fee3 	bl	800368c <SpiritRadioGetdBm2Reg>
 80038c6:	4603      	mov	r3, r0
 80038c8:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f1c3 0317 	rsb	r3, r3, #23
 80038d0:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 80038d2:	f107 020e 	add.w	r2, r7, #14
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2101      	movs	r1, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fb2c 	bl	8003f38 <RadioSpiWriteRegisters>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <SpiritRadioSetPALeveldBm+0x50>)
 80038e4:	b212      	sxth	r2, r2
 80038e6:	4611      	mov	r1, r2
 80038e8:	7019      	strb	r1, [r3, #0]
 80038ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80038ee:	705a      	strb	r2, [r3, #1]
  
}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	2000026c 	.word	0x2000026c

080038fc <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003906:	f107 030f 	add.w	r3, r7, #15
 800390a:	461a      	mov	r2, r3
 800390c:	2101      	movs	r1, #1
 800390e:	2018      	movs	r0, #24
 8003910:	f000 fb5e 	bl	8003fd0 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800391a:	b2db      	uxtb	r3, r3
 800391c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	4313      	orrs	r3, r2
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003928:	f107 030f 	add.w	r3, r7, #15
 800392c:	461a      	mov	r2, r3
 800392e:	2101      	movs	r1, #1
 8003930:	2018      	movs	r0, #24
 8003932:	f000 fb01 	bl	8003f38 <RadioSpiWriteRegisters>
 8003936:	4602      	mov	r2, r0
 8003938:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <SpiritRadioSetPACwc+0x54>)
 800393a:	b212      	sxth	r2, r2
 800393c:	4611      	mov	r1, r2
 800393e:	7019      	strb	r1, [r3, #0]
 8003940:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003944:	705a      	strb	r2, [r3, #1]
  
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000026c 	.word	0x2000026c

08003954 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800395e:	f107 030f 	add.w	r3, r7, #15
 8003962:	461a      	mov	r2, r3
 8003964:	2101      	movs	r1, #1
 8003966:	2018      	movs	r0, #24
 8003968:	f000 fb32 	bl	8003fd0 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	f023 0307 	bic.w	r3, r3, #7
 8003972:	b2db      	uxtb	r3, r3
 8003974:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	4313      	orrs	r3, r2
 800397c:	b2db      	uxtb	r3, r3
 800397e:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003980:	f107 030f 	add.w	r3, r7, #15
 8003984:	461a      	mov	r2, r3
 8003986:	2101      	movs	r1, #1
 8003988:	2018      	movs	r0, #24
 800398a:	f000 fad5 	bl	8003f38 <RadioSpiWriteRegisters>
 800398e:	4602      	mov	r2, r0
 8003990:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003992:	b212      	sxth	r2, r2
 8003994:	4611      	mov	r1, r2
 8003996:	7019      	strb	r1, [r3, #0]
 8003998:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800399c:	705a      	strb	r2, [r3, #1]
  
}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2000026c 	.word	0x2000026c

080039ac <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 80039ba:	f107 030f 	add.w	r3, r7, #15
 80039be:	461a      	mov	r2, r3
 80039c0:	2101      	movs	r1, #1
 80039c2:	201e      	movs	r0, #30
 80039c4:	f000 fb04 	bl	8003fd0 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e004      	b.n	80039e4 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 80039e4:	f107 030f 	add.w	r3, r7, #15
 80039e8:	461a      	mov	r2, r3
 80039ea:	2101      	movs	r1, #1
 80039ec:	201e      	movs	r0, #30
 80039ee:	f000 faa3 	bl	8003f38 <RadioSpiWriteRegisters>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <SpiritRadioAFCFreezeOnSync+0x60>)
 80039f6:	b212      	sxth	r2, r2
 80039f8:	4611      	mov	r1, r2
 80039fa:	7019      	strb	r1, [r3, #0]
 80039fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a00:	705a      	strb	r2, [r3, #1]
  
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2000026c 	.word	0x2000026c

08003a10 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003a1a:	f107 030f 	add.w	r3, r7, #15
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2101      	movs	r1, #1
 8003a22:	209e      	movs	r0, #158	@ 0x9e
 8003a24:	f000 fad4 	bl	8003fd0 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d105      	bne.n	8003a3a <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	e004      	b.n	8003a44 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003a44:	f107 030f 	add.w	r3, r7, #15
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	209e      	movs	r0, #158	@ 0x9e
 8003a4e:	f000 fa73 	bl	8003f38 <RadioSpiWriteRegisters>
 8003a52:	4602      	mov	r2, r0
 8003a54:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <SpiritRadioSetRefDiv+0x5c>)
 8003a56:	b212      	sxth	r2, r2
 8003a58:	4611      	mov	r1, r2
 8003a5a:	7019      	strb	r1, [r3, #0]
 8003a5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a60:	705a      	strb	r2, [r3, #1]
  
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	2000026c 	.word	0x2000026c

08003a70 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003a76:	1dfb      	adds	r3, r7, #7
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	209e      	movs	r0, #158	@ 0x9e
 8003a7e:	f000 faa7 	bl	8003fd0 <RadioSpiReadRegisters>
 8003a82:	4602      	mov	r2, r0
 8003a84:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab0 <SpiritRadioGetRefDiv+0x40>)
 8003a86:	b212      	sxth	r2, r2
 8003a88:	4611      	mov	r1, r2
 8003a8a:	7019      	strb	r1, [r3, #0]
 8003a8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a90:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	09db      	lsrs	r3, r3, #7
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003aa4:	2300      	movs	r3, #0
  }
  
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	2000026c 	.word	0x2000026c

08003ab4 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003abe:	f107 030f 	add.w	r3, r7, #15
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	20b4      	movs	r0, #180	@ 0xb4
 8003ac8:	f000 fa82 	bl	8003fd0 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	f023 0308 	bic.w	r3, r3, #8
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e004      	b.n	8003ae8 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	f043 0308 	orr.w	r3, r3, #8
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003ae8:	f107 030f 	add.w	r3, r7, #15
 8003aec:	461a      	mov	r2, r3
 8003aee:	2101      	movs	r1, #1
 8003af0:	20b4      	movs	r0, #180	@ 0xb4
 8003af2:	f000 fa21 	bl	8003f38 <RadioSpiWriteRegisters>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <SpiritRadioSetDigDiv+0x5c>)
 8003afa:	b212      	sxth	r2, r2
 8003afc:	4611      	mov	r1, r2
 8003afe:	7019      	strb	r1, [r3, #0]
 8003b00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b04:	705a      	strb	r2, [r3, #1]
  
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000026c 	.word	0x2000026c

08003b14 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003b1a:	1dfb      	adds	r3, r7, #7
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2101      	movs	r1, #1
 8003b20:	20b4      	movs	r0, #180	@ 0xb4
 8003b22:	f000 fa55 	bl	8003fd0 <RadioSpiReadRegisters>
 8003b26:	4602      	mov	r2, r0
 8003b28:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <SpiritRadioGetDigDiv+0x40>)
 8003b2a:	b212      	sxth	r2, r2
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	7019      	strb	r1, [r3, #0]
 8003b30:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b34:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	08db      	lsrs	r3, r3, #3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e000      	b.n	8003b4a <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003b48:	2301      	movs	r3, #1
  }
  
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2000026c 	.word	0x2000026c

08003b58 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <SpiritRadioGetXtalFrequency+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000268 	.word	0x20000268

08003b70 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003b78:	4a04      	ldr	r2, [pc, #16]	@ (8003b8c <SpiritRadioSetXtalFrequency+0x1c>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6013      	str	r3, [r2, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000268 	.word	0x20000268

08003b90 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8003b9a:	f107 020c 	add.w	r2, r7, #12
 8003b9e:	f107 030c 	add.w	r3, r7, #12
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	ed97 0a01 	vldr	s0, [r7, #4]
 8003bac:	f000 f816 	bl	8003bdc <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	2053      	movs	r0, #83	@ 0x53
 8003bba:	f000 f9bd 	bl	8003f38 <RadioSpiWriteRegisters>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b05      	ldr	r3, [pc, #20]	@ (8003bd8 <SpiritTimerSetRxTimeoutMs+0x48>)
 8003bc2:	b212      	sxth	r2, r2
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	7019      	strb	r1, [r3, #0]
 8003bc8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003bcc:	705a      	strb	r2, [r3, #1]

}
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000026c 	.word	0x2000026c

08003bdc <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	ed87 0a03 	vstr	s0, [r7, #12]
 8003be6:	60b8      	str	r0, [r7, #8]
 8003be8:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8003bea:	f7ff ffb5 	bl	8003b58 <SpiritRadioGetXtalFrequency>
 8003bee:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4a91      	ldr	r2, [pc, #580]	@ (8003e38 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d902      	bls.n	8003bfe <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	ee07 3a90 	vmov	s15, r3
 8003c04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c10:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003e3c <SpiritTimerComputeRxTimeoutValues+0x260>
 8003c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1c:	ee17 3a90 	vmov	r3, s15
 8003c20:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f64f 5201 	movw	r2, #64769	@ 0xfd01
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d906      	bls.n	8003c3a <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	22ff      	movs	r2, #255	@ 0xff
 8003c30:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	22ff      	movs	r2, #255	@ 0xff
 8003c36:	701a      	strb	r2, [r3, #0]
    return;
 8003c38:	e0fa      	b.n	8003e30 <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4a80      	ldr	r2, [pc, #512]	@ (8003e40 <SpiritTimerComputeRxTimeoutValues+0x264>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	09db      	lsrs	r3, r3, #7
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	3302      	adds	r3, #2
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7c:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8003e3c <SpiritTimerComputeRxTimeoutValues+0x260>
 8003c80:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c92:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca2:	dd1d      	ble.n	8003ce0 <SpiritTimerComputeRxTimeoutValues+0x104>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003e3c <SpiritTimerComputeRxTimeoutValues+0x260>
 8003cc4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cde:	e01e      	b.n	8003d1e <SpiritTimerComputeRxTimeoutValues+0x142>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfc:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003e3c <SpiritTimerComputeRxTimeoutValues+0x260>
 8003d00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1a:	eef1 7a67 	vneg.f32	s15, s15
 8003d1e:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2bff      	cmp	r3, #255	@ 0xff
 8003d28:	d06e      	beq.n	8003e08 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	ee07 3a90 	vmov	s15, r3
 8003d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d48:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8003e3c <SpiritTimerComputeRxTimeoutValues+0x260>
 8003d4c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6e:	dd1e      	ble.n	8003dae <SpiritTimerComputeRxTimeoutValues+0x1d2>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8003e3c <SpiritTimerComputeRxTimeoutValues+0x260>
 8003d92:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dac:	e01f      	b.n	8003dee <SpiritTimerComputeRxTimeoutValues+0x212>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	ee07 3a90 	vmov	s15, r3
 8003dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dcc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003e3c <SpiritTimerComputeRxTimeoutValues+0x260>
 8003dd0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dea:	eef1 7a67 	vneg.f32	s15, s15
 8003dee:	ed97 7a05 	vldr	s14, [r7, #20]
 8003df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfa:	d505      	bpl.n	8003e08 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d906      	bls.n	8003e2a <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e002      	b.n	8003e30 <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
}
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	01c9c380 	.word	0x01c9c380
 8003e3c:	4993b480 	.word	0x4993b480
 8003e40:	80808081 	.word	0x80808081

08003e44 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	461a      	mov	r2, r3
 8003e54:	2102      	movs	r1, #2
 8003e56:	204f      	movs	r0, #79	@ 0x4f
 8003e58:	f000 f8ba 	bl	8003fd0 <RadioSpiReadRegisters>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003e60:	b212      	sxth	r2, r2
 8003e62:	4611      	mov	r1, r2
 8003e64:	7019      	strb	r1, [r3, #0]
 8003e66:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e6a:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003e6c:	7b3b      	ldrb	r3, [r7, #12]
 8003e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003e76:	7b3b      	ldrb	r3, [r7, #12]
 8003e78:	b25a      	sxtb	r2, r3
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	4313      	orrs	r3, r2
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003e8e:	7b7b      	ldrb	r3, [r7, #13]
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003e98:	7b7b      	ldrb	r3, [r7, #13]
 8003e9a:	b25a      	sxtb	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	015b      	lsls	r3, r3, #5
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	204f      	movs	r0, #79	@ 0x4f
 8003eb4:	f000 f840 	bl	8003f38 <RadioSpiWriteRegisters>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003ebc:	b212      	sxth	r2, r2
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	7019      	strb	r1, [r3, #0]
 8003ec2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ec6:	705a      	strb	r2, [r3, #1]

}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	2000026c 	.word	0x2000026c

08003ed4 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	461a      	mov	r2, r3
 8003ede:	2102      	movs	r1, #2
 8003ee0:	20c0      	movs	r0, #192	@ 0xc0
 8003ee2:	f000 f875 	bl	8003fd0 <RadioSpiReadRegisters>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4a09      	ldr	r2, [pc, #36]	@ (8003f10 <SpiritRefreshStatus+0x3c>)
 8003eea:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003eec:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <SpiritRefreshStatus+0x3c>)
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	797b      	ldrb	r3, [r7, #5]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d1f1      	bne.n	8003eda <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <SpiritRefreshStatus+0x40>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d1ea      	bne.n	8003eda <SpiritRefreshStatus+0x6>

}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	2000026c 	.word	0x2000026c
 8003f14:	2000026d 	.word	0x2000026d

08003f18 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8003f1c:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <RadioSpiInit+0x1c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <RadioSpiInit+0x16>
  {
    Error_Handler();
 8003f2a:	f7fd fa33 	bl	8001394 <Error_Handler>
  }
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000008 	.word	0x20000008

08003f38 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	4603      	mov	r3, r0
 8003f40:	603a      	str	r2, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
 8003f44:	460b      	mov	r3, r1
 8003f46:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8003f48:	2300      	movs	r3, #0
 8003f4a:	743b      	strb	r3, [r7, #16]
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003f50:	2017      	movs	r0, #23
 8003f52:	f000 fa73 	bl	800443c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8003f56:	2200      	movs	r2, #0
 8003f58:	2140      	movs	r1, #64	@ 0x40
 8003f5a:	481b      	ldr	r0, [pc, #108]	@ (8003fc8 <RadioSpiWriteRegisters+0x90>)
 8003f5c:	f000 fc26 	bl	80047ac <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003f60:	4b1a      	ldr	r3, [pc, #104]	@ (8003fcc <RadioSpiWriteRegisters+0x94>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	f107 020c 	add.w	r2, r7, #12
 8003f68:	f107 0110 	add.w	r1, r7, #16
 8003f6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2302      	movs	r3, #2
 8003f74:	f001 fe19 	bl	8005baa <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003f78:	4b14      	ldr	r3, [pc, #80]	@ (8003fcc <RadioSpiWriteRegisters+0x94>)
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	79bb      	ldrb	r3, [r7, #6]
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f84:	6839      	ldr	r1, [r7, #0]
 8003f86:	f001 fb64 	bl	8005652 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	2140      	movs	r1, #64	@ 0x40
 8003f8e:	480e      	ldr	r0, [pc, #56]	@ (8003fc8 <RadioSpiWriteRegisters+0x90>)
 8003f90:	f000 fc0c 	bl	80047ac <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003f94:	2017      	movs	r0, #23
 8003f96:	f000 fa43 	bl	8004420 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	7b3a      	ldrb	r2, [r7, #12]
 8003fa2:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003fa4:	f107 0308 	add.w	r3, r7, #8
 8003fa8:	7b7a      	ldrb	r2, [r7, #13]
 8003faa:	701a      	strb	r2, [r3, #0]

  return status;
 8003fac:	893b      	ldrh	r3, [r7, #8]
 8003fae:	82bb      	strh	r3, [r7, #20]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	7d3a      	ldrb	r2, [r7, #20]
 8003fb4:	f362 0307 	bfi	r3, r2, #0, #8
 8003fb8:	7d7a      	ldrb	r2, [r7, #21]
 8003fba:	f362 230f 	bfi	r3, r2, #8, #8

}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	48000400 	.word	0x48000400
 8003fcc:	20000008 	.word	0x20000008

08003fd0 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	603a      	str	r2, [r7, #0]
 8003fda:	71fb      	strb	r3, [r7, #7]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	743b      	strb	r3, [r7, #16]
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003fe8:	2017      	movs	r0, #23
 8003fea:	f000 fa27 	bl	800443c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2140      	movs	r1, #64	@ 0x40
 8003ff2:	481b      	ldr	r0, [pc, #108]	@ (8004060 <RadioSpiReadRegisters+0x90>)
 8003ff4:	f000 fbda 	bl	80047ac <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8004064 <RadioSpiReadRegisters+0x94>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	f107 020c 	add.w	r2, r7, #12
 8004000:	f107 0110 	add.w	r1, r7, #16
 8004004:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	2302      	movs	r3, #2
 800400c:	f001 fdcd 	bl	8005baa <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004010:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <RadioSpiReadRegisters+0x94>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	79bb      	ldrb	r3, [r7, #6]
 8004016:	b29a      	uxth	r2, r3
 8004018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	f001 fc8d 	bl	800593c <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004022:	2201      	movs	r2, #1
 8004024:	2140      	movs	r1, #64	@ 0x40
 8004026:	480e      	ldr	r0, [pc, #56]	@ (8004060 <RadioSpiReadRegisters+0x90>)
 8004028:	f000 fbc0 	bl	80047ac <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800402c:	2017      	movs	r0, #23
 800402e:	f000 f9f7 	bl	8004420 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004032:	f107 0308 	add.w	r3, r7, #8
 8004036:	3301      	adds	r3, #1
 8004038:	7b3a      	ldrb	r2, [r7, #12]
 800403a:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800403c:	f107 0308 	add.w	r3, r7, #8
 8004040:	7b7a      	ldrb	r2, [r7, #13]
 8004042:	701a      	strb	r2, [r3, #0]

  return status;
 8004044:	893b      	ldrh	r3, [r7, #8]
 8004046:	82bb      	strh	r3, [r7, #20]
 8004048:	2300      	movs	r3, #0
 800404a:	7d3a      	ldrb	r2, [r7, #20]
 800404c:	f362 0307 	bfi	r3, r2, #0, #8
 8004050:	7d7a      	ldrb	r2, [r7, #21]
 8004052:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	48000400 	.word	0x48000400
 8004064:	20000008 	.word	0x20000008

08004068 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	743b      	strb	r3, [r7, #16]
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800407a:	2017      	movs	r0, #23
 800407c:	f000 f9de 	bl	800443c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004080:	2200      	movs	r2, #0
 8004082:	2140      	movs	r1, #64	@ 0x40
 8004084:	4816      	ldr	r0, [pc, #88]	@ (80040e0 <RadioSpiCommandStrobes+0x78>)
 8004086:	f000 fb91 	bl	80047ac <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800408a:	4b16      	ldr	r3, [pc, #88]	@ (80040e4 <RadioSpiCommandStrobes+0x7c>)
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	f107 020c 	add.w	r2, r7, #12
 8004092:	f107 0110 	add.w	r1, r7, #16
 8004096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2302      	movs	r3, #2
 800409e:	f001 fd84 	bl	8005baa <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80040a2:	2201      	movs	r2, #1
 80040a4:	2140      	movs	r1, #64	@ 0x40
 80040a6:	480e      	ldr	r0, [pc, #56]	@ (80040e0 <RadioSpiCommandStrobes+0x78>)
 80040a8:	f000 fb80 	bl	80047ac <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80040ac:	2017      	movs	r0, #23
 80040ae:	f000 f9b7 	bl	8004420 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80040b2:	f107 0308 	add.w	r3, r7, #8
 80040b6:	3301      	adds	r3, #1
 80040b8:	7b3a      	ldrb	r2, [r7, #12]
 80040ba:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80040bc:	f107 0308 	add.w	r3, r7, #8
 80040c0:	7b7a      	ldrb	r2, [r7, #13]
 80040c2:	701a      	strb	r2, [r3, #0]

  return status;
 80040c4:	893b      	ldrh	r3, [r7, #8]
 80040c6:	82bb      	strh	r3, [r7, #20]
 80040c8:	2300      	movs	r3, #0
 80040ca:	7d3a      	ldrb	r2, [r7, #20]
 80040cc:	f362 0307 	bfi	r3, r2, #0, #8
 80040d0:	7d7a      	ldrb	r2, [r7, #21]
 80040d2:	f362 230f 	bfi	r3, r2, #8, #8
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	48000400 	.word	0x48000400
 80040e4:	20000008 	.word	0x20000008

080040e8 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	4603      	mov	r3, r0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 80040f4:	f64f 7301 	movw	r3, #65281	@ 0xff01
 80040f8:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80040fa:	2017      	movs	r0, #23
 80040fc:	f000 f99e 	bl	800443c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004100:	2200      	movs	r2, #0
 8004102:	2140      	movs	r1, #64	@ 0x40
 8004104:	481a      	ldr	r0, [pc, #104]	@ (8004170 <RadioSpiReadFifo+0x88>)
 8004106:	f000 fb51 	bl	80047ac <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800410a:	4b1a      	ldr	r3, [pc, #104]	@ (8004174 <RadioSpiReadFifo+0x8c>)
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	f107 020c 	add.w	r2, r7, #12
 8004112:	f107 0110 	add.w	r1, r7, #16
 8004116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2302      	movs	r3, #2
 800411e:	f001 fd44 	bl	8005baa <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004122:	4b14      	ldr	r3, [pc, #80]	@ (8004174 <RadioSpiReadFifo+0x8c>)
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	b29a      	uxth	r2, r3
 800412a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800412e:	6839      	ldr	r1, [r7, #0]
 8004130:	f001 fc04 	bl	800593c <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8004134:	2201      	movs	r2, #1
 8004136:	2140      	movs	r1, #64	@ 0x40
 8004138:	480d      	ldr	r0, [pc, #52]	@ (8004170 <RadioSpiReadFifo+0x88>)
 800413a:	f000 fb37 	bl	80047ac <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800413e:	2017      	movs	r0, #23
 8004140:	f000 f96e 	bl	8004420 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004144:	f107 0308 	add.w	r3, r7, #8
 8004148:	3301      	adds	r3, #1
 800414a:	7b3a      	ldrb	r2, [r7, #12]
 800414c:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800414e:	f107 0308 	add.w	r3, r7, #8
 8004152:	7b7a      	ldrb	r2, [r7, #13]
 8004154:	701a      	strb	r2, [r3, #0]

  return status;
 8004156:	893b      	ldrh	r3, [r7, #8]
 8004158:	82bb      	strh	r3, [r7, #20]
 800415a:	2300      	movs	r3, #0
 800415c:	7d3a      	ldrb	r2, [r7, #20]
 800415e:	f362 0307 	bfi	r3, r2, #0, #8
 8004162:	7d7a      	ldrb	r2, [r7, #21]
 8004164:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	48000400 	.word	0x48000400
 8004174:	20000008 	.word	0x20000008

08004178 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 800417c:	2201      	movs	r2, #1
 800417e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004186:	f000 fb11 	bl	80047ac <HAL_GPIO_WritePin>
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}

0800418e <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8004194:	2200      	movs	r2, #0
 8004196:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800419a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800419e:	f000 fb05 	bl	80047ac <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  for(volatile uint32_t i=0;i<0x1E00;i++);
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	e002      	b.n	80041ae <RadioExitShutdown+0x20>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3301      	adds	r3, #1
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80041b4:	d3f8      	bcc.n	80041a8 <RadioExitShutdown+0x1a>
  // HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041ca:	2003      	movs	r0, #3
 80041cc:	f000 f901 	bl	80043d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041d0:	200f      	movs	r0, #15
 80041d2:	f7fd fab1 	bl	8001738 <HAL_InitTick>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	71fb      	strb	r3, [r7, #7]
 80041e0:	e001      	b.n	80041e6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041e2:	f7fd fa81 	bl	80016e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041e6:	79fb      	ldrb	r3, [r7, #7]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041f4:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <HAL_IncTick+0x20>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <HAL_IncTick+0x24>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	4a04      	ldr	r2, [pc, #16]	@ (8004214 <HAL_IncTick+0x24>)
 8004202:	6013      	str	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000010 	.word	0x20000010
 8004214:	20000270 	.word	0x20000270

08004218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return uwTick;
 800421c:	4b03      	ldr	r3, [pc, #12]	@ (800422c <HAL_GetTick+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000270 	.word	0x20000270

08004230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800425c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004262:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	60d3      	str	r3, [r2, #12]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800427c:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <__NVIC_GetPriorityGrouping+0x18>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 0307 	and.w	r3, r3, #7
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db0b      	blt.n	80042be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4907      	ldr	r1, [pc, #28]	@ (80042cc <__NVIC_EnableIRQ+0x38>)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2001      	movs	r0, #1
 80042b6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	db12      	blt.n	8004308 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	f003 021f 	and.w	r2, r3, #31
 80042e8:	490a      	ldr	r1, [pc, #40]	@ (8004314 <__NVIC_DisableIRQ+0x44>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2001      	movs	r0, #1
 80042f2:	fa00 f202 	lsl.w	r2, r0, r2
 80042f6:	3320      	adds	r3, #32
 80042f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042fc:	f3bf 8f4f 	dsb	sy
}
 8004300:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004302:	f3bf 8f6f 	isb	sy
}
 8004306:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000e100 	.word	0xe000e100

08004318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	6039      	str	r1, [r7, #0]
 8004322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004328:	2b00      	cmp	r3, #0
 800432a:	db0a      	blt.n	8004342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	490c      	ldr	r1, [pc, #48]	@ (8004364 <__NVIC_SetPriority+0x4c>)
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	440b      	add	r3, r1
 800433c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004340:	e00a      	b.n	8004358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4908      	ldr	r1, [pc, #32]	@ (8004368 <__NVIC_SetPriority+0x50>)
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	3b04      	subs	r3, #4
 8004350:	0112      	lsls	r2, r2, #4
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	440b      	add	r3, r1
 8004356:	761a      	strb	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000e100 	.word	0xe000e100
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	@ 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	2b04      	cmp	r3, #4
 8004388:	bf28      	it	cs
 800438a:	2304      	movcs	r3, #4
 800438c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3304      	adds	r3, #4
 8004392:	2b06      	cmp	r3, #6
 8004394:	d902      	bls.n	800439c <NVIC_EncodePriority+0x30>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3b03      	subs	r3, #3
 800439a:	e000      	b.n	800439e <NVIC_EncodePriority+0x32>
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	401a      	ands	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b4:	f04f 31ff 	mov.w	r1, #4294967295
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	43d9      	mvns	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	4313      	orrs	r3, r2
         );
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3724      	adds	r7, #36	@ 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ff28 	bl	8004230 <__NVIC_SetPriorityGrouping>
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043fa:	f7ff ff3d 	bl	8004278 <__NVIC_GetPriorityGrouping>
 80043fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	6978      	ldr	r0, [r7, #20]
 8004406:	f7ff ffb1 	bl	800436c <NVIC_EncodePriority>
 800440a:	4602      	mov	r2, r0
 800440c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004410:	4611      	mov	r1, r2
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff80 	bl	8004318 <__NVIC_SetPriority>
}
 8004418:	bf00      	nop
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff ff30 	bl	8004294 <__NVIC_EnableIRQ>
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff ff40 	bl	80042d0 <__NVIC_DisableIRQ>
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004466:	e17f      	b.n	8004768 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2101      	movs	r1, #1
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	4013      	ands	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8171 	beq.w	8004762 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	2b01      	cmp	r3, #1
 800448a:	d005      	beq.n	8004498 <HAL_GPIO_Init+0x40>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d130      	bne.n	80044fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	2203      	movs	r2, #3
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ce:	2201      	movs	r2, #1
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f003 0201 	and.w	r2, r3, #1
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b03      	cmp	r3, #3
 8004504:	d118      	bne.n	8004538 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800450c:	2201      	movs	r2, #1
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	f003 0201 	and.w	r2, r3, #1
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b03      	cmp	r3, #3
 8004542:	d017      	beq.n	8004574 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	2203      	movs	r2, #3
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d123      	bne.n	80045c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	08da      	lsrs	r2, r3, #3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3208      	adds	r2, #8
 8004588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800458c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	220f      	movs	r2, #15
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	08da      	lsrs	r2, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3208      	adds	r2, #8
 80045c2:	6939      	ldr	r1, [r7, #16]
 80045c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	2203      	movs	r2, #3
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0203 	and.w	r2, r3, #3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80ac 	beq.w	8004762 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460a:	4b5f      	ldr	r3, [pc, #380]	@ (8004788 <HAL_GPIO_Init+0x330>)
 800460c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800460e:	4a5e      	ldr	r2, [pc, #376]	@ (8004788 <HAL_GPIO_Init+0x330>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6613      	str	r3, [r2, #96]	@ 0x60
 8004616:	4b5c      	ldr	r3, [pc, #368]	@ (8004788 <HAL_GPIO_Init+0x330>)
 8004618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004622:	4a5a      	ldr	r2, [pc, #360]	@ (800478c <HAL_GPIO_Init+0x334>)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	089b      	lsrs	r3, r3, #2
 8004628:	3302      	adds	r3, #2
 800462a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	220f      	movs	r2, #15
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4013      	ands	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800464c:	d025      	beq.n	800469a <HAL_GPIO_Init+0x242>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a4f      	ldr	r2, [pc, #316]	@ (8004790 <HAL_GPIO_Init+0x338>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01f      	beq.n	8004696 <HAL_GPIO_Init+0x23e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a4e      	ldr	r2, [pc, #312]	@ (8004794 <HAL_GPIO_Init+0x33c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d019      	beq.n	8004692 <HAL_GPIO_Init+0x23a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a4d      	ldr	r2, [pc, #308]	@ (8004798 <HAL_GPIO_Init+0x340>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_GPIO_Init+0x236>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a4c      	ldr	r2, [pc, #304]	@ (800479c <HAL_GPIO_Init+0x344>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00d      	beq.n	800468a <HAL_GPIO_Init+0x232>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a4b      	ldr	r2, [pc, #300]	@ (80047a0 <HAL_GPIO_Init+0x348>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <HAL_GPIO_Init+0x22e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4a      	ldr	r2, [pc, #296]	@ (80047a4 <HAL_GPIO_Init+0x34c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_GPIO_Init+0x22a>
 800467e:	2306      	movs	r3, #6
 8004680:	e00c      	b.n	800469c <HAL_GPIO_Init+0x244>
 8004682:	2307      	movs	r3, #7
 8004684:	e00a      	b.n	800469c <HAL_GPIO_Init+0x244>
 8004686:	2305      	movs	r3, #5
 8004688:	e008      	b.n	800469c <HAL_GPIO_Init+0x244>
 800468a:	2304      	movs	r3, #4
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x244>
 800468e:	2303      	movs	r3, #3
 8004690:	e004      	b.n	800469c <HAL_GPIO_Init+0x244>
 8004692:	2302      	movs	r3, #2
 8004694:	e002      	b.n	800469c <HAL_GPIO_Init+0x244>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_GPIO_Init+0x244>
 800469a:	2300      	movs	r3, #0
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	f002 0203 	and.w	r2, r2, #3
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	4093      	lsls	r3, r2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046ac:	4937      	ldr	r1, [pc, #220]	@ (800478c <HAL_GPIO_Init+0x334>)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	3302      	adds	r3, #2
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046ba:	4b3b      	ldr	r3, [pc, #236]	@ (80047a8 <HAL_GPIO_Init+0x350>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046de:	4a32      	ldr	r2, [pc, #200]	@ (80047a8 <HAL_GPIO_Init+0x350>)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046e4:	4b30      	ldr	r3, [pc, #192]	@ (80047a8 <HAL_GPIO_Init+0x350>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004708:	4a27      	ldr	r2, [pc, #156]	@ (80047a8 <HAL_GPIO_Init+0x350>)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800470e:	4b26      	ldr	r3, [pc, #152]	@ (80047a8 <HAL_GPIO_Init+0x350>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	43db      	mvns	r3, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4013      	ands	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004732:	4a1d      	ldr	r2, [pc, #116]	@ (80047a8 <HAL_GPIO_Init+0x350>)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004738:	4b1b      	ldr	r3, [pc, #108]	@ (80047a8 <HAL_GPIO_Init+0x350>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	43db      	mvns	r3, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800475c:	4a12      	ldr	r2, [pc, #72]	@ (80047a8 <HAL_GPIO_Init+0x350>)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	3301      	adds	r3, #1
 8004766:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	fa22 f303 	lsr.w	r3, r2, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	f47f ae78 	bne.w	8004468 <HAL_GPIO_Init+0x10>
  }
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	40010000 	.word	0x40010000
 8004790:	48000400 	.word	0x48000400
 8004794:	48000800 	.word	0x48000800
 8004798:	48000c00 	.word	0x48000c00
 800479c:	48001000 	.word	0x48001000
 80047a0:	48001400 	.word	0x48001400
 80047a4:	48001800 	.word	0x48001800
 80047a8:	40010400 	.word	0x40010400

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
 80047b8:	4613      	mov	r3, r2
 80047ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047c8:	e002      	b.n	80047d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ca:	887a      	ldrh	r2, [r7, #2]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047e6:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d006      	beq.n	8004800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047f2:	4a05      	ldr	r2, [pc, #20]	@ (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fd2c 	bl	8001258 <HAL_GPIO_EXTI_Callback>
  }
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40010400 	.word	0x40010400

0800480c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004810:	4b04      	ldr	r3, [pc, #16]	@ (8004824 <HAL_PWREx_GetVoltageRange+0x18>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40007000 	.word	0x40007000

08004828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004836:	d130      	bne.n	800489a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004838:	4b23      	ldr	r3, [pc, #140]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004844:	d038      	beq.n	80048b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004846:	4b20      	ldr	r3, [pc, #128]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800484e:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004850:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004854:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004856:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2232      	movs	r2, #50	@ 0x32
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	4a1b      	ldr	r2, [pc, #108]	@ (80048d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	0c9b      	lsrs	r3, r3, #18
 8004868:	3301      	adds	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800486c:	e002      	b.n	8004874 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3b01      	subs	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004874:	4b14      	ldr	r3, [pc, #80]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004880:	d102      	bne.n	8004888 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f2      	bne.n	800486e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004888:	4b0f      	ldr	r3, [pc, #60]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004894:	d110      	bne.n	80048b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e00f      	b.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800489a:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a6:	d007      	beq.n	80048b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048a8:	4b07      	ldr	r3, [pc, #28]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048b0:	4a05      	ldr	r2, [pc, #20]	@ (80048c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40007000 	.word	0x40007000
 80048cc:	20000000 	.word	0x20000000
 80048d0:	431bde83 	.word	0x431bde83

080048d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e3ca      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e6:	4b97      	ldr	r3, [pc, #604]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f0:	4b94      	ldr	r3, [pc, #592]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80e4 	beq.w	8004ad0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_RCC_OscConfig+0x4a>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b0c      	cmp	r3, #12
 8004912:	f040 808b 	bne.w	8004a2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b01      	cmp	r3, #1
 800491a:	f040 8087 	bne.w	8004a2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800491e:	4b89      	ldr	r3, [pc, #548]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_RCC_OscConfig+0x62>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e3a2      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	4b82      	ldr	r3, [pc, #520]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <HAL_RCC_OscConfig+0x7c>
 8004946:	4b7f      	ldr	r3, [pc, #508]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800494e:	e005      	b.n	800495c <HAL_RCC_OscConfig+0x88>
 8004950:	4b7c      	ldr	r3, [pc, #496]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800495c:	4293      	cmp	r3, r2
 800495e:	d223      	bcs.n	80049a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fd71 	bl	800544c <RCC_SetFlashLatencyFromMSIRange>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e383      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004974:	4b73      	ldr	r3, [pc, #460]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a72      	ldr	r2, [pc, #456]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 800497a:	f043 0308 	orr.w	r3, r3, #8
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4b70      	ldr	r3, [pc, #448]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	496d      	ldr	r1, [pc, #436]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004992:	4b6c      	ldr	r3, [pc, #432]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	4968      	ldr	r1, [pc, #416]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
 80049a6:	e025      	b.n	80049f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049a8:	4b66      	ldr	r3, [pc, #408]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a65      	ldr	r2, [pc, #404]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049ae:	f043 0308 	orr.w	r3, r3, #8
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4b63      	ldr	r3, [pc, #396]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4960      	ldr	r1, [pc, #384]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	495b      	ldr	r1, [pc, #364]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fd31 	bl	800544c <RCC_SetFlashLatencyFromMSIRange>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e343      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049f4:	f000 fc4a 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b52      	ldr	r3, [pc, #328]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	4950      	ldr	r1, [pc, #320]	@ (8004b48 <HAL_RCC_OscConfig+0x274>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	4a4e      	ldr	r2, [pc, #312]	@ (8004b4c <HAL_RCC_OscConfig+0x278>)
 8004a12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a14:	4b4e      	ldr	r3, [pc, #312]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fc fe8d 	bl	8001738 <HAL_InitTick>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d052      	beq.n	8004ace <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	e327      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d032      	beq.n	8004a9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a34:	4b43      	ldr	r3, [pc, #268]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a42      	ldr	r2, [pc, #264]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a40:	f7ff fbea 	bl	8004218 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a48:	f7ff fbe6 	bl	8004218 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e310      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a66:	4b37      	ldr	r3, [pc, #220]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a36      	ldr	r2, [pc, #216]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	f043 0308 	orr.w	r3, r3, #8
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b34      	ldr	r3, [pc, #208]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4931      	ldr	r1, [pc, #196]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a84:	4b2f      	ldr	r3, [pc, #188]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	492c      	ldr	r1, [pc, #176]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
 8004a98:	e01a      	b.n	8004ad0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a29      	ldr	r2, [pc, #164]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aa6:	f7ff fbb7 	bl	8004218 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aae:	f7ff fbb3 	bl	8004218 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e2dd      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ac0:	4b20      	ldr	r3, [pc, #128]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCC_OscConfig+0x1da>
 8004acc:	e000      	b.n	8004ad0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ace:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d074      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d005      	beq.n	8004aee <HAL_RCC_OscConfig+0x21a>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b0c      	cmp	r3, #12
 8004ae6:	d10e      	bne.n	8004b06 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d10b      	bne.n	8004b06 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aee:	4b15      	ldr	r3, [pc, #84]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d064      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x2f0>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d160      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e2ba      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0e:	d106      	bne.n	8004b1e <HAL_RCC_OscConfig+0x24a>
 8004b10:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0b      	ldr	r2, [pc, #44]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e026      	b.n	8004b6c <HAL_RCC_OscConfig+0x298>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b26:	d115      	bne.n	8004b54 <HAL_RCC_OscConfig+0x280>
 8004b28:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a05      	ldr	r2, [pc, #20]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004b2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a02      	ldr	r2, [pc, #8]	@ (8004b44 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	e014      	b.n	8004b6c <HAL_RCC_OscConfig+0x298>
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	0800a758 	.word	0x0800a758
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	2000000c 	.word	0x2000000c
 8004b54:	4ba0      	ldr	r3, [pc, #640]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a9f      	ldr	r2, [pc, #636]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b9d      	ldr	r3, [pc, #628]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a9c      	ldr	r2, [pc, #624]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7ff fb50 	bl	8004218 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7ff fb4c 	bl	8004218 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	@ 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e276      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b8e:	4b92      	ldr	r3, [pc, #584]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x2a8>
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7ff fb3c 	bl	8004218 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7ff fb38 	bl	8004218 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	@ 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e262      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bb6:	4b88      	ldr	r3, [pc, #544]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x2d0>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d060      	beq.n	8004c94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_OscConfig+0x310>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d119      	bne.n	8004c12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d116      	bne.n	8004c12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be4:	4b7c      	ldr	r3, [pc, #496]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_OscConfig+0x328>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e23f      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfc:	4b76      	ldr	r3, [pc, #472]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	4973      	ldr	r1, [pc, #460]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c10:	e040      	b.n	8004c94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d023      	beq.n	8004c62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6e      	ldr	r2, [pc, #440]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7ff faf7 	bl	8004218 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c2e:	f7ff faf3 	bl	8004218 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e21d      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c40:	4b65      	ldr	r3, [pc, #404]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4c:	4b62      	ldr	r3, [pc, #392]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	495f      	ldr	r1, [pc, #380]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	604b      	str	r3, [r1, #4]
 8004c60:	e018      	b.n	8004c94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c62:	4b5d      	ldr	r3, [pc, #372]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6e:	f7ff fad3 	bl	8004218 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c76:	f7ff facf 	bl	8004218 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e1f9      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c88:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d03c      	beq.n	8004d1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01c      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cae:	4a4a      	ldr	r2, [pc, #296]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb8:	f7ff faae 	bl	8004218 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc0:	f7ff faaa 	bl	8004218 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e1d4      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cd2:	4b41      	ldr	r3, [pc, #260]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ef      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x3ec>
 8004ce0:	e01b      	b.n	8004d1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ce8:	4a3b      	ldr	r2, [pc, #236]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf2:	f7ff fa91 	bl	8004218 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfa:	f7ff fa8d 	bl	8004218 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e1b7      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d0c:	4b32      	ldr	r3, [pc, #200]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1ef      	bne.n	8004cfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 80a6 	beq.w	8004e74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10d      	bne.n	8004d54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d38:	4b27      	ldr	r3, [pc, #156]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	4a26      	ldr	r2, [pc, #152]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d44:	4b24      	ldr	r3, [pc, #144]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d50:	2301      	movs	r3, #1
 8004d52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d54:	4b21      	ldr	r3, [pc, #132]	@ (8004ddc <HAL_RCC_OscConfig+0x508>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d118      	bne.n	8004d92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d60:	4b1e      	ldr	r3, [pc, #120]	@ (8004ddc <HAL_RCC_OscConfig+0x508>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1d      	ldr	r2, [pc, #116]	@ (8004ddc <HAL_RCC_OscConfig+0x508>)
 8004d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6c:	f7ff fa54 	bl	8004218 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d74:	f7ff fa50 	bl	8004218 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e17a      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d86:	4b15      	ldr	r3, [pc, #84]	@ (8004ddc <HAL_RCC_OscConfig+0x508>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d108      	bne.n	8004dac <HAL_RCC_OscConfig+0x4d8>
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da0:	4a0d      	ldr	r2, [pc, #52]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004daa:	e029      	b.n	8004e00 <HAL_RCC_OscConfig+0x52c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b05      	cmp	r3, #5
 8004db2:	d115      	bne.n	8004de0 <HAL_RCC_OscConfig+0x50c>
 8004db4:	4b08      	ldr	r3, [pc, #32]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dba:	4a07      	ldr	r2, [pc, #28]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004dbc:	f043 0304 	orr.w	r3, r3, #4
 8004dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dc4:	4b04      	ldr	r3, [pc, #16]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	4a03      	ldr	r2, [pc, #12]	@ (8004dd8 <HAL_RCC_OscConfig+0x504>)
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dd4:	e014      	b.n	8004e00 <HAL_RCC_OscConfig+0x52c>
 8004dd6:	bf00      	nop
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40007000 	.word	0x40007000
 8004de0:	4b9c      	ldr	r3, [pc, #624]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de6:	4a9b      	ldr	r2, [pc, #620]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004df0:	4b98      	ldr	r3, [pc, #608]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df6:	4a97      	ldr	r2, [pc, #604]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d016      	beq.n	8004e36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7ff fa06 	bl	8004218 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7ff fa02 	bl	8004218 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e12a      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e26:	4b8b      	ldr	r3, [pc, #556]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0ed      	beq.n	8004e10 <HAL_RCC_OscConfig+0x53c>
 8004e34:	e015      	b.n	8004e62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7ff f9ef 	bl	8004218 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7ff f9eb 	bl	8004218 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e113      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e54:	4b7f      	ldr	r3, [pc, #508]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1ed      	bne.n	8004e3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e62:	7ffb      	ldrb	r3, [r7, #31]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e68:	4b7a      	ldr	r3, [pc, #488]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6c:	4a79      	ldr	r2, [pc, #484]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80fe 	beq.w	800507a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	f040 80d0 	bne.w	8005028 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e88:	4b72      	ldr	r3, [pc, #456]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 0203 	and.w	r2, r3, #3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d130      	bne.n	8004efe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d127      	bne.n	8004efe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d11f      	bne.n	8004efe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ec8:	2a07      	cmp	r2, #7
 8004eca:	bf14      	ite	ne
 8004ecc:	2201      	movne	r2, #1
 8004ece:	2200      	moveq	r2, #0
 8004ed0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d113      	bne.n	8004efe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d109      	bne.n	8004efe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d06e      	beq.n	8004fdc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	d069      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f04:	4b53      	ldr	r3, [pc, #332]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f10:	4b50      	ldr	r3, [pc, #320]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0ad      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f20:	4b4c      	ldr	r3, [pc, #304]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a4b      	ldr	r2, [pc, #300]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f2c:	f7ff f974 	bl	8004218 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f34:	f7ff f970 	bl	8004218 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e09a      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f46:	4b43      	ldr	r3, [pc, #268]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f52:	4b40      	ldr	r3, [pc, #256]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	4b40      	ldr	r3, [pc, #256]	@ (8005058 <HAL_RCC_OscConfig+0x784>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f62:	3a01      	subs	r2, #1
 8004f64:	0112      	lsls	r2, r2, #4
 8004f66:	4311      	orrs	r1, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f6c:	0212      	lsls	r2, r2, #8
 8004f6e:	4311      	orrs	r1, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f74:	0852      	lsrs	r2, r2, #1
 8004f76:	3a01      	subs	r2, #1
 8004f78:	0552      	lsls	r2, r2, #21
 8004f7a:	4311      	orrs	r1, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f80:	0852      	lsrs	r2, r2, #1
 8004f82:	3a01      	subs	r2, #1
 8004f84:	0652      	lsls	r2, r2, #25
 8004f86:	4311      	orrs	r1, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f8c:	0912      	lsrs	r2, r2, #4
 8004f8e:	0452      	lsls	r2, r2, #17
 8004f90:	430a      	orrs	r2, r1
 8004f92:	4930      	ldr	r1, [pc, #192]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f98:	4b2e      	ldr	r3, [pc, #184]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004faa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fb0:	f7ff f932 	bl	8004218 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7ff f92e 	bl	8004218 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e058      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fca:	4b22      	ldr	r3, [pc, #136]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fd6:	e050      	b.n	800507a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e04f      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d148      	bne.n	800507a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a19      	ldr	r2, [pc, #100]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004fee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ff2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ff4:	4b17      	ldr	r3, [pc, #92]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a16      	ldr	r2, [pc, #88]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8004ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ffe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005000:	f7ff f90a 	bl	8004218 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005008:	f7ff f906 	bl	8004218 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e030      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501a:	4b0e      	ldr	r3, [pc, #56]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x734>
 8005026:	e028      	b.n	800507a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d023      	beq.n	8005076 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b09      	ldr	r3, [pc, #36]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a08      	ldr	r2, [pc, #32]	@ (8005054 <HAL_RCC_OscConfig+0x780>)
 8005034:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7ff f8ed 	bl	8004218 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005040:	e00c      	b.n	800505c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005042:	f7ff f8e9 	bl	8004218 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d905      	bls.n	800505c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e013      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
 8005054:	40021000 	.word	0x40021000
 8005058:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800505c:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <HAL_RCC_OscConfig+0x7b0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ec      	bne.n	8005042 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005068:	4b06      	ldr	r3, [pc, #24]	@ (8005084 <HAL_RCC_OscConfig+0x7b0>)
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	4905      	ldr	r1, [pc, #20]	@ (8005084 <HAL_RCC_OscConfig+0x7b0>)
 800506e:	4b06      	ldr	r3, [pc, #24]	@ (8005088 <HAL_RCC_OscConfig+0x7b4>)
 8005070:	4013      	ands	r3, r2
 8005072:	60cb      	str	r3, [r1, #12]
 8005074:	e001      	b.n	800507a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40021000 	.word	0x40021000
 8005088:	feeefffc 	.word	0xfeeefffc

0800508c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0e7      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a0:	4b75      	ldr	r3, [pc, #468]	@ (8005278 <HAL_RCC_ClockConfig+0x1ec>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d910      	bls.n	80050d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b72      	ldr	r3, [pc, #456]	@ (8005278 <HAL_RCC_ClockConfig+0x1ec>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f023 0207 	bic.w	r2, r3, #7
 80050b6:	4970      	ldr	r1, [pc, #448]	@ (8005278 <HAL_RCC_ClockConfig+0x1ec>)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b6e      	ldr	r3, [pc, #440]	@ (8005278 <HAL_RCC_ClockConfig+0x1ec>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0cf      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d010      	beq.n	80050fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	4b66      	ldr	r3, [pc, #408]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d908      	bls.n	80050fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ec:	4b63      	ldr	r3, [pc, #396]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4960      	ldr	r1, [pc, #384]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04c      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b03      	cmp	r3, #3
 8005110:	d107      	bne.n	8005122 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005112:	4b5a      	ldr	r3, [pc, #360]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d121      	bne.n	8005162 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e0a6      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d107      	bne.n	800513a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800512a:	4b54      	ldr	r3, [pc, #336]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d115      	bne.n	8005162 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e09a      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005142:	4b4e      	ldr	r3, [pc, #312]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e08e      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005152:	4b4a      	ldr	r3, [pc, #296]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e086      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005162:	4b46      	ldr	r3, [pc, #280]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f023 0203 	bic.w	r2, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4943      	ldr	r1, [pc, #268]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005174:	f7ff f850 	bl	8004218 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517a:	e00a      	b.n	8005192 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7ff f84c 	bl	8004218 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e06e      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	4b3a      	ldr	r3, [pc, #232]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 020c 	and.w	r2, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d1eb      	bne.n	800517c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d010      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	4b31      	ldr	r3, [pc, #196]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051bc:	429a      	cmp	r2, r3
 80051be:	d208      	bcs.n	80051d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c0:	4b2e      	ldr	r3, [pc, #184]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	492b      	ldr	r1, [pc, #172]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051d2:	4b29      	ldr	r3, [pc, #164]	@ (8005278 <HAL_RCC_ClockConfig+0x1ec>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d210      	bcs.n	8005202 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e0:	4b25      	ldr	r3, [pc, #148]	@ (8005278 <HAL_RCC_ClockConfig+0x1ec>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f023 0207 	bic.w	r2, r3, #7
 80051e8:	4923      	ldr	r1, [pc, #140]	@ (8005278 <HAL_RCC_ClockConfig+0x1ec>)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f0:	4b21      	ldr	r3, [pc, #132]	@ (8005278 <HAL_RCC_ClockConfig+0x1ec>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d001      	beq.n	8005202 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e036      	b.n	8005270 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800520e:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	4918      	ldr	r1, [pc, #96]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 800521c:	4313      	orrs	r3, r2
 800521e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800522c:	4b13      	ldr	r3, [pc, #76]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	4910      	ldr	r1, [pc, #64]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 800523c:	4313      	orrs	r3, r2
 800523e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005240:	f000 f824 	bl	800528c <HAL_RCC_GetSysClockFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <HAL_RCC_ClockConfig+0x1f0>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	490b      	ldr	r1, [pc, #44]	@ (8005280 <HAL_RCC_ClockConfig+0x1f4>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
 800525c:	4a09      	ldr	r2, [pc, #36]	@ (8005284 <HAL_RCC_ClockConfig+0x1f8>)
 800525e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005260:	4b09      	ldr	r3, [pc, #36]	@ (8005288 <HAL_RCC_ClockConfig+0x1fc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f7fc fa67 	bl	8001738 <HAL_InitTick>
 800526a:	4603      	mov	r3, r0
 800526c:	72fb      	strb	r3, [r7, #11]

  return status;
 800526e:	7afb      	ldrb	r3, [r7, #11]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40022000 	.word	0x40022000
 800527c:	40021000 	.word	0x40021000
 8005280:	0800a758 	.word	0x0800a758
 8005284:	20000000 	.word	0x20000000
 8005288:	2000000c 	.word	0x2000000c

0800528c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	@ 0x24
 8005290:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800529a:	4b3e      	ldr	r3, [pc, #248]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0x34>
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d121      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d11e      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052c0:	4b34      	ldr	r3, [pc, #208]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d107      	bne.n	80052dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052cc:	4b31      	ldr	r3, [pc, #196]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	e005      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10d      	bne.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052fc:	e00a      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b04      	cmp	r3, #4
 8005302:	d102      	bne.n	800530a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005304:	4b25      	ldr	r3, [pc, #148]	@ (800539c <HAL_RCC_GetSysClockFreq+0x110>)
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e004      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d101      	bne.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005310:	4b23      	ldr	r3, [pc, #140]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005312:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d134      	bne.n	8005384 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800531a:	4b1e      	ldr	r3, [pc, #120]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d003      	beq.n	8005332 <HAL_RCC_GetSysClockFreq+0xa6>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b03      	cmp	r3, #3
 800532e:	d003      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0xac>
 8005330:	e005      	b.n	800533e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005332:	4b1a      	ldr	r3, [pc, #104]	@ (800539c <HAL_RCC_GetSysClockFreq+0x110>)
 8005334:	617b      	str	r3, [r7, #20]
      break;
 8005336:	e005      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005338:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800533a:	617b      	str	r3, [r7, #20]
      break;
 800533c:	e002      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	617b      	str	r3, [r7, #20]
      break;
 8005342:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005344:	4b13      	ldr	r3, [pc, #76]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	3301      	adds	r3, #1
 8005350:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005352:	4b10      	ldr	r3, [pc, #64]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	fb03 f202 	mul.w	r2, r3, r2
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800536a:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	0e5b      	lsrs	r3, r3, #25
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	3301      	adds	r3, #1
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005384:	69bb      	ldr	r3, [r7, #24]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	@ 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000
 8005398:	0800a770 	.word	0x0800a770
 800539c:	00f42400 	.word	0x00f42400
 80053a0:	007a1200 	.word	0x007a1200

080053a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a8:	4b03      	ldr	r3, [pc, #12]	@ (80053b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053aa:	681b      	ldr	r3, [r3, #0]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000000 	.word	0x20000000

080053bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053c0:	f7ff fff0 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 80053c4:	4602      	mov	r2, r0
 80053c6:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	0adb      	lsrs	r3, r3, #11
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	4904      	ldr	r1, [pc, #16]	@ (80053e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053d2:	5ccb      	ldrb	r3, [r1, r3]
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40021000 	.word	0x40021000
 80053e4:	0800a768 	.word	0x0800a768

080053e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	220f      	movs	r2, #15
 80053f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80053f8:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <HAL_RCC_GetClockConfig+0x5c>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0203 	and.w	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005404:	4b0f      	ldr	r3, [pc, #60]	@ (8005444 <HAL_RCC_GetClockConfig+0x5c>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005410:	4b0c      	ldr	r3, [pc, #48]	@ (8005444 <HAL_RCC_GetClockConfig+0x5c>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800541c:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <HAL_RCC_GetClockConfig+0x5c>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	08db      	lsrs	r3, r3, #3
 8005422:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800542a:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <HAL_RCC_GetClockConfig+0x60>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0207 	and.w	r2, r3, #7
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	601a      	str	r2, [r3, #0]
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000
 8005448:	40022000 	.word	0x40022000

0800544c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005458:	4b2a      	ldr	r3, [pc, #168]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005464:	f7ff f9d2 	bl	800480c <HAL_PWREx_GetVoltageRange>
 8005468:	6178      	str	r0, [r7, #20]
 800546a:	e014      	b.n	8005496 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800546c:	4b25      	ldr	r3, [pc, #148]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800546e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005470:	4a24      	ldr	r2, [pc, #144]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005476:	6593      	str	r3, [r2, #88]	@ 0x58
 8005478:	4b22      	ldr	r3, [pc, #136]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800547a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005484:	f7ff f9c2 	bl	800480c <HAL_PWREx_GetVoltageRange>
 8005488:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800548a:	4b1e      	ldr	r3, [pc, #120]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548e:	4a1d      	ldr	r2, [pc, #116]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005494:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800549c:	d10b      	bne.n	80054b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b80      	cmp	r3, #128	@ 0x80
 80054a2:	d919      	bls.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80054a8:	d902      	bls.n	80054b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054aa:	2302      	movs	r3, #2
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	e013      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054b0:	2301      	movs	r3, #1
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	e010      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b80      	cmp	r3, #128	@ 0x80
 80054ba:	d902      	bls.n	80054c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80054bc:	2303      	movs	r3, #3
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	e00a      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b80      	cmp	r3, #128	@ 0x80
 80054c6:	d102      	bne.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054c8:	2302      	movs	r3, #2
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e004      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b70      	cmp	r3, #112	@ 0x70
 80054d2:	d101      	bne.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054d4:	2301      	movs	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f023 0207 	bic.w	r2, r3, #7
 80054e0:	4909      	ldr	r1, [pc, #36]	@ (8005508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054e8:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d001      	beq.n	80054fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000
 8005508:	40022000 	.word	0x40022000

0800550c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e095      	b.n	800564a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005522:	2b00      	cmp	r3, #0
 8005524:	d108      	bne.n	8005538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800552e:	d009      	beq.n	8005544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	61da      	str	r2, [r3, #28]
 8005536:	e005      	b.n	8005544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fb ff5c 	bl	800141c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800557a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005584:	d902      	bls.n	800558c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e002      	b.n	8005592 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800558c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005590:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800559a:	d007      	beq.n	80055ac <HAL_SPI_Init+0xa0>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ee:	ea42 0103 	orr.w	r1, r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	0c1b      	lsrs	r3, r3, #16
 8005608:	f003 0204 	and.w	r2, r3, #4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005628:	ea42 0103 	orr.w	r1, r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b088      	sub	sp, #32
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_SPI_Transmit+0x22>
 8005670:	2302      	movs	r3, #2
 8005672:	e15f      	b.n	8005934 <HAL_SPI_Transmit+0x2e2>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800567c:	f7fe fdcc 	bl	8004218 <HAL_GetTick>
 8005680:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b01      	cmp	r3, #1
 8005690:	d002      	beq.n	8005698 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005692:	2302      	movs	r3, #2
 8005694:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005696:	e148      	b.n	800592a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_SPI_Transmit+0x52>
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056a8:	e13f      	b.n	800592a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2203      	movs	r2, #3
 80056ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f4:	d10f      	bne.n	8005716 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005704:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005714:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005720:	2b40      	cmp	r3, #64	@ 0x40
 8005722:	d007      	beq.n	8005734 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005732:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800573c:	d94f      	bls.n	80057de <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_SPI_Transmit+0xfa>
 8005746:	8afb      	ldrh	r3, [r7, #22]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d142      	bne.n	80057d2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005750:	881a      	ldrh	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575c:	1c9a      	adds	r2, r3, #2
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005770:	e02f      	b.n	80057d2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b02      	cmp	r3, #2
 800577e:	d112      	bne.n	80057a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	881a      	ldrh	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005790:	1c9a      	adds	r2, r3, #2
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057a4:	e015      	b.n	80057d2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a6:	f7fe fd37 	bl	8004218 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d803      	bhi.n	80057be <HAL_SPI_Transmit+0x16c>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d102      	bne.n	80057c4 <HAL_SPI_Transmit+0x172>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80057d0:	e0ab      	b.n	800592a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ca      	bne.n	8005772 <HAL_SPI_Transmit+0x120>
 80057dc:	e080      	b.n	80058e0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_Transmit+0x19a>
 80057e6:	8afb      	ldrh	r3, [r7, #22]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d174      	bne.n	80058d6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d912      	bls.n	800581c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fa:	881a      	ldrh	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005806:	1c9a      	adds	r2, r3, #2
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b02      	subs	r3, #2
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800581a:	e05c      	b.n	80058d6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	330c      	adds	r3, #12
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005842:	e048      	b.n	80058d6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b02      	cmp	r3, #2
 8005850:	d12b      	bne.n	80058aa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d912      	bls.n	8005882 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	881a      	ldrh	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586c:	1c9a      	adds	r2, r3, #2
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b02      	subs	r3, #2
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005880:	e029      	b.n	80058d6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	7812      	ldrb	r2, [r2, #0]
 800588e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058a8:	e015      	b.n	80058d6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058aa:	f7fe fcb5 	bl	8004218 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d803      	bhi.n	80058c2 <HAL_SPI_Transmit+0x270>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_Transmit+0x276>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80058d4:	e029      	b.n	800592a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1b1      	bne.n	8005844 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fcf9 	bl	80062dc <SPI_EndRxTxTransaction>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058fe:	2300      	movs	r3, #0
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e003      	b.n	800592a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005932:	7ffb      	ldrb	r3, [r7, #31]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d002      	beq.n	8005962 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800595c:	2302      	movs	r3, #2
 800595e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005960:	e11a      	b.n	8005b98 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800596a:	d112      	bne.n	8005992 <HAL_SPI_Receive+0x56>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10e      	bne.n	8005992 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2204      	movs	r2, #4
 8005978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800597c:	88fa      	ldrh	r2, [r7, #6]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	4613      	mov	r3, r2
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f90e 	bl	8005baa <HAL_SPI_TransmitReceive>
 800598e:	4603      	mov	r3, r0
 8005990:	e107      	b.n	8005ba2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_SPI_Receive+0x64>
 800599c:	2302      	movs	r3, #2
 800599e:	e100      	b.n	8005ba2 <HAL_SPI_Receive+0x266>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059a8:	f7fe fc36 	bl	8004218 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <HAL_SPI_Receive+0x7e>
 80059b4:	88fb      	ldrh	r3, [r7, #6]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059be:	e0eb      	b.n	8005b98 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2204      	movs	r2, #4
 80059c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	88fa      	ldrh	r2, [r7, #6]
 80059d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a0a:	d908      	bls.n	8005a1e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a1a:	605a      	str	r2, [r3, #4]
 8005a1c:	e007      	b.n	8005a2e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a2c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a36:	d10f      	bne.n	8005a58 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a62:	2b40      	cmp	r3, #64	@ 0x40
 8005a64:	d007      	beq.n	8005a76 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a7e:	d86f      	bhi.n	8005b60 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a80:	e034      	b.n	8005aec <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d117      	bne.n	8005ac0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f103 020c 	add.w	r2, r3, #12
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005abe:	e015      	b.n	8005aec <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ac0:	f7fe fbaa 	bl	8004218 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d803      	bhi.n	8005ad8 <HAL_SPI_Receive+0x19c>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d102      	bne.n	8005ade <HAL_SPI_Receive+0x1a2>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005aea:	e055      	b.n	8005b98 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1c4      	bne.n	8005a82 <HAL_SPI_Receive+0x146>
 8005af8:	e038      	b.n	8005b6c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d115      	bne.n	8005b34 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	b292      	uxth	r2, r2
 8005b14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005b32:	e015      	b.n	8005b60 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b34:	f7fe fb70 	bl	8004218 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d803      	bhi.n	8005b4c <HAL_SPI_Receive+0x210>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d102      	bne.n	8005b52 <HAL_SPI_Receive+0x216>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005b5e:	e01b      	b.n	8005b98 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1c6      	bne.n	8005afa <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 fb5b 	bl	800622c <SPI_EndRxTransaction>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
 8005b8e:	e003      	b.n	8005b98 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b08a      	sub	sp, #40	@ 0x28
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_SPI_TransmitReceive+0x26>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e20a      	b.n	8005fe6 <HAL_SPI_TransmitReceive+0x43c>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bd8:	f7fe fb1e 	bl	8004218 <HAL_GetTick>
 8005bdc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005be4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005bec:	887b      	ldrh	r3, [r7, #2]
 8005bee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005bf0:	887b      	ldrh	r3, [r7, #2]
 8005bf2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bf4:	7efb      	ldrb	r3, [r7, #27]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d00e      	beq.n	8005c18 <HAL_SPI_TransmitReceive+0x6e>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c00:	d106      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d102      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x66>
 8005c0a:	7efb      	ldrb	r3, [r7, #27]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d003      	beq.n	8005c18 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
 8005c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005c16:	e1e0      	b.n	8005fda <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <HAL_SPI_TransmitReceive+0x80>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_SPI_TransmitReceive+0x80>
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005c30:	e1d3      	b.n	8005fda <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d003      	beq.n	8005c46 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2205      	movs	r2, #5
 8005c42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	887a      	ldrh	r2, [r7, #2]
 8005c56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	887a      	ldrh	r2, [r7, #2]
 8005c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	887a      	ldrh	r2, [r7, #2]
 8005c72:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c88:	d802      	bhi.n	8005c90 <HAL_SPI_TransmitReceive+0xe6>
 8005c8a:	8a3b      	ldrh	r3, [r7, #16]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d908      	bls.n	8005ca2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c9e:	605a      	str	r2, [r3, #4]
 8005ca0:	e007      	b.n	8005cb2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cb0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b40      	cmp	r3, #64	@ 0x40
 8005cbe:	d007      	beq.n	8005cd0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cd8:	f240 8081 	bls.w	8005dde <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_SPI_TransmitReceive+0x140>
 8005ce4:	8a7b      	ldrh	r3, [r7, #18]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d16d      	bne.n	8005dc6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	881a      	ldrh	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	1c9a      	adds	r2, r3, #2
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d0e:	e05a      	b.n	8005dc6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d11b      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x1ac>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d016      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x1ac>
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d113      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	881a      	ldrh	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	1c9a      	adds	r2, r3, #2
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d11c      	bne.n	8005d9e <HAL_SPI_TransmitReceive+0x1f4>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d016      	beq.n	8005d9e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	b292      	uxth	r2, r2
 8005d7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	1c9a      	adds	r2, r3, #2
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d9e:	f7fe fa3b 	bl	8004218 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d80b      	bhi.n	8005dc6 <HAL_SPI_TransmitReceive+0x21c>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d007      	beq.n	8005dc6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005dc4:	e109      	b.n	8005fda <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d19f      	bne.n	8005d10 <HAL_SPI_TransmitReceive+0x166>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d199      	bne.n	8005d10 <HAL_SPI_TransmitReceive+0x166>
 8005ddc:	e0e3      	b.n	8005fa6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x244>
 8005de6:	8a7b      	ldrh	r3, [r7, #18]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	f040 80cf 	bne.w	8005f8c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d912      	bls.n	8005e1e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfc:	881a      	ldrh	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e08:	1c9a      	adds	r2, r3, #2
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b02      	subs	r3, #2
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e1c:	e0b6      	b.n	8005f8c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	7812      	ldrb	r2, [r2, #0]
 8005e2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e44:	e0a2      	b.n	8005f8c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d134      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x314>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d02f      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x314>
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d12c      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d912      	bls.n	8005e94 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e72:	881a      	ldrh	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	1c9a      	adds	r2, r3, #2
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b02      	subs	r3, #2
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e92:	e012      	b.n	8005eba <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d148      	bne.n	8005f5e <HAL_SPI_TransmitReceive+0x3b4>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d042      	beq.n	8005f5e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d923      	bls.n	8005f2c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	b292      	uxth	r2, r2
 8005ef0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b02      	subs	r3, #2
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d81f      	bhi.n	8005f5a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	e016      	b.n	8005f5a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f103 020c 	add.w	r2, r3, #12
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f38:	7812      	ldrb	r2, [r2, #0]
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f5e:	f7fe f95b 	bl	8004218 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d803      	bhi.n	8005f76 <HAL_SPI_TransmitReceive+0x3cc>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f74:	d102      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x3d2>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005f8a:	e026      	b.n	8005fda <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f47f af57 	bne.w	8005e46 <HAL_SPI_TransmitReceive+0x29c>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f47f af50 	bne.w	8005e46 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f996 	bl	80062dc <SPI_EndRxTxTransaction>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd0:	e003      	b.n	8005fda <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3728      	adds	r7, #40	@ 0x28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006000:	f7fe f90a 	bl	8004218 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	4413      	add	r3, r2
 800600e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006010:	f7fe f902 	bl	8004218 <HAL_GetTick>
 8006014:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006016:	4b39      	ldr	r3, [pc, #228]	@ (80060fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	015b      	lsls	r3, r3, #5
 800601c:	0d1b      	lsrs	r3, r3, #20
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006026:	e054      	b.n	80060d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d050      	beq.n	80060d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006030:	f7fe f8f2 	bl	8004218 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	429a      	cmp	r2, r3
 800603e:	d902      	bls.n	8006046 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d13d      	bne.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800605e:	d111      	bne.n	8006084 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006068:	d004      	beq.n	8006074 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006072:	d107      	bne.n	8006084 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800608c:	d10f      	bne.n	80060ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e017      	b.n	80060f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	bf0c      	ite	eq
 80060e2:	2301      	moveq	r3, #1
 80060e4:	2300      	movne	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d19b      	bne.n	8006028 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000000 	.word	0x20000000

08006100 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	@ 0x28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006112:	f7fe f881 	bl	8004218 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	4413      	add	r3, r2
 8006120:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006122:	f7fe f879 	bl	8004218 <HAL_GetTick>
 8006126:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006130:	4b3d      	ldr	r3, [pc, #244]	@ (8006228 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	00da      	lsls	r2, r3, #3
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	0d1b      	lsrs	r3, r3, #20
 8006140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006148:	e060      	b.n	800620c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006150:	d107      	bne.n	8006162 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006160:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d050      	beq.n	800620c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800616a:	f7fe f855 	bl	8004218 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006176:	429a      	cmp	r2, r3
 8006178:	d902      	bls.n	8006180 <SPI_WaitFifoStateUntilTimeout+0x80>
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	d13d      	bne.n	80061fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800618e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006198:	d111      	bne.n	80061be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a2:	d004      	beq.n	80061ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ac:	d107      	bne.n	80061be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c6:	d10f      	bne.n	80061e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e010      	b.n	800621e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3b01      	subs	r3, #1
 800620a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689a      	ldr	r2, [r3, #8]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	429a      	cmp	r2, r3
 800621a:	d196      	bne.n	800614a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3728      	adds	r7, #40	@ 0x28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000000 	.word	0x20000000

0800622c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006240:	d111      	bne.n	8006266 <SPI_EndRxTransaction+0x3a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800624a:	d004      	beq.n	8006256 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006254:	d107      	bne.n	8006266 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006264:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2200      	movs	r2, #0
 800626e:	2180      	movs	r1, #128	@ 0x80
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff febd 	bl	8005ff0 <SPI_WaitFlagStateUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006280:	f043 0220 	orr.w	r2, r3, #32
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e023      	b.n	80062d4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006294:	d11d      	bne.n	80062d2 <SPI_EndRxTransaction+0xa6>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800629e:	d004      	beq.n	80062aa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a8:	d113      	bne.n	80062d2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff ff22 	bl	8006100 <SPI_WaitFifoStateUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e000      	b.n	80062d4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff ff03 	bl	8006100 <SPI_WaitFifoStateUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006304:	f043 0220 	orr.w	r2, r3, #32
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e027      	b.n	8006360 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2200      	movs	r2, #0
 8006318:	2180      	movs	r1, #128	@ 0x80
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff fe68 	bl	8005ff0 <SPI_WaitFlagStateUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e014      	b.n	8006360 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2200      	movs	r2, #0
 800633e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff fedc 	bl	8006100 <SPI_WaitFifoStateUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006352:	f043 0220 	orr.w	r2, r3, #32
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e000      	b.n	8006360 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e049      	b.n	800640e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f841 	bl	8006416 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f000 f9da 	bl	8006760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d001      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e04f      	b.n	80064e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a23      	ldr	r2, [pc, #140]	@ (80064f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01d      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646e:	d018      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1f      	ldr	r2, [pc, #124]	@ (80064f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1e      	ldr	r2, [pc, #120]	@ (80064f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1c      	ldr	r2, [pc, #112]	@ (80064fc <HAL_TIM_Base_Start_IT+0xd0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1b      	ldr	r2, [pc, #108]	@ (8006500 <HAL_TIM_Base_Start_IT+0xd4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a19      	ldr	r2, [pc, #100]	@ (8006504 <HAL_TIM_Base_Start_IT+0xd8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d115      	bne.n	80064ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	4b17      	ldr	r3, [pc, #92]	@ (8006508 <HAL_TIM_Base_Start_IT+0xdc>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b06      	cmp	r3, #6
 80064b2:	d015      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ba:	d011      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064cc:	e008      	b.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e000      	b.n	80064e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40013400 	.word	0x40013400
 8006504:	40014000 	.word	0x40014000
 8006508:	00010007 	.word	0x00010007

0800650c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d020      	beq.n	8006570 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01b      	beq.n	8006570 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0202 	mvn.w	r2, #2
 8006540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f8e4 	bl	8006724 <HAL_TIM_IC_CaptureCallback>
 800655c:	e005      	b.n	800656a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f8d6 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8e7 	bl	8006738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d020      	beq.n	80065bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01b      	beq.n	80065bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0204 	mvn.w	r2, #4
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8be 	bl	8006724 <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f8b0 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f8c1 	bl	8006738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d020      	beq.n	8006608 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01b      	beq.n	8006608 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0208 	mvn.w	r2, #8
 80065d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2204      	movs	r2, #4
 80065de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f898 	bl	8006724 <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f88a 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f89b 	bl	8006738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b00      	cmp	r3, #0
 8006610:	d020      	beq.n	8006654 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01b      	beq.n	8006654 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0210 	mvn.w	r2, #16
 8006624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2208      	movs	r2, #8
 800662a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f872 	bl	8006724 <HAL_TIM_IC_CaptureCallback>
 8006640:	e005      	b.n	800664e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f864 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f875 	bl	8006738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0201 	mvn.w	r2, #1
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fa fe7c 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00c      	beq.n	800669c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006688:	2b00      	cmp	r3, #0
 800668a:	d007      	beq.n	800669c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f906 	bl	80068a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00c      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f8fe 	bl	80068bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00c      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f834 	bl	800674c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0220 	mvn.w	r2, #32
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f8c6 	bl	8006894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a40      	ldr	r2, [pc, #256]	@ (8006874 <TIM_Base_SetConfig+0x114>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d013      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800677e:	d00f      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a3d      	ldr	r2, [pc, #244]	@ (8006878 <TIM_Base_SetConfig+0x118>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00b      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a3c      	ldr	r2, [pc, #240]	@ (800687c <TIM_Base_SetConfig+0x11c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d007      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a3b      	ldr	r2, [pc, #236]	@ (8006880 <TIM_Base_SetConfig+0x120>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a3a      	ldr	r2, [pc, #232]	@ (8006884 <TIM_Base_SetConfig+0x124>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d108      	bne.n	80067b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006874 <TIM_Base_SetConfig+0x114>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d01f      	beq.n	80067fa <TIM_Base_SetConfig+0x9a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c0:	d01b      	beq.n	80067fa <TIM_Base_SetConfig+0x9a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006878 <TIM_Base_SetConfig+0x118>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d017      	beq.n	80067fa <TIM_Base_SetConfig+0x9a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a2b      	ldr	r2, [pc, #172]	@ (800687c <TIM_Base_SetConfig+0x11c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d013      	beq.n	80067fa <TIM_Base_SetConfig+0x9a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006880 <TIM_Base_SetConfig+0x120>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00f      	beq.n	80067fa <TIM_Base_SetConfig+0x9a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a29      	ldr	r2, [pc, #164]	@ (8006884 <TIM_Base_SetConfig+0x124>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00b      	beq.n	80067fa <TIM_Base_SetConfig+0x9a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a28      	ldr	r2, [pc, #160]	@ (8006888 <TIM_Base_SetConfig+0x128>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <TIM_Base_SetConfig+0x9a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a27      	ldr	r2, [pc, #156]	@ (800688c <TIM_Base_SetConfig+0x12c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d003      	beq.n	80067fa <TIM_Base_SetConfig+0x9a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a26      	ldr	r2, [pc, #152]	@ (8006890 <TIM_Base_SetConfig+0x130>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d108      	bne.n	800680c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a10      	ldr	r2, [pc, #64]	@ (8006874 <TIM_Base_SetConfig+0x114>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00f      	beq.n	8006858 <TIM_Base_SetConfig+0xf8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a12      	ldr	r2, [pc, #72]	@ (8006884 <TIM_Base_SetConfig+0x124>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00b      	beq.n	8006858 <TIM_Base_SetConfig+0xf8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a11      	ldr	r2, [pc, #68]	@ (8006888 <TIM_Base_SetConfig+0x128>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d007      	beq.n	8006858 <TIM_Base_SetConfig+0xf8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a10      	ldr	r2, [pc, #64]	@ (800688c <TIM_Base_SetConfig+0x12c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_Base_SetConfig+0xf8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a0f      	ldr	r2, [pc, #60]	@ (8006890 <TIM_Base_SetConfig+0x130>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d103      	bne.n	8006860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	615a      	str	r2, [r3, #20]
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40013400 	.word	0x40013400
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800

08006894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80068d4:	4b05      	ldr	r3, [pc, #20]	@ (80068ec <SysTick_Handler+0x1c>)
 80068d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80068d8:	f002 fc3e 	bl	8009158 <xTaskGetSchedulerState>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d001      	beq.n	80068e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80068e2:	f000 fc99 	bl	8007218 <xPortSysTickHandler>
  }
}
 80068e6:	bf00      	nop
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	e000e010 	.word	0xe000e010

080068f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a07      	ldr	r2, [pc, #28]	@ (800691c <vApplicationGetIdleTaskMemory+0x2c>)
 8006900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4a06      	ldr	r2, [pc, #24]	@ (8006920 <vApplicationGetIdleTaskMemory+0x30>)
 8006906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2280      	movs	r2, #128	@ 0x80
 800690c:	601a      	str	r2, [r3, #0]
}
 800690e:	bf00      	nop
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000274 	.word	0x20000274
 8006920:	20000320 	.word	0x20000320

08006924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a07      	ldr	r2, [pc, #28]	@ (8006950 <vApplicationGetTimerTaskMemory+0x2c>)
 8006934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4a06      	ldr	r2, [pc, #24]	@ (8006954 <vApplicationGetTimerTaskMemory+0x30>)
 800693a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	20000520 	.word	0x20000520
 8006954:	200005cc 	.word	0x200005cc

08006958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	@ 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006964:	f001 ff32 	bl	80087cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006968:	4b5c      	ldr	r3, [pc, #368]	@ (8006adc <pvPortMalloc+0x184>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006970:	f000 f924 	bl	8006bbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006974:	4b5a      	ldr	r3, [pc, #360]	@ (8006ae0 <pvPortMalloc+0x188>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8095 	bne.w	8006aac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01e      	beq.n	80069c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006988:	2208      	movs	r2, #8
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4413      	add	r3, r2
 800698e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b00      	cmp	r3, #0
 8006998:	d015      	beq.n	80069c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f023 0307 	bic.w	r3, r3, #7
 80069a0:	3308      	adds	r3, #8
 80069a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d06f      	beq.n	8006aac <pvPortMalloc+0x154>
 80069cc:	4b45      	ldr	r3, [pc, #276]	@ (8006ae4 <pvPortMalloc+0x18c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d86a      	bhi.n	8006aac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069d6:	4b44      	ldr	r3, [pc, #272]	@ (8006ae8 <pvPortMalloc+0x190>)
 80069d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069da:	4b43      	ldr	r3, [pc, #268]	@ (8006ae8 <pvPortMalloc+0x190>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069e0:	e004      	b.n	80069ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d903      	bls.n	80069fe <pvPortMalloc+0xa6>
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f1      	bne.n	80069e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069fe:	4b37      	ldr	r3, [pc, #220]	@ (8006adc <pvPortMalloc+0x184>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d051      	beq.n	8006aac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	4413      	add	r3, r2
 8006a10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	1ad2      	subs	r2, r2, r3
 8006a22:	2308      	movs	r3, #8
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d920      	bls.n	8006a6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4413      	add	r3, r2
 8006a30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00b      	beq.n	8006a54 <pvPortMalloc+0xfc>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	613b      	str	r3, [r7, #16]
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a66:	69b8      	ldr	r0, [r7, #24]
 8006a68:	f000 f90a 	bl	8006c80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae4 <pvPortMalloc+0x18c>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae4 <pvPortMalloc+0x18c>)
 8006a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae4 <pvPortMalloc+0x18c>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8006aec <pvPortMalloc+0x194>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d203      	bcs.n	8006a8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a86:	4b17      	ldr	r3, [pc, #92]	@ (8006ae4 <pvPortMalloc+0x18c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a18      	ldr	r2, [pc, #96]	@ (8006aec <pvPortMalloc+0x194>)
 8006a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	4b13      	ldr	r3, [pc, #76]	@ (8006ae0 <pvPortMalloc+0x188>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	431a      	orrs	r2, r3
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006aa2:	4b13      	ldr	r3, [pc, #76]	@ (8006af0 <pvPortMalloc+0x198>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	4a11      	ldr	r2, [pc, #68]	@ (8006af0 <pvPortMalloc+0x198>)
 8006aaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006aac:	f001 fed4 	bl	8008858 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00b      	beq.n	8006ad2 <pvPortMalloc+0x17a>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	60fb      	str	r3, [r7, #12]
}
 8006acc:	bf00      	nop
 8006ace:	bf00      	nop
 8006ad0:	e7fd      	b.n	8006ace <pvPortMalloc+0x176>
	return pvReturn;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3728      	adds	r7, #40	@ 0x28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	2000158c 	.word	0x2000158c
 8006ae0:	200015a0 	.word	0x200015a0
 8006ae4:	20001590 	.word	0x20001590
 8006ae8:	20001584 	.word	0x20001584
 8006aec:	20001594 	.word	0x20001594
 8006af0:	20001598 	.word	0x20001598

08006af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d04f      	beq.n	8006ba6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b06:	2308      	movs	r3, #8
 8006b08:	425b      	negs	r3, r3
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	4b25      	ldr	r3, [pc, #148]	@ (8006bb0 <vPortFree+0xbc>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <vPortFree+0x46>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60fb      	str	r3, [r7, #12]
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	e7fd      	b.n	8006b36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <vPortFree+0x66>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	60bb      	str	r3, [r7, #8]
}
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop
 8006b58:	e7fd      	b.n	8006b56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	4b14      	ldr	r3, [pc, #80]	@ (8006bb0 <vPortFree+0xbc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4013      	ands	r3, r2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01e      	beq.n	8006ba6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d11a      	bne.n	8006ba6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <vPortFree+0xbc>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b80:	f001 fe24 	bl	80087cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb4 <vPortFree+0xc0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	4a09      	ldr	r2, [pc, #36]	@ (8006bb4 <vPortFree+0xc0>)
 8006b90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b92:	6938      	ldr	r0, [r7, #16]
 8006b94:	f000 f874 	bl	8006c80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b98:	4b07      	ldr	r3, [pc, #28]	@ (8006bb8 <vPortFree+0xc4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	4a06      	ldr	r2, [pc, #24]	@ (8006bb8 <vPortFree+0xc4>)
 8006ba0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ba2:	f001 fe59 	bl	8008858 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ba6:	bf00      	nop
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	200015a0 	.word	0x200015a0
 8006bb4:	20001590 	.word	0x20001590
 8006bb8:	2000159c 	.word	0x2000159c

08006bbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bc2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006bc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bc8:	4b27      	ldr	r3, [pc, #156]	@ (8006c68 <prvHeapInit+0xac>)
 8006bca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00c      	beq.n	8006bf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3307      	adds	r3, #7
 8006bda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0307 	bic.w	r3, r3, #7
 8006be2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	4a1f      	ldr	r2, [pc, #124]	@ (8006c68 <prvHeapInit+0xac>)
 8006bec:	4413      	add	r3, r2
 8006bee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c6c <prvHeapInit+0xb0>)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8006c6c <prvHeapInit+0xb0>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	4413      	add	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c08:	2208      	movs	r2, #8
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0307 	bic.w	r3, r3, #7
 8006c16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4a15      	ldr	r2, [pc, #84]	@ (8006c70 <prvHeapInit+0xb4>)
 8006c1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c1e:	4b14      	ldr	r3, [pc, #80]	@ (8006c70 <prvHeapInit+0xb4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2200      	movs	r2, #0
 8006c24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c26:	4b12      	ldr	r3, [pc, #72]	@ (8006c70 <prvHeapInit+0xb4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c70 <prvHeapInit+0xb4>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	4a0a      	ldr	r2, [pc, #40]	@ (8006c74 <prvHeapInit+0xb8>)
 8006c4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	4a09      	ldr	r2, [pc, #36]	@ (8006c78 <prvHeapInit+0xbc>)
 8006c52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c54:	4b09      	ldr	r3, [pc, #36]	@ (8006c7c <prvHeapInit+0xc0>)
 8006c56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c5a:	601a      	str	r2, [r3, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	200009cc 	.word	0x200009cc
 8006c6c:	20001584 	.word	0x20001584
 8006c70:	2000158c 	.word	0x2000158c
 8006c74:	20001594 	.word	0x20001594
 8006c78:	20001590 	.word	0x20001590
 8006c7c:	200015a0 	.word	0x200015a0

08006c80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c88:	4b28      	ldr	r3, [pc, #160]	@ (8006d2c <prvInsertBlockIntoFreeList+0xac>)
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	e002      	b.n	8006c94 <prvInsertBlockIntoFreeList+0x14>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d8f7      	bhi.n	8006c8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4413      	add	r3, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d108      	bne.n	8006cc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	441a      	add	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	441a      	add	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d118      	bne.n	8006d08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4b15      	ldr	r3, [pc, #84]	@ (8006d30 <prvInsertBlockIntoFreeList+0xb0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d00d      	beq.n	8006cfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	441a      	add	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	e008      	b.n	8006d10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <prvInsertBlockIntoFreeList+0xb0>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e003      	b.n	8006d10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d002      	beq.n	8006d1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20001584 	.word	0x20001584
 8006d30:	2000158c 	.word	0x2000158c

08006d34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f103 0208 	add.w	r2, r3, #8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f103 0208 	add.w	r2, r3, #8
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f103 0208 	add.w	r2, r3, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d103      	bne.n	8006df6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e00c      	b.n	8006e10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e002      	b.n	8006e04 <vListInsert+0x2e>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d2f6      	bcs.n	8006dfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	601a      	str	r2, [r3, #0]
}
 8006e3c:	bf00      	nop
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6892      	ldr	r2, [r2, #8]
 8006e5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6852      	ldr	r2, [r2, #4]
 8006e68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d103      	bne.n	8006e7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	1e5a      	subs	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	3b04      	subs	r3, #4
 8006eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3b04      	subs	r3, #4
 8006eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f023 0201 	bic.w	r2, r3, #1
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3b04      	subs	r3, #4
 8006eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8006f00 <pxPortInitialiseStack+0x64>)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3b14      	subs	r3, #20
 8006ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3b04      	subs	r3, #4
 8006ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f06f 0202 	mvn.w	r2, #2
 8006eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3b20      	subs	r3, #32
 8006ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	08006f05 	.word	0x08006f05

08006f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f0e:	4b13      	ldr	r3, [pc, #76]	@ (8006f5c <prvTaskExitError+0x58>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d00b      	beq.n	8006f30 <prvTaskExitError+0x2c>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	60fb      	str	r3, [r7, #12]
}
 8006f2a:	bf00      	nop
 8006f2c:	bf00      	nop
 8006f2e:	e7fd      	b.n	8006f2c <prvTaskExitError+0x28>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60bb      	str	r3, [r7, #8]
}
 8006f42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f44:	bf00      	nop
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0fc      	beq.n	8006f46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000014 	.word	0x20000014

08006f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <pxCurrentTCBConst2>)
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	f380 8809 	msr	PSP, r0
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8811 	msr	BASEPRI, r0
 8006f7a:	4770      	bx	lr
 8006f7c:	f3af 8000 	nop.w

08006f80 <pxCurrentTCBConst2>:
 8006f80:	200015f8 	.word	0x200015f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop

08006f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f88:	4808      	ldr	r0, [pc, #32]	@ (8006fac <prvPortStartFirstTask+0x24>)
 8006f8a:	6800      	ldr	r0, [r0, #0]
 8006f8c:	6800      	ldr	r0, [r0, #0]
 8006f8e:	f380 8808 	msr	MSP, r0
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8814 	msr	CONTROL, r0
 8006f9a:	b662      	cpsie	i
 8006f9c:	b661      	cpsie	f
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	df00      	svc	0
 8006fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006faa:	bf00      	nop
 8006fac:	e000ed08 	.word	0xe000ed08

08006fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fb6:	4b47      	ldr	r3, [pc, #284]	@ (80070d4 <xPortStartScheduler+0x124>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a47      	ldr	r2, [pc, #284]	@ (80070d8 <xPortStartScheduler+0x128>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d10b      	bne.n	8006fd8 <xPortStartScheduler+0x28>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	613b      	str	r3, [r7, #16]
}
 8006fd2:	bf00      	nop
 8006fd4:	bf00      	nop
 8006fd6:	e7fd      	b.n	8006fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80070d4 <xPortStartScheduler+0x124>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80070dc <xPortStartScheduler+0x12c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d10b      	bne.n	8006ffa <xPortStartScheduler+0x4a>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60fb      	str	r3, [r7, #12]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ffa:	4b39      	ldr	r3, [pc, #228]	@ (80070e0 <xPortStartScheduler+0x130>)
 8006ffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	22ff      	movs	r2, #255	@ 0xff
 800700a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800701c:	b2da      	uxtb	r2, r3
 800701e:	4b31      	ldr	r3, [pc, #196]	@ (80070e4 <xPortStartScheduler+0x134>)
 8007020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007022:	4b31      	ldr	r3, [pc, #196]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007024:	2207      	movs	r2, #7
 8007026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007028:	e009      	b.n	800703e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800702a:	4b2f      	ldr	r3, [pc, #188]	@ (80070e8 <xPortStartScheduler+0x138>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3b01      	subs	r3, #1
 8007030:	4a2d      	ldr	r2, [pc, #180]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	b2db      	uxtb	r3, r3
 800703c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007046:	2b80      	cmp	r3, #128	@ 0x80
 8007048:	d0ef      	beq.n	800702a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800704a:	4b27      	ldr	r3, [pc, #156]	@ (80070e8 <xPortStartScheduler+0x138>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f1c3 0307 	rsb	r3, r3, #7
 8007052:	2b04      	cmp	r3, #4
 8007054:	d00b      	beq.n	800706e <xPortStartScheduler+0xbe>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60bb      	str	r3, [r7, #8]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800706e:	4b1e      	ldr	r3, [pc, #120]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	4a1c      	ldr	r2, [pc, #112]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007078:	4b1b      	ldr	r3, [pc, #108]	@ (80070e8 <xPortStartScheduler+0x138>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007080:	4a19      	ldr	r2, [pc, #100]	@ (80070e8 <xPortStartScheduler+0x138>)
 8007082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800708c:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <xPortStartScheduler+0x13c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a16      	ldr	r2, [pc, #88]	@ (80070ec <xPortStartScheduler+0x13c>)
 8007092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007098:	4b14      	ldr	r3, [pc, #80]	@ (80070ec <xPortStartScheduler+0x13c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a13      	ldr	r2, [pc, #76]	@ (80070ec <xPortStartScheduler+0x13c>)
 800709e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070a4:	f000 f99e 	bl	80073e4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070a8:	4b11      	ldr	r3, [pc, #68]	@ (80070f0 <xPortStartScheduler+0x140>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070ae:	f000 f9d5 	bl	800745c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070b2:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <xPortStartScheduler+0x144>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a0f      	ldr	r2, [pc, #60]	@ (80070f4 <xPortStartScheduler+0x144>)
 80070b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070be:	f7ff ff63 	bl	8006f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070c2:	f001 fd59 	bl	8008b78 <vTaskSwitchContext>
	prvTaskExitError();
 80070c6:	f7ff ff1d 	bl	8006f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	e000ed00 	.word	0xe000ed00
 80070d8:	410fc271 	.word	0x410fc271
 80070dc:	410fc270 	.word	0x410fc270
 80070e0:	e000e400 	.word	0xe000e400
 80070e4:	200015b0 	.word	0x200015b0
 80070e8:	200015b4 	.word	0x200015b4
 80070ec:	e000ed20 	.word	0xe000ed20
 80070f0:	20000014 	.word	0x20000014
 80070f4:	e000ef34 	.word	0xe000ef34

080070f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	607b      	str	r3, [r7, #4]
}
 8007110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007112:	4b10      	ldr	r3, [pc, #64]	@ (8007154 <vPortEnterCritical+0x5c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	4a0e      	ldr	r2, [pc, #56]	@ (8007154 <vPortEnterCritical+0x5c>)
 800711a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800711c:	4b0d      	ldr	r3, [pc, #52]	@ (8007154 <vPortEnterCritical+0x5c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d110      	bne.n	8007146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007124:	4b0c      	ldr	r3, [pc, #48]	@ (8007158 <vPortEnterCritical+0x60>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <vPortEnterCritical+0x4e>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	603b      	str	r3, [r7, #0]
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	e7fd      	b.n	8007142 <vPortEnterCritical+0x4a>
	}
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20000014 	.word	0x20000014
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007162:	4b12      	ldr	r3, [pc, #72]	@ (80071ac <vPortExitCritical+0x50>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10b      	bne.n	8007182 <vPortExitCritical+0x26>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	607b      	str	r3, [r7, #4]
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	e7fd      	b.n	800717e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007182:	4b0a      	ldr	r3, [pc, #40]	@ (80071ac <vPortExitCritical+0x50>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3b01      	subs	r3, #1
 8007188:	4a08      	ldr	r2, [pc, #32]	@ (80071ac <vPortExitCritical+0x50>)
 800718a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800718c:	4b07      	ldr	r3, [pc, #28]	@ (80071ac <vPortExitCritical+0x50>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d105      	bne.n	80071a0 <vPortExitCritical+0x44>
 8007194:	2300      	movs	r3, #0
 8007196:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800719e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	20000014 	.word	0x20000014

080071b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071b0:	f3ef 8009 	mrs	r0, PSP
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	4b15      	ldr	r3, [pc, #84]	@ (8007210 <pxCurrentTCBConst>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	f01e 0f10 	tst.w	lr, #16
 80071c0:	bf08      	it	eq
 80071c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	6010      	str	r0, [r2, #0]
 80071cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071d4:	f380 8811 	msr	BASEPRI, r0
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f001 fcca 	bl	8008b78 <vTaskSwitchContext>
 80071e4:	f04f 0000 	mov.w	r0, #0
 80071e8:	f380 8811 	msr	BASEPRI, r0
 80071ec:	bc09      	pop	{r0, r3}
 80071ee:	6819      	ldr	r1, [r3, #0]
 80071f0:	6808      	ldr	r0, [r1, #0]
 80071f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f6:	f01e 0f10 	tst.w	lr, #16
 80071fa:	bf08      	it	eq
 80071fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007200:	f380 8809 	msr	PSP, r0
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	f3af 8000 	nop.w

08007210 <pxCurrentTCBConst>:
 8007210:	200015f8 	.word	0x200015f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop

08007218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	607b      	str	r3, [r7, #4]
}
 8007230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007232:	f001 fbe7 	bl	8008a04 <xTaskIncrementTick>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800723c:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <xPortSysTickHandler+0x40>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	2300      	movs	r3, #0
 8007246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f383 8811 	msr	BASEPRI, r3
}
 800724e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8007264:	4b59      	ldr	r3, [pc, #356]	@ (80073cc <vPortSuppressTicksAndSleep+0x170>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	429a      	cmp	r2, r3
 800726c:	d902      	bls.n	8007274 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800726e:	4b57      	ldr	r3, [pc, #348]	@ (80073cc <vPortSuppressTicksAndSleep+0x170>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8007274:	4b56      	ldr	r3, [pc, #344]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a55      	ldr	r2, [pc, #340]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8007280:	4b54      	ldr	r3, [pc, #336]	@ (80073d4 <vPortSuppressTicksAndSleep+0x178>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3b01      	subs	r3, #1
 8007288:	4953      	ldr	r1, [pc, #332]	@ (80073d8 <vPortSuppressTicksAndSleep+0x17c>)
 800728a:	6809      	ldr	r1, [r1, #0]
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	4413      	add	r3, r2
 8007292:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8007294:	4b51      	ldr	r3, [pc, #324]	@ (80073dc <vPortSuppressTicksAndSleep+0x180>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	429a      	cmp	r2, r3
 800729c:	d904      	bls.n	80072a8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800729e:	4b4f      	ldr	r3, [pc, #316]	@ (80073dc <vPortSuppressTicksAndSleep+0x180>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 80072a8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 80072aa:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 80072ae:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80072b2:	f001 fe5f 	bl	8008f74 <eTaskConfirmSleepModeStatus>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d110      	bne.n	80072de <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80072bc:	4b45      	ldr	r3, [pc, #276]	@ (80073d4 <vPortSuppressTicksAndSleep+0x178>)
 80072be:	4a48      	ldr	r2, [pc, #288]	@ (80073e0 <vPortSuppressTicksAndSleep+0x184>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80072c4:	4b42      	ldr	r3, [pc, #264]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a41      	ldr	r2, [pc, #260]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80072d0:	4b41      	ldr	r3, [pc, #260]	@ (80073d8 <vPortSuppressTicksAndSleep+0x17c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a42      	ldr	r2, [pc, #264]	@ (80073e0 <vPortSuppressTicksAndSleep+0x184>)
 80072d6:	3b01      	subs	r3, #1
 80072d8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 80072da:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 80072dc:	e071      	b.n	80073c2 <vPortSuppressTicksAndSleep+0x166>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 80072de:	4a40      	ldr	r2, [pc, #256]	@ (80073e0 <vPortSuppressTicksAndSleep+0x184>)
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072e4:	4b3b      	ldr	r3, [pc, #236]	@ (80073d4 <vPortSuppressTicksAndSleep+0x178>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80072ea:	4b39      	ldr	r3, [pc, #228]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a38      	ldr	r2, [pc, #224]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	613b      	str	r3, [r7, #16]
			if( xModifiableIdleTime > 0 )
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <vPortSuppressTicksAndSleep+0xae>
				__asm volatile( "dsb" ::: "memory" );
 8007300:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8007304:	bf30      	wfi
				__asm volatile( "isb" );
 8007306:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsie i" ::: "memory" );
 800730a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800730c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007310:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8007314:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8007316:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800731a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800731e:	4b2c      	ldr	r3, [pc, #176]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 8007320:	2206      	movs	r2, #6
 8007322:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8007324:	4b2a      	ldr	r3, [pc, #168]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01d      	beq.n	800736c <vPortSuppressTicksAndSleep+0x110>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8007330:	4b29      	ldr	r3, [pc, #164]	@ (80073d8 <vPortSuppressTicksAndSleep+0x17c>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	4b27      	ldr	r3, [pc, #156]	@ (80073d4 <vPortSuppressTicksAndSleep+0x178>)
 8007336:	6819      	ldr	r1, [r3, #0]
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	1acb      	subs	r3, r1, r3
 800733c:	4413      	add	r3, r2
 800733e:	3b01      	subs	r3, #1
 8007340:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8007342:	4b26      	ldr	r3, [pc, #152]	@ (80073dc <vPortSuppressTicksAndSleep+0x180>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	429a      	cmp	r2, r3
 800734a:	d304      	bcc.n	8007356 <vPortSuppressTicksAndSleep+0xfa>
 800734c:	4b22      	ldr	r3, [pc, #136]	@ (80073d8 <vPortSuppressTicksAndSleep+0x17c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	429a      	cmp	r2, r3
 8007354:	d903      	bls.n	800735e <vPortSuppressTicksAndSleep+0x102>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8007356:	4b20      	ldr	r3, [pc, #128]	@ (80073d8 <vPortSuppressTicksAndSleep+0x17c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3b01      	subs	r3, #1
 800735c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800735e:	4a20      	ldr	r2, [pc, #128]	@ (80073e0 <vPortSuppressTicksAndSleep+0x184>)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3b01      	subs	r3, #1
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e018      	b.n	800739e <vPortSuppressTicksAndSleep+0x142>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800736c:	4b1a      	ldr	r3, [pc, #104]	@ (80073d8 <vPortSuppressTicksAndSleep+0x17c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	fb03 f202 	mul.w	r2, r3, r2
 8007376:	4b17      	ldr	r3, [pc, #92]	@ (80073d4 <vPortSuppressTicksAndSleep+0x178>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800737e:	4b16      	ldr	r3, [pc, #88]	@ (80073d8 <vPortSuppressTicksAndSleep+0x17c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	fbb2 f3f3 	udiv	r3, r2, r3
 8007388:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	3301      	adds	r3, #1
 800738e:	4a12      	ldr	r2, [pc, #72]	@ (80073d8 <vPortSuppressTicksAndSleep+0x17c>)
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	fb03 f202 	mul.w	r2, r3, r2
 8007396:	4912      	ldr	r1, [pc, #72]	@ (80073e0 <vPortSuppressTicksAndSleep+0x184>)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800739e:	4b0d      	ldr	r3, [pc, #52]	@ (80073d4 <vPortSuppressTicksAndSleep+0x178>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a09      	ldr	r2, [pc, #36]	@ (80073d0 <vPortSuppressTicksAndSleep+0x174>)
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 80073b0:	69b8      	ldr	r0, [r7, #24]
 80073b2:	f001 faff 	bl	80089b4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80073b6:	4b08      	ldr	r3, [pc, #32]	@ (80073d8 <vPortSuppressTicksAndSleep+0x17c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a09      	ldr	r2, [pc, #36]	@ (80073e0 <vPortSuppressTicksAndSleep+0x184>)
 80073bc:	3b01      	subs	r3, #1
 80073be:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 80073c0:	b662      	cpsie	i
	}
 80073c2:	bf00      	nop
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	200015a8 	.word	0x200015a8
 80073d0:	e000e010 	.word	0xe000e010
 80073d4:	e000e018 	.word	0xe000e018
 80073d8:	200015a4 	.word	0x200015a4
 80073dc:	200015ac 	.word	0x200015ac
 80073e0:	e000e014 	.word	0xe000e014

080073e4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80073e8:	4b14      	ldr	r3, [pc, #80]	@ (800743c <vPortSetupTimerInterrupt+0x58>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a14      	ldr	r2, [pc, #80]	@ (8007440 <vPortSetupTimerInterrupt+0x5c>)
 80073ee:	fba2 2303 	umull	r2, r3, r2, r3
 80073f2:	099b      	lsrs	r3, r3, #6
 80073f4:	4a13      	ldr	r2, [pc, #76]	@ (8007444 <vPortSetupTimerInterrupt+0x60>)
 80073f6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80073f8:	4b12      	ldr	r3, [pc, #72]	@ (8007444 <vPortSetupTimerInterrupt+0x60>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8007400:	fbb2 f3f3 	udiv	r3, r2, r3
 8007404:	4a10      	ldr	r2, [pc, #64]	@ (8007448 <vPortSetupTimerInterrupt+0x64>)
 8007406:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8007408:	4b10      	ldr	r3, [pc, #64]	@ (800744c <vPortSetupTimerInterrupt+0x68>)
 800740a:	222d      	movs	r2, #45	@ 0x2d
 800740c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800740e:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <vPortSetupTimerInterrupt+0x6c>)
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007414:	4b0f      	ldr	r3, [pc, #60]	@ (8007454 <vPortSetupTimerInterrupt+0x70>)
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800741a:	4b08      	ldr	r3, [pc, #32]	@ (800743c <vPortSetupTimerInterrupt+0x58>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a08      	ldr	r2, [pc, #32]	@ (8007440 <vPortSetupTimerInterrupt+0x5c>)
 8007420:	fba2 2303 	umull	r2, r3, r2, r3
 8007424:	099b      	lsrs	r3, r3, #6
 8007426:	4a0c      	ldr	r2, [pc, #48]	@ (8007458 <vPortSetupTimerInterrupt+0x74>)
 8007428:	3b01      	subs	r3, #1
 800742a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800742c:	4b08      	ldr	r3, [pc, #32]	@ (8007450 <vPortSetupTimerInterrupt+0x6c>)
 800742e:	2207      	movs	r2, #7
 8007430:	601a      	str	r2, [r3, #0]
}
 8007432:	bf00      	nop
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000000 	.word	0x20000000
 8007440:	10624dd3 	.word	0x10624dd3
 8007444:	200015a4 	.word	0x200015a4
 8007448:	200015a8 	.word	0x200015a8
 800744c:	200015ac 	.word	0x200015ac
 8007450:	e000e010 	.word	0xe000e010
 8007454:	e000e018 	.word	0xe000e018
 8007458:	e000e014 	.word	0xe000e014

0800745c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800745c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800746c <vPortEnableVFP+0x10>
 8007460:	6801      	ldr	r1, [r0, #0]
 8007462:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007466:	6001      	str	r1, [r0, #0]
 8007468:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800746a:	bf00      	nop
 800746c:	e000ed88 	.word	0xe000ed88

08007470 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007476:	f3ef 8305 	mrs	r3, IPSR
 800747a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b0f      	cmp	r3, #15
 8007480:	d915      	bls.n	80074ae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007482:	4a18      	ldr	r2, [pc, #96]	@ (80074e4 <vPortValidateInterruptPriority+0x74>)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800748c:	4b16      	ldr	r3, [pc, #88]	@ (80074e8 <vPortValidateInterruptPriority+0x78>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	7afa      	ldrb	r2, [r7, #11]
 8007492:	429a      	cmp	r2, r3
 8007494:	d20b      	bcs.n	80074ae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	607b      	str	r3, [r7, #4]
}
 80074a8:	bf00      	nop
 80074aa:	bf00      	nop
 80074ac:	e7fd      	b.n	80074aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074ae:	4b0f      	ldr	r3, [pc, #60]	@ (80074ec <vPortValidateInterruptPriority+0x7c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074b6:	4b0e      	ldr	r3, [pc, #56]	@ (80074f0 <vPortValidateInterruptPriority+0x80>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d90b      	bls.n	80074d6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	603b      	str	r3, [r7, #0]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <vPortValidateInterruptPriority+0x62>
	}
 80074d6:	bf00      	nop
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	e000e3f0 	.word	0xe000e3f0
 80074e8:	200015b0 	.word	0x200015b0
 80074ec:	e000ed0c 	.word	0xe000ed0c
 80074f0:	200015b4 	.word	0x200015b4

080074f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10b      	bne.n	8007520 <xQueueGenericReset+0x2c>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	60bb      	str	r3, [r7, #8]
}
 800751a:	bf00      	nop
 800751c:	bf00      	nop
 800751e:	e7fd      	b.n	800751c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007520:	f7ff fdea 	bl	80070f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800752c:	68f9      	ldr	r1, [r7, #12]
 800752e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007530:	fb01 f303 	mul.w	r3, r1, r3
 8007534:	441a      	add	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	3b01      	subs	r3, #1
 8007552:	68f9      	ldr	r1, [r7, #12]
 8007554:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007556:	fb01 f303 	mul.w	r3, r1, r3
 800755a:	441a      	add	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	22ff      	movs	r2, #255	@ 0xff
 8007564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	22ff      	movs	r2, #255	@ 0xff
 800756c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d114      	bne.n	80075a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d01a      	beq.n	80075b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3310      	adds	r3, #16
 8007582:	4618      	mov	r0, r3
 8007584:	f001 fbca 	bl	8008d1c <xTaskRemoveFromEventList>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d012      	beq.n	80075b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800758e:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <xQueueGenericReset+0xd0>)
 8007590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	e009      	b.n	80075b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3310      	adds	r3, #16
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff fbc5 	bl	8006d34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3324      	adds	r3, #36	@ 0x24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff fbc0 	bl	8006d34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075b4:	f7ff fdd2 	bl	800715c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075b8:	2301      	movs	r3, #1
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	e000ed04 	.word	0xe000ed04

080075c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08e      	sub	sp, #56	@ 0x38
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10b      	bne.n	80075f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10b      	bne.n	8007612 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <xQueueGenericCreateStatic+0x56>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <xQueueGenericCreateStatic+0x5a>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <xQueueGenericCreateStatic+0x5c>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10b      	bne.n	8007640 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	623b      	str	r3, [r7, #32]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <xQueueGenericCreateStatic+0x84>
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <xQueueGenericCreateStatic+0x88>
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <xQueueGenericCreateStatic+0x8a>
 8007650:	2300      	movs	r3, #0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	61fb      	str	r3, [r7, #28]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800766e:	2350      	movs	r3, #80	@ 0x50
 8007670:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b50      	cmp	r3, #80	@ 0x50
 8007676:	d00b      	beq.n	8007690 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61bb      	str	r3, [r7, #24]
}
 800768a:	bf00      	nop
 800768c:	bf00      	nop
 800768e:	e7fd      	b.n	800768c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007690:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00d      	beq.n	80076b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800769c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80076a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	4613      	mov	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f840 	bl	8007738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3730      	adds	r7, #48	@ 0x30
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b08a      	sub	sp, #40	@ 0x28
 80076c6:	af02      	add	r7, sp, #8
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	4613      	mov	r3, r2
 80076ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <xQueueGenericCreate+0x2c>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	613b      	str	r3, [r7, #16]
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	e7fd      	b.n	80076ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	fb02 f303 	mul.w	r3, r2, r3
 80076f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	3350      	adds	r3, #80	@ 0x50
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff f92b 	bl	8006958 <pvPortMalloc>
 8007702:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d011      	beq.n	800772e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	3350      	adds	r3, #80	@ 0x50
 8007712:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800771c:	79fa      	ldrb	r2, [r7, #7]
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	4613      	mov	r3, r2
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f805 	bl	8007738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800772e:	69bb      	ldr	r3, [r7, #24]
	}
 8007730:	4618      	mov	r0, r3
 8007732:	3720      	adds	r7, #32
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e002      	b.n	800775a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007766:	2101      	movs	r1, #1
 8007768:	69b8      	ldr	r0, [r7, #24]
 800776a:	f7ff fec3 	bl	80074f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	78fa      	ldrb	r2, [r7, #3]
 8007772:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00e      	beq.n	80077aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800779e:	2300      	movs	r3, #0
 80077a0:	2200      	movs	r2, #0
 80077a2:	2100      	movs	r1, #0
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f81d 	bl	80077e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	4603      	mov	r3, r0
 80077ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80077bc:	2301      	movs	r3, #1
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	2300      	movs	r3, #0
 80077c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6939      	ldr	r1, [r7, #16]
 80077ca:	6978      	ldr	r0, [r7, #20]
 80077cc:	f7ff ff79 	bl	80076c2 <xQueueGenericCreate>
 80077d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff ffd3 	bl	800777e <prvInitialiseMutex>

		return xNewQueue;
 80077d8:	68fb      	ldr	r3, [r7, #12]
	}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08e      	sub	sp, #56	@ 0x38
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077f2:	2300      	movs	r3, #0
 80077f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10b      	bne.n	8007818 <xQueueGenericSend+0x34>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	e7fd      	b.n	8007814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d103      	bne.n	8007826 <xQueueGenericSend+0x42>
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <xQueueGenericSend+0x46>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <xQueueGenericSend+0x48>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10b      	bne.n	8007848 <xQueueGenericSend+0x64>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	e7fd      	b.n	8007844 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d103      	bne.n	8007856 <xQueueGenericSend+0x72>
 800784e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <xQueueGenericSend+0x76>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <xQueueGenericSend+0x78>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10b      	bne.n	8007878 <xQueueGenericSend+0x94>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	623b      	str	r3, [r7, #32]
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007878:	f001 fc6e 	bl	8009158 <xTaskGetSchedulerState>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <xQueueGenericSend+0xa4>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <xQueueGenericSend+0xa8>
 8007888:	2301      	movs	r3, #1
 800788a:	e000      	b.n	800788e <xQueueGenericSend+0xaa>
 800788c:	2300      	movs	r3, #0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10b      	bne.n	80078aa <xQueueGenericSend+0xc6>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	61fb      	str	r3, [r7, #28]
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop
 80078a8:	e7fd      	b.n	80078a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078aa:	f7ff fc25 	bl	80070f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d302      	bcc.n	80078c0 <xQueueGenericSend+0xdc>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d129      	bne.n	8007914 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078c6:	f000 fb37 	bl	8007f38 <prvCopyDataToQueue>
 80078ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d010      	beq.n	80078f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d6:	3324      	adds	r3, #36	@ 0x24
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 fa1f 	bl	8008d1c <xTaskRemoveFromEventList>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d013      	beq.n	800790c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078e4:	4b3f      	ldr	r3, [pc, #252]	@ (80079e4 <xQueueGenericSend+0x200>)
 80078e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	e00a      	b.n	800790c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078fc:	4b39      	ldr	r3, [pc, #228]	@ (80079e4 <xQueueGenericSend+0x200>)
 80078fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800790c:	f7ff fc26 	bl	800715c <vPortExitCritical>
				return pdPASS;
 8007910:	2301      	movs	r3, #1
 8007912:	e063      	b.n	80079dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800791a:	f7ff fc1f 	bl	800715c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800791e:	2300      	movs	r3, #0
 8007920:	e05c      	b.n	80079dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007924:	2b00      	cmp	r3, #0
 8007926:	d106      	bne.n	8007936 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007928:	f107 0314 	add.w	r3, r7, #20
 800792c:	4618      	mov	r0, r3
 800792e:	f001 fa5b 	bl	8008de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007932:	2301      	movs	r3, #1
 8007934:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007936:	f7ff fc11 	bl	800715c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800793a:	f000 ff47 	bl	80087cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800793e:	f7ff fbdb 	bl	80070f8 <vPortEnterCritical>
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007948:	b25b      	sxtb	r3, r3
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d103      	bne.n	8007958 <xQueueGenericSend+0x174>
 8007950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800795e:	b25b      	sxtb	r3, r3
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d103      	bne.n	800796e <xQueueGenericSend+0x18a>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800796e:	f7ff fbf5 	bl	800715c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007972:	1d3a      	adds	r2, r7, #4
 8007974:	f107 0314 	add.w	r3, r7, #20
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f001 fa4a 	bl	8008e14 <xTaskCheckForTimeOut>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d124      	bne.n	80079d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007986:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007988:	f000 fbce 	bl	8008128 <prvIsQueueFull>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d018      	beq.n	80079c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	3310      	adds	r3, #16
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f001 f96c 	bl	8008c78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079a2:	f000 fb59 	bl	8008058 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079a6:	f000 ff57 	bl	8008858 <xTaskResumeAll>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f47f af7c 	bne.w	80078aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80079b2:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <xQueueGenericSend+0x200>)
 80079b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	e772      	b.n	80078aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079c6:	f000 fb47 	bl	8008058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079ca:	f000 ff45 	bl	8008858 <xTaskResumeAll>
 80079ce:	e76c      	b.n	80078aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079d2:	f000 fb41 	bl	8008058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079d6:	f000 ff3f 	bl	8008858 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3738      	adds	r7, #56	@ 0x38
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b090      	sub	sp, #64	@ 0x40
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d103      	bne.n	8007a26 <xQueueGenericSendFromISR+0x3e>
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <xQueueGenericSendFromISR+0x42>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <xQueueGenericSendFromISR+0x44>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10b      	bne.n	8007a48 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	e7fd      	b.n	8007a44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d103      	bne.n	8007a56 <xQueueGenericSendFromISR+0x6e>
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d101      	bne.n	8007a5a <xQueueGenericSendFromISR+0x72>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <xQueueGenericSendFromISR+0x74>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10b      	bne.n	8007a78 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	623b      	str	r3, [r7, #32]
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a78:	f7ff fcfa 	bl	8007470 <vPortValidateInterruptPriority>
	__asm volatile
 8007a7c:	f3ef 8211 	mrs	r2, BASEPRI
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	61fa      	str	r2, [r7, #28]
 8007a92:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007a94:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a96:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d302      	bcc.n	8007aaa <xQueueGenericSendFromISR+0xc2>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d12f      	bne.n	8007b0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ab0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ac0:	f000 fa3a 	bl	8007f38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ac4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d112      	bne.n	8007af4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d016      	beq.n	8007b04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	3324      	adds	r3, #36	@ 0x24
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 f91e 	bl	8008d1c <xTaskRemoveFromEventList>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00e      	beq.n	8007b04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e007      	b.n	8007b04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007af8:	3301      	adds	r3, #1
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	b25a      	sxtb	r2, r3
 8007afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b04:	2301      	movs	r3, #1
 8007b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b08:	e001      	b.n	8007b0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b10:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f383 8811 	msr	BASEPRI, r3
}
 8007b18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3740      	adds	r7, #64	@ 0x40
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08c      	sub	sp, #48	@ 0x30
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <xQueueReceive+0x32>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	623b      	str	r3, [r7, #32]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <xQueueReceive+0x40>
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <xQueueReceive+0x44>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <xQueueReceive+0x46>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10b      	bne.n	8007b86 <xQueueReceive+0x62>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	61fb      	str	r3, [r7, #28]
}
 8007b80:	bf00      	nop
 8007b82:	bf00      	nop
 8007b84:	e7fd      	b.n	8007b82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b86:	f001 fae7 	bl	8009158 <xTaskGetSchedulerState>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <xQueueReceive+0x72>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <xQueueReceive+0x76>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <xQueueReceive+0x78>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10b      	bne.n	8007bb8 <xQueueReceive+0x94>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	61bb      	str	r3, [r7, #24]
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bb8:	f7ff fa9e 	bl	80070f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01f      	beq.n	8007c08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bcc:	f000 fa1e 	bl	800800c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	1e5a      	subs	r2, r3, #1
 8007bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00f      	beq.n	8007c00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be2:	3310      	adds	r3, #16
 8007be4:	4618      	mov	r0, r3
 8007be6:	f001 f899 	bl	8008d1c <xTaskRemoveFromEventList>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8007ce4 <xQueueReceive+0x1c0>)
 8007bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c00:	f7ff faac 	bl	800715c <vPortExitCritical>
				return pdPASS;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e069      	b.n	8007cdc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d103      	bne.n	8007c16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c0e:	f7ff faa5 	bl	800715c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c12:	2300      	movs	r3, #0
 8007c14:	e062      	b.n	8007cdc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c1c:	f107 0310 	add.w	r3, r7, #16
 8007c20:	4618      	mov	r0, r3
 8007c22:	f001 f8e1 	bl	8008de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c26:	2301      	movs	r3, #1
 8007c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c2a:	f7ff fa97 	bl	800715c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c2e:	f000 fdcd 	bl	80087cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c32:	f7ff fa61 	bl	80070f8 <vPortEnterCritical>
 8007c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c3c:	b25b      	sxtb	r3, r3
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c42:	d103      	bne.n	8007c4c <xQueueReceive+0x128>
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c52:	b25b      	sxtb	r3, r3
 8007c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c58:	d103      	bne.n	8007c62 <xQueueReceive+0x13e>
 8007c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c62:	f7ff fa7b 	bl	800715c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c66:	1d3a      	adds	r2, r7, #4
 8007c68:	f107 0310 	add.w	r3, r7, #16
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 f8d0 	bl	8008e14 <xTaskCheckForTimeOut>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d123      	bne.n	8007cc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c7c:	f000 fa3e 	bl	80080fc <prvIsQueueEmpty>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d017      	beq.n	8007cb6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c88:	3324      	adds	r3, #36	@ 0x24
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fff2 	bl	8008c78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c96:	f000 f9df 	bl	8008058 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c9a:	f000 fddd 	bl	8008858 <xTaskResumeAll>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d189      	bne.n	8007bb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8007ce4 <xQueueReceive+0x1c0>)
 8007ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	e780      	b.n	8007bb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cb8:	f000 f9ce 	bl	8008058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cbc:	f000 fdcc 	bl	8008858 <xTaskResumeAll>
 8007cc0:	e77a      	b.n	8007bb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cc4:	f000 f9c8 	bl	8008058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cc8:	f000 fdc6 	bl	8008858 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cce:	f000 fa15 	bl	80080fc <prvIsQueueEmpty>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f43f af6f 	beq.w	8007bb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3730      	adds	r7, #48	@ 0x30
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08e      	sub	sp, #56	@ 0x38
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10b      	bne.n	8007d1c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	623b      	str	r3, [r7, #32]
}
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	e7fd      	b.n	8007d18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00b      	beq.n	8007d3c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	61fb      	str	r3, [r7, #28]
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	e7fd      	b.n	8007d38 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d3c:	f001 fa0c 	bl	8009158 <xTaskGetSchedulerState>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <xQueueSemaphoreTake+0x64>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <xQueueSemaphoreTake+0x68>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e000      	b.n	8007d52 <xQueueSemaphoreTake+0x6a>
 8007d50:	2300      	movs	r3, #0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10b      	bne.n	8007d6e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	61bb      	str	r3, [r7, #24]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d6e:	f7ff f9c3 	bl	80070f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d024      	beq.n	8007dc8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d80:	1e5a      	subs	r2, r3, #1
 8007d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d8e:	f001 fb5d 	bl	800944c <pvTaskIncrementMutexHeldCount>
 8007d92:	4602      	mov	r2, r0
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00f      	beq.n	8007dc0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da2:	3310      	adds	r3, #16
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 ffb9 	bl	8008d1c <xTaskRemoveFromEventList>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007db0:	4b54      	ldr	r3, [pc, #336]	@ (8007f04 <xQueueSemaphoreTake+0x21c>)
 8007db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dc0:	f7ff f9cc 	bl	800715c <vPortExitCritical>
				return pdPASS;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e098      	b.n	8007efa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d112      	bne.n	8007df4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	617b      	str	r3, [r7, #20]
}
 8007de6:	bf00      	nop
 8007de8:	bf00      	nop
 8007dea:	e7fd      	b.n	8007de8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007dec:	f7ff f9b6 	bl	800715c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e082      	b.n	8007efa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dfa:	f107 030c 	add.w	r3, r7, #12
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fff2 	bl	8008de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e04:	2301      	movs	r3, #1
 8007e06:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e08:	f7ff f9a8 	bl	800715c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e0c:	f000 fcde 	bl	80087cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e10:	f7ff f972 	bl	80070f8 <vPortEnterCritical>
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e1a:	b25b      	sxtb	r3, r3
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d103      	bne.n	8007e2a <xQueueSemaphoreTake+0x142>
 8007e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e30:	b25b      	sxtb	r3, r3
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	d103      	bne.n	8007e40 <xQueueSemaphoreTake+0x158>
 8007e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e40:	f7ff f98c 	bl	800715c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e44:	463a      	mov	r2, r7
 8007e46:	f107 030c 	add.w	r3, r7, #12
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 ffe1 	bl	8008e14 <xTaskCheckForTimeOut>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d132      	bne.n	8007ebe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e5a:	f000 f94f 	bl	80080fc <prvIsQueueEmpty>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d026      	beq.n	8007eb2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d109      	bne.n	8007e80 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007e6c:	f7ff f944 	bl	80070f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 f98d 	bl	8009194 <xTaskPriorityInherit>
 8007e7a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007e7c:	f7ff f96e 	bl	800715c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e82:	3324      	adds	r3, #36	@ 0x24
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	4611      	mov	r1, r2
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fef5 	bl	8008c78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e90:	f000 f8e2 	bl	8008058 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e94:	f000 fce0 	bl	8008858 <xTaskResumeAll>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f47f af67 	bne.w	8007d6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007ea0:	4b18      	ldr	r3, [pc, #96]	@ (8007f04 <xQueueSemaphoreTake+0x21c>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	e75d      	b.n	8007d6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007eb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007eb4:	f000 f8d0 	bl	8008058 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eb8:	f000 fcce 	bl	8008858 <xTaskResumeAll>
 8007ebc:	e757      	b.n	8007d6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ebe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ec0:	f000 f8ca 	bl	8008058 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ec4:	f000 fcc8 	bl	8008858 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ec8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007eca:	f000 f917 	bl	80080fc <prvIsQueueEmpty>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f43f af4c 	beq.w	8007d6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00d      	beq.n	8007ef8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007edc:	f7ff f90c 	bl	80070f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ee0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ee2:	f000 f811 	bl	8007f08 <prvGetDisinheritPriorityAfterTimeout>
 8007ee6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f001 fa28 	bl	8009344 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ef4:	f7ff f932 	bl	800715c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ef8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3738      	adds	r7, #56	@ 0x38
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	e000ed04 	.word	0xe000ed04

08007f08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d006      	beq.n	8007f26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e001      	b.n	8007f2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
	}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10d      	bne.n	8007f72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d14d      	bne.n	8007ffa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 f97e 	bl	8009264 <xTaskPriorityDisinherit>
 8007f68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	609a      	str	r2, [r3, #8]
 8007f70:	e043      	b.n	8007ffa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d119      	bne.n	8007fac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6858      	ldr	r0, [r3, #4]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f80:	461a      	mov	r2, r3
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	f001 fece 	bl	8009d24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d32b      	bcc.n	8007ffa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	605a      	str	r2, [r3, #4]
 8007faa:	e026      	b.n	8007ffa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68d8      	ldr	r0, [r3, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	f001 feb4 	bl	8009d24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc4:	425b      	negs	r3, r3
 8007fc6:	441a      	add	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d207      	bcs.n	8007fe8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe0:	425b      	negs	r3, r3
 8007fe2:	441a      	add	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d105      	bne.n	8007ffa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008002:	697b      	ldr	r3, [r7, #20]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d018      	beq.n	8008050 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008026:	441a      	add	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68da      	ldr	r2, [r3, #12]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	429a      	cmp	r2, r3
 8008036:	d303      	bcc.n	8008040 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68d9      	ldr	r1, [r3, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008048:	461a      	mov	r2, r3
 800804a:	6838      	ldr	r0, [r7, #0]
 800804c:	f001 fe6a 	bl	8009d24 <memcpy>
	}
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008060:	f7ff f84a 	bl	80070f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800806a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800806c:	e011      	b.n	8008092 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d012      	beq.n	800809c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3324      	adds	r3, #36	@ 0x24
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fe4e 	bl	8008d1c <xTaskRemoveFromEventList>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008086:	f000 ff29 	bl	8008edc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	3b01      	subs	r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008096:	2b00      	cmp	r3, #0
 8008098:	dce9      	bgt.n	800806e <prvUnlockQueue+0x16>
 800809a:	e000      	b.n	800809e <prvUnlockQueue+0x46>
					break;
 800809c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	22ff      	movs	r2, #255	@ 0xff
 80080a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080a6:	f7ff f859 	bl	800715c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080aa:	f7ff f825 	bl	80070f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080b6:	e011      	b.n	80080dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d012      	beq.n	80080e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3310      	adds	r3, #16
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fe29 	bl	8008d1c <xTaskRemoveFromEventList>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080d0:	f000 ff04 	bl	8008edc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dce9      	bgt.n	80080b8 <prvUnlockQueue+0x60>
 80080e4:	e000      	b.n	80080e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	22ff      	movs	r2, #255	@ 0xff
 80080ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80080f0:	f7ff f834 	bl	800715c <vPortExitCritical>
}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008104:	f7fe fff8 	bl	80070f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810c:	2b00      	cmp	r3, #0
 800810e:	d102      	bne.n	8008116 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008110:	2301      	movs	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	e001      	b.n	800811a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800811a:	f7ff f81f 	bl	800715c <vPortExitCritical>

	return xReturn;
 800811e:	68fb      	ldr	r3, [r7, #12]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008130:	f7fe ffe2 	bl	80070f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813c:	429a      	cmp	r2, r3
 800813e:	d102      	bne.n	8008146 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008140:	2301      	movs	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	e001      	b.n	800814a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800814a:	f7ff f807 	bl	800715c <vPortExitCritical>

	return xReturn;
 800814e:	68fb      	ldr	r3, [r7, #12]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	e014      	b.n	8008192 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008168:	4a0f      	ldr	r2, [pc, #60]	@ (80081a8 <vQueueAddToRegistry+0x50>)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10b      	bne.n	800818c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008174:	490c      	ldr	r1, [pc, #48]	@ (80081a8 <vQueueAddToRegistry+0x50>)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800817e:	4a0a      	ldr	r2, [pc, #40]	@ (80081a8 <vQueueAddToRegistry+0x50>)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	4413      	add	r3, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800818a:	e006      	b.n	800819a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b07      	cmp	r3, #7
 8008196:	d9e7      	bls.n	8008168 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008198:	bf00      	nop
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	200015b8 	.word	0x200015b8

080081ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081bc:	f7fe ff9c 	bl	80070f8 <vPortEnterCritical>
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081c6:	b25b      	sxtb	r3, r3
 80081c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081cc:	d103      	bne.n	80081d6 <vQueueWaitForMessageRestricted+0x2a>
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081dc:	b25b      	sxtb	r3, r3
 80081de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e2:	d103      	bne.n	80081ec <vQueueWaitForMessageRestricted+0x40>
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081ec:	f7fe ffb6 	bl	800715c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d106      	bne.n	8008206 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	3324      	adds	r3, #36	@ 0x24
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	68b9      	ldr	r1, [r7, #8]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fd5f 	bl	8008cc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008206:	6978      	ldr	r0, [r7, #20]
 8008208:	f7ff ff26 	bl	8008058 <prvUnlockQueue>
	}
 800820c:	bf00      	nop
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08e      	sub	sp, #56	@ 0x38
 8008218:	af04      	add	r7, sp, #16
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10b      	bne.n	8008240 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	623b      	str	r3, [r7, #32]
}
 800823a:	bf00      	nop
 800823c:	bf00      	nop
 800823e:	e7fd      	b.n	800823c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	61fb      	str	r3, [r7, #28]
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	e7fd      	b.n	800825a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800825e:	23ac      	movs	r3, #172	@ 0xac
 8008260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2bac      	cmp	r3, #172	@ 0xac
 8008266:	d00b      	beq.n	8008280 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	61bb      	str	r3, [r7, #24]
}
 800827a:	bf00      	nop
 800827c:	bf00      	nop
 800827e:	e7fd      	b.n	800827c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008280:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01e      	beq.n	80082c6 <xTaskCreateStatic+0xb2>
 8008288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01b      	beq.n	80082c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008296:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	2202      	movs	r2, #2
 800829c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082a0:	2300      	movs	r3, #0
 80082a2:	9303      	str	r3, [sp, #12]
 80082a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a6:	9302      	str	r3, [sp, #8]
 80082a8:	f107 0314 	add.w	r3, r7, #20
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 f851 	bl	8008360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082c0:	f000 f8f8 	bl	80084b4 <prvAddNewTaskToReadyList>
 80082c4:	e001      	b.n	80082ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082ca:	697b      	ldr	r3, [r7, #20]
	}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3728      	adds	r7, #40	@ 0x28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08c      	sub	sp, #48	@ 0x30
 80082d8:	af04      	add	r7, sp, #16
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	603b      	str	r3, [r7, #0]
 80082e0:	4613      	mov	r3, r2
 80082e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fb35 	bl	8006958 <pvPortMalloc>
 80082ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00e      	beq.n	8008314 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082f6:	20ac      	movs	r0, #172	@ 0xac
 80082f8:	f7fe fb2e 	bl	8006958 <pvPortMalloc>
 80082fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	631a      	str	r2, [r3, #48]	@ 0x30
 800830a:	e005      	b.n	8008318 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800830c:	6978      	ldr	r0, [r7, #20]
 800830e:	f7fe fbf1 	bl	8006af4 <vPortFree>
 8008312:	e001      	b.n	8008318 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008314:	2300      	movs	r3, #0
 8008316:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d017      	beq.n	800834e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	2300      	movs	r3, #0
 800832a:	9303      	str	r3, [sp, #12]
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f80f 	bl	8008360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008342:	69f8      	ldr	r0, [r7, #28]
 8008344:	f000 f8b6 	bl	80084b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008348:	2301      	movs	r3, #1
 800834a:	61bb      	str	r3, [r7, #24]
 800834c:	e002      	b.n	8008354 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800834e:	f04f 33ff 	mov.w	r3, #4294967295
 8008352:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008354:	69bb      	ldr	r3, [r7, #24]
	}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	461a      	mov	r2, r3
 8008378:	21a5      	movs	r1, #165	@ 0xa5
 800837a:	f001 fc49 	bl	8009c10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008388:	3b01      	subs	r3, #1
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	f023 0307 	bic.w	r3, r3, #7
 8008396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f003 0307 	and.w	r3, r3, #7
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00b      	beq.n	80083ba <prvInitialiseNewTask+0x5a>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	617b      	str	r3, [r7, #20]
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
 80083b8:	e7fd      	b.n	80083b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d01f      	beq.n	8008400 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083c0:	2300      	movs	r3, #0
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e012      	b.n	80083ec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	4413      	add	r3, r2
 80083cc:	7819      	ldrb	r1, [r3, #0]
 80083ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	3334      	adds	r3, #52	@ 0x34
 80083d6:	460a      	mov	r2, r1
 80083d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d006      	beq.n	80083f4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	3301      	adds	r3, #1
 80083ea:	61fb      	str	r3, [r7, #28]
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	2b0f      	cmp	r3, #15
 80083f0:	d9e9      	bls.n	80083c6 <prvInitialiseNewTask+0x66>
 80083f2:	e000      	b.n	80083f6 <prvInitialiseNewTask+0x96>
			{
				break;
 80083f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083fe:	e003      	b.n	8008408 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840a:	2b37      	cmp	r3, #55	@ 0x37
 800840c:	d901      	bls.n	8008412 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800840e:	2337      	movs	r3, #55	@ 0x37
 8008410:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008416:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800841c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	2200      	movs	r2, #0
 8008422:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008426:	3304      	adds	r3, #4
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fca3 	bl	8006d74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008430:	3318      	adds	r3, #24
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fc9e 	bl	8006d74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800843c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008446:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800844c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	2200      	movs	r2, #0
 8008452:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	2200      	movs	r2, #0
 8008460:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	3358      	adds	r3, #88	@ 0x58
 8008468:	224c      	movs	r2, #76	@ 0x4c
 800846a:	2100      	movs	r1, #0
 800846c:	4618      	mov	r0, r3
 800846e:	f001 fbcf 	bl	8009c10 <memset>
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	4a0c      	ldr	r2, [pc, #48]	@ (80084a8 <prvInitialiseNewTask+0x148>)
 8008476:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847a:	4a0c      	ldr	r2, [pc, #48]	@ (80084ac <prvInitialiseNewTask+0x14c>)
 800847c:	661a      	str	r2, [r3, #96]	@ 0x60
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	4a0b      	ldr	r2, [pc, #44]	@ (80084b0 <prvInitialiseNewTask+0x150>)
 8008482:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	68f9      	ldr	r1, [r7, #12]
 8008488:	69b8      	ldr	r0, [r7, #24]
 800848a:	f7fe fd07 	bl	8006e9c <pxPortInitialiseStack>
 800848e:	4602      	mov	r2, r0
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800849a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800849e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084a0:	bf00      	nop
 80084a2:	3720      	adds	r7, #32
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20001c2c 	.word	0x20001c2c
 80084ac:	20001c94 	.word	0x20001c94
 80084b0:	20001cfc 	.word	0x20001cfc

080084b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084bc:	f7fe fe1c 	bl	80070f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008578 <prvAddNewTaskToReadyList+0xc4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3301      	adds	r3, #1
 80084c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008578 <prvAddNewTaskToReadyList+0xc4>)
 80084c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084ca:	4b2c      	ldr	r3, [pc, #176]	@ (800857c <prvAddNewTaskToReadyList+0xc8>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084d2:	4a2a      	ldr	r2, [pc, #168]	@ (800857c <prvAddNewTaskToReadyList+0xc8>)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084d8:	4b27      	ldr	r3, [pc, #156]	@ (8008578 <prvAddNewTaskToReadyList+0xc4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d110      	bne.n	8008502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084e0:	f000 fd76 	bl	8008fd0 <prvInitialiseTaskLists>
 80084e4:	e00d      	b.n	8008502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084e6:	4b26      	ldr	r3, [pc, #152]	@ (8008580 <prvAddNewTaskToReadyList+0xcc>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d109      	bne.n	8008502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084ee:	4b23      	ldr	r3, [pc, #140]	@ (800857c <prvAddNewTaskToReadyList+0xc8>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d802      	bhi.n	8008502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084fc:	4a1f      	ldr	r2, [pc, #124]	@ (800857c <prvAddNewTaskToReadyList+0xc8>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008502:	4b20      	ldr	r3, [pc, #128]	@ (8008584 <prvAddNewTaskToReadyList+0xd0>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3301      	adds	r3, #1
 8008508:	4a1e      	ldr	r2, [pc, #120]	@ (8008584 <prvAddNewTaskToReadyList+0xd0>)
 800850a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800850c:	4b1d      	ldr	r3, [pc, #116]	@ (8008584 <prvAddNewTaskToReadyList+0xd0>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008518:	4b1b      	ldr	r3, [pc, #108]	@ (8008588 <prvAddNewTaskToReadyList+0xd4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d903      	bls.n	8008528 <prvAddNewTaskToReadyList+0x74>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008524:	4a18      	ldr	r2, [pc, #96]	@ (8008588 <prvAddNewTaskToReadyList+0xd4>)
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4a15      	ldr	r2, [pc, #84]	@ (800858c <prvAddNewTaskToReadyList+0xd8>)
 8008536:	441a      	add	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3304      	adds	r3, #4
 800853c:	4619      	mov	r1, r3
 800853e:	4610      	mov	r0, r2
 8008540:	f7fe fc25 	bl	8006d8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008544:	f7fe fe0a 	bl	800715c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008548:	4b0d      	ldr	r3, [pc, #52]	@ (8008580 <prvAddNewTaskToReadyList+0xcc>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00e      	beq.n	800856e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008550:	4b0a      	ldr	r3, [pc, #40]	@ (800857c <prvAddNewTaskToReadyList+0xc8>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855a:	429a      	cmp	r2, r3
 800855c:	d207      	bcs.n	800856e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800855e:	4b0c      	ldr	r3, [pc, #48]	@ (8008590 <prvAddNewTaskToReadyList+0xdc>)
 8008560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20001acc 	.word	0x20001acc
 800857c:	200015f8 	.word	0x200015f8
 8008580:	20001ad8 	.word	0x20001ad8
 8008584:	20001ae8 	.word	0x20001ae8
 8008588:	20001ad4 	.word	0x20001ad4
 800858c:	200015fc 	.word	0x200015fc
 8008590:	e000ed04 	.word	0xe000ed04

08008594 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800859c:	f7fe fdac 	bl	80070f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <vTaskDelete+0x18>
 80085a6:	4b2d      	ldr	r3, [pc, #180]	@ (800865c <vTaskDelete+0xc8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	e000      	b.n	80085ae <vTaskDelete+0x1a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fc47 	bl	8006e48 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d004      	beq.n	80085cc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3318      	adds	r3, #24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fc3e 	bl	8006e48 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80085cc:	4b24      	ldr	r3, [pc, #144]	@ (8008660 <vTaskDelete+0xcc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3301      	adds	r3, #1
 80085d2:	4a23      	ldr	r2, [pc, #140]	@ (8008660 <vTaskDelete+0xcc>)
 80085d4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80085d6:	4b21      	ldr	r3, [pc, #132]	@ (800865c <vTaskDelete+0xc8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d10b      	bne.n	80085f8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3304      	adds	r3, #4
 80085e4:	4619      	mov	r1, r3
 80085e6:	481f      	ldr	r0, [pc, #124]	@ (8008664 <vTaskDelete+0xd0>)
 80085e8:	f7fe fbd1 	bl	8006d8e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80085ec:	4b1e      	ldr	r3, [pc, #120]	@ (8008668 <vTaskDelete+0xd4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3301      	adds	r3, #1
 80085f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008668 <vTaskDelete+0xd4>)
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	e009      	b.n	800860c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80085f8:	4b1c      	ldr	r3, [pc, #112]	@ (800866c <vTaskDelete+0xd8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	4a1b      	ldr	r2, [pc, #108]	@ (800866c <vTaskDelete+0xd8>)
 8008600:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 fd52 	bl	80090ac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008608:	f000 fd86 	bl	8009118 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800860c:	f7fe fda6 	bl	800715c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008610:	4b17      	ldr	r3, [pc, #92]	@ (8008670 <vTaskDelete+0xdc>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01c      	beq.n	8008652 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8008618:	4b10      	ldr	r3, [pc, #64]	@ (800865c <vTaskDelete+0xc8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	429a      	cmp	r2, r3
 8008620:	d117      	bne.n	8008652 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008622:	4b14      	ldr	r3, [pc, #80]	@ (8008674 <vTaskDelete+0xe0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00b      	beq.n	8008642 <vTaskDelete+0xae>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	60bb      	str	r3, [r7, #8]
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	e7fd      	b.n	800863e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008642:	4b0d      	ldr	r3, [pc, #52]	@ (8008678 <vTaskDelete+0xe4>)
 8008644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	200015f8 	.word	0x200015f8
 8008660:	20001ae8 	.word	0x20001ae8
 8008664:	20001aa0 	.word	0x20001aa0
 8008668:	20001ab4 	.word	0x20001ab4
 800866c:	20001acc 	.word	0x20001acc
 8008670:	20001ad8 	.word	0x20001ad8
 8008674:	20001af4 	.word	0x20001af4
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d018      	beq.n	80086c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800868e:	4b14      	ldr	r3, [pc, #80]	@ (80086e0 <vTaskDelay+0x64>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00b      	beq.n	80086ae <vTaskDelay+0x32>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	60bb      	str	r3, [r7, #8]
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	e7fd      	b.n	80086aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80086ae:	f000 f88d 	bl	80087cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086b2:	2100      	movs	r1, #0
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fedd 	bl	8009474 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086ba:	f000 f8cd 	bl	8008858 <xTaskResumeAll>
 80086be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d107      	bne.n	80086d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80086c6:	4b07      	ldr	r3, [pc, #28]	@ (80086e4 <vTaskDelay+0x68>)
 80086c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20001af4 	.word	0x20001af4
 80086e4:	e000ed04 	.word	0xe000ed04

080086e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08a      	sub	sp, #40	@ 0x28
 80086ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086f6:	463a      	mov	r2, r7
 80086f8:	1d39      	adds	r1, r7, #4
 80086fa:	f107 0308 	add.w	r3, r7, #8
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe f8f6 	bl	80068f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	9202      	str	r2, [sp, #8]
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	2300      	movs	r3, #0
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	2300      	movs	r3, #0
 8008714:	460a      	mov	r2, r1
 8008716:	4925      	ldr	r1, [pc, #148]	@ (80087ac <vTaskStartScheduler+0xc4>)
 8008718:	4825      	ldr	r0, [pc, #148]	@ (80087b0 <vTaskStartScheduler+0xc8>)
 800871a:	f7ff fd7b 	bl	8008214 <xTaskCreateStatic>
 800871e:	4603      	mov	r3, r0
 8008720:	4a24      	ldr	r2, [pc, #144]	@ (80087b4 <vTaskStartScheduler+0xcc>)
 8008722:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008724:	4b23      	ldr	r3, [pc, #140]	@ (80087b4 <vTaskStartScheduler+0xcc>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800872c:	2301      	movs	r3, #1
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	e001      	b.n	8008736 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008732:	2300      	movs	r3, #0
 8008734:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d102      	bne.n	8008742 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800873c:	f000 feee 	bl	800951c <xTimerCreateTimerTask>
 8008740:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d11d      	bne.n	8008784 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	613b      	str	r3, [r7, #16]
}
 800875a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800875c:	4b16      	ldr	r3, [pc, #88]	@ (80087b8 <vTaskStartScheduler+0xd0>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3358      	adds	r3, #88	@ 0x58
 8008762:	4a16      	ldr	r2, [pc, #88]	@ (80087bc <vTaskStartScheduler+0xd4>)
 8008764:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008766:	4b16      	ldr	r3, [pc, #88]	@ (80087c0 <vTaskStartScheduler+0xd8>)
 8008768:	f04f 32ff 	mov.w	r2, #4294967295
 800876c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800876e:	4b15      	ldr	r3, [pc, #84]	@ (80087c4 <vTaskStartScheduler+0xdc>)
 8008770:	2201      	movs	r2, #1
 8008772:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008774:	4b14      	ldr	r3, [pc, #80]	@ (80087c8 <vTaskStartScheduler+0xe0>)
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800877a:	f7f8 fb91 	bl	8000ea0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800877e:	f7fe fc17 	bl	8006fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008782:	e00f      	b.n	80087a4 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d10b      	bne.n	80087a4 <vTaskStartScheduler+0xbc>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	60fb      	str	r3, [r7, #12]
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	e7fd      	b.n	80087a0 <vTaskStartScheduler+0xb8>
}
 80087a4:	bf00      	nop
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	0800a740 	.word	0x0800a740
 80087b0:	08008ef5 	.word	0x08008ef5
 80087b4:	20001af0 	.word	0x20001af0
 80087b8:	200015f8 	.word	0x200015f8
 80087bc:	20000018 	.word	0x20000018
 80087c0:	20001aec 	.word	0x20001aec
 80087c4:	20001ad8 	.word	0x20001ad8
 80087c8:	20001ad0 	.word	0x20001ad0

080087cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80087d0:	4b04      	ldr	r3, [pc, #16]	@ (80087e4 <vTaskSuspendAll+0x18>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a03      	ldr	r2, [pc, #12]	@ (80087e4 <vTaskSuspendAll+0x18>)
 80087d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80087da:	bf00      	nop
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	20001af4 	.word	0x20001af4

080087e8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80087f2:	4b14      	ldr	r3, [pc, #80]	@ (8008844 <prvGetExpectedIdleTime+0x5c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80087fa:	2301      	movs	r3, #1
 80087fc:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80087fe:	4b12      	ldr	r3, [pc, #72]	@ (8008848 <prvGetExpectedIdleTime+0x60>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	607b      	str	r3, [r7, #4]
 800880c:	e012      	b.n	8008834 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800880e:	4b0f      	ldr	r3, [pc, #60]	@ (800884c <prvGetExpectedIdleTime+0x64>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d902      	bls.n	800881c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	607b      	str	r3, [r7, #4]
 800881a:	e00b      	b.n	8008834 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	607b      	str	r3, [r7, #4]
 8008826:	e005      	b.n	8008834 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008828:	4b09      	ldr	r3, [pc, #36]	@ (8008850 <prvGetExpectedIdleTime+0x68>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	4b09      	ldr	r3, [pc, #36]	@ (8008854 <prvGetExpectedIdleTime+0x6c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8008834:	687b      	ldr	r3, [r7, #4]
	}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	20001ad4 	.word	0x20001ad4
 8008848:	200015f8 	.word	0x200015f8
 800884c:	200015fc 	.word	0x200015fc
 8008850:	20001aec 	.word	0x20001aec
 8008854:	20001ad0 	.word	0x20001ad0

08008858 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008862:	2300      	movs	r3, #0
 8008864:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008866:	4b42      	ldr	r3, [pc, #264]	@ (8008970 <xTaskResumeAll+0x118>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10b      	bne.n	8008886 <xTaskResumeAll+0x2e>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	603b      	str	r3, [r7, #0]
}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	e7fd      	b.n	8008882 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008886:	f7fe fc37 	bl	80070f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800888a:	4b39      	ldr	r3, [pc, #228]	@ (8008970 <xTaskResumeAll+0x118>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3b01      	subs	r3, #1
 8008890:	4a37      	ldr	r2, [pc, #220]	@ (8008970 <xTaskResumeAll+0x118>)
 8008892:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008894:	4b36      	ldr	r3, [pc, #216]	@ (8008970 <xTaskResumeAll+0x118>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d162      	bne.n	8008962 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800889c:	4b35      	ldr	r3, [pc, #212]	@ (8008974 <xTaskResumeAll+0x11c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d05e      	beq.n	8008962 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088a4:	e02f      	b.n	8008906 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a6:	4b34      	ldr	r3, [pc, #208]	@ (8008978 <xTaskResumeAll+0x120>)
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3318      	adds	r3, #24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fac8 	bl	8006e48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fac3 	bl	8006e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c6:	4b2d      	ldr	r3, [pc, #180]	@ (800897c <xTaskResumeAll+0x124>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d903      	bls.n	80088d6 <xTaskResumeAll+0x7e>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d2:	4a2a      	ldr	r2, [pc, #168]	@ (800897c <xTaskResumeAll+0x124>)
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088da:	4613      	mov	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4a27      	ldr	r2, [pc, #156]	@ (8008980 <xTaskResumeAll+0x128>)
 80088e4:	441a      	add	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7fe fa4e 	bl	8006d8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f6:	4b23      	ldr	r3, [pc, #140]	@ (8008984 <xTaskResumeAll+0x12c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d302      	bcc.n	8008906 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008900:	4b21      	ldr	r3, [pc, #132]	@ (8008988 <xTaskResumeAll+0x130>)
 8008902:	2201      	movs	r2, #1
 8008904:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008906:	4b1c      	ldr	r3, [pc, #112]	@ (8008978 <xTaskResumeAll+0x120>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1cb      	bne.n	80088a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008914:	f000 fc00 	bl	8009118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008918:	4b1c      	ldr	r3, [pc, #112]	@ (800898c <xTaskResumeAll+0x134>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d010      	beq.n	8008946 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008924:	f000 f86e 	bl	8008a04 <xTaskIncrementTick>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800892e:	4b16      	ldr	r3, [pc, #88]	@ (8008988 <xTaskResumeAll+0x130>)
 8008930:	2201      	movs	r2, #1
 8008932:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3b01      	subs	r3, #1
 8008938:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1f1      	bne.n	8008924 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008940:	4b12      	ldr	r3, [pc, #72]	@ (800898c <xTaskResumeAll+0x134>)
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008946:	4b10      	ldr	r3, [pc, #64]	@ (8008988 <xTaskResumeAll+0x130>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d009      	beq.n	8008962 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800894e:	2301      	movs	r3, #1
 8008950:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008952:	4b0f      	ldr	r3, [pc, #60]	@ (8008990 <xTaskResumeAll+0x138>)
 8008954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008962:	f7fe fbfb 	bl	800715c <vPortExitCritical>

	return xAlreadyYielded;
 8008966:	68bb      	ldr	r3, [r7, #8]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20001af4 	.word	0x20001af4
 8008974:	20001acc 	.word	0x20001acc
 8008978:	20001a8c 	.word	0x20001a8c
 800897c:	20001ad4 	.word	0x20001ad4
 8008980:	200015fc 	.word	0x200015fc
 8008984:	200015f8 	.word	0x200015f8
 8008988:	20001ae0 	.word	0x20001ae0
 800898c:	20001adc 	.word	0x20001adc
 8008990:	e000ed04 	.word	0xe000ed04

08008994 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800899a:	4b05      	ldr	r3, [pc, #20]	@ (80089b0 <xTaskGetTickCount+0x1c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089a0:	687b      	ldr	r3, [r7, #4]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	20001ad0 	.word	0x20001ad0

080089b4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80089bc:	4b0f      	ldr	r3, [pc, #60]	@ (80089fc <vTaskStepTick+0x48>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	441a      	add	r2, r3
 80089c4:	4b0e      	ldr	r3, [pc, #56]	@ (8008a00 <vTaskStepTick+0x4c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d90b      	bls.n	80089e4 <vTaskStepTick+0x30>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	60fb      	str	r3, [r7, #12]
}
 80089de:	bf00      	nop
 80089e0:	bf00      	nop
 80089e2:	e7fd      	b.n	80089e0 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 80089e4:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <vTaskStepTick+0x48>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4413      	add	r3, r2
 80089ec:	4a03      	ldr	r2, [pc, #12]	@ (80089fc <vTaskStepTick+0x48>)
 80089ee:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80089f0:	bf00      	nop
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	20001ad0 	.word	0x20001ad0
 8008a00:	20001aec 	.word	0x20001aec

08008a04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8008b4c <xTaskIncrementTick+0x148>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f040 8090 	bne.w	8008b38 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a18:	4b4d      	ldr	r3, [pc, #308]	@ (8008b50 <xTaskIncrementTick+0x14c>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a20:	4a4b      	ldr	r2, [pc, #300]	@ (8008b50 <xTaskIncrementTick+0x14c>)
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d121      	bne.n	8008a70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a2c:	4b49      	ldr	r3, [pc, #292]	@ (8008b54 <xTaskIncrementTick+0x150>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00b      	beq.n	8008a4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	603b      	str	r3, [r7, #0]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <xTaskIncrementTick+0x46>
 8008a4e:	4b41      	ldr	r3, [pc, #260]	@ (8008b54 <xTaskIncrementTick+0x150>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	4b40      	ldr	r3, [pc, #256]	@ (8008b58 <xTaskIncrementTick+0x154>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a3e      	ldr	r2, [pc, #248]	@ (8008b54 <xTaskIncrementTick+0x150>)
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b58 <xTaskIncrementTick+0x154>)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	4b3e      	ldr	r3, [pc, #248]	@ (8008b5c <xTaskIncrementTick+0x158>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	4a3c      	ldr	r2, [pc, #240]	@ (8008b5c <xTaskIncrementTick+0x158>)
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	f000 fb54 	bl	8009118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a70:	4b3b      	ldr	r3, [pc, #236]	@ (8008b60 <xTaskIncrementTick+0x15c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d349      	bcc.n	8008b0e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a7a:	4b36      	ldr	r3, [pc, #216]	@ (8008b54 <xTaskIncrementTick+0x150>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d104      	bne.n	8008a8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a84:	4b36      	ldr	r3, [pc, #216]	@ (8008b60 <xTaskIncrementTick+0x15c>)
 8008a86:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8a:	601a      	str	r2, [r3, #0]
					break;
 8008a8c:	e03f      	b.n	8008b0e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a8e:	4b31      	ldr	r3, [pc, #196]	@ (8008b54 <xTaskIncrementTick+0x150>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d203      	bcs.n	8008aae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8008b60 <xTaskIncrementTick+0x15c>)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008aac:	e02f      	b.n	8008b0e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe f9c8 	bl	8006e48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3318      	adds	r3, #24
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe f9bf 	bl	8006e48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ace:	4b25      	ldr	r3, [pc, #148]	@ (8008b64 <xTaskIncrementTick+0x160>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d903      	bls.n	8008ade <xTaskIncrementTick+0xda>
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ada:	4a22      	ldr	r2, [pc, #136]	@ (8008b64 <xTaskIncrementTick+0x160>)
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4a1f      	ldr	r2, [pc, #124]	@ (8008b68 <xTaskIncrementTick+0x164>)
 8008aec:	441a      	add	r2, r3
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4619      	mov	r1, r3
 8008af4:	4610      	mov	r0, r2
 8008af6:	f7fe f94a 	bl	8006d8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008afe:	4b1b      	ldr	r3, [pc, #108]	@ (8008b6c <xTaskIncrementTick+0x168>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d3b8      	bcc.n	8008a7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b0c:	e7b5      	b.n	8008a7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b0e:	4b17      	ldr	r3, [pc, #92]	@ (8008b6c <xTaskIncrementTick+0x168>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b14:	4914      	ldr	r1, [pc, #80]	@ (8008b68 <xTaskIncrementTick+0x164>)
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	440b      	add	r3, r1
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d901      	bls.n	8008b2a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008b26:	2301      	movs	r3, #1
 8008b28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b2a:	4b11      	ldr	r3, [pc, #68]	@ (8008b70 <xTaskIncrementTick+0x16c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d007      	beq.n	8008b42 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008b32:	2301      	movs	r3, #1
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	e004      	b.n	8008b42 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b38:	4b0e      	ldr	r3, [pc, #56]	@ (8008b74 <xTaskIncrementTick+0x170>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8008b74 <xTaskIncrementTick+0x170>)
 8008b40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b42:	697b      	ldr	r3, [r7, #20]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20001af4 	.word	0x20001af4
 8008b50:	20001ad0 	.word	0x20001ad0
 8008b54:	20001a84 	.word	0x20001a84
 8008b58:	20001a88 	.word	0x20001a88
 8008b5c:	20001ae4 	.word	0x20001ae4
 8008b60:	20001aec 	.word	0x20001aec
 8008b64:	20001ad4 	.word	0x20001ad4
 8008b68:	200015fc 	.word	0x200015fc
 8008b6c:	200015f8 	.word	0x200015f8
 8008b70:	20001ae0 	.word	0x20001ae0
 8008b74:	20001adc 	.word	0x20001adc

08008b78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b7e:	4b36      	ldr	r3, [pc, #216]	@ (8008c58 <vTaskSwitchContext+0xe0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b86:	4b35      	ldr	r3, [pc, #212]	@ (8008c5c <vTaskSwitchContext+0xe4>)
 8008b88:	2201      	movs	r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b8c:	e060      	b.n	8008c50 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8008b8e:	4b33      	ldr	r3, [pc, #204]	@ (8008c5c <vTaskSwitchContext+0xe4>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008b94:	f7f8 f98b 	bl	8000eae <getRunTimeCounterValue>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4a31      	ldr	r2, [pc, #196]	@ (8008c60 <vTaskSwitchContext+0xe8>)
 8008b9c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008b9e:	4b30      	ldr	r3, [pc, #192]	@ (8008c60 <vTaskSwitchContext+0xe8>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	4b30      	ldr	r3, [pc, #192]	@ (8008c64 <vTaskSwitchContext+0xec>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d909      	bls.n	8008bbe <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008baa:	4b2f      	ldr	r3, [pc, #188]	@ (8008c68 <vTaskSwitchContext+0xf0>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8008c60 <vTaskSwitchContext+0xe8>)
 8008bb2:	6810      	ldr	r0, [r2, #0]
 8008bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c64 <vTaskSwitchContext+0xec>)
 8008bb6:	6812      	ldr	r2, [r2, #0]
 8008bb8:	1a82      	subs	r2, r0, r2
 8008bba:	440a      	add	r2, r1
 8008bbc:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8008bbe:	4b28      	ldr	r3, [pc, #160]	@ (8008c60 <vTaskSwitchContext+0xe8>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a28      	ldr	r2, [pc, #160]	@ (8008c64 <vTaskSwitchContext+0xec>)
 8008bc4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc6:	4b29      	ldr	r3, [pc, #164]	@ (8008c6c <vTaskSwitchContext+0xf4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	e011      	b.n	8008bf2 <vTaskSwitchContext+0x7a>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <vTaskSwitchContext+0x74>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	607b      	str	r3, [r7, #4]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <vTaskSwitchContext+0x70>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	491f      	ldr	r1, [pc, #124]	@ (8008c70 <vTaskSwitchContext+0xf8>)
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	440b      	add	r3, r1
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0e3      	beq.n	8008bce <vTaskSwitchContext+0x56>
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4a17      	ldr	r2, [pc, #92]	@ (8008c70 <vTaskSwitchContext+0xf8>)
 8008c12:	4413      	add	r3, r2
 8008c14:	60bb      	str	r3, [r7, #8]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	605a      	str	r2, [r3, #4]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	3308      	adds	r3, #8
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d104      	bne.n	8008c36 <vTaskSwitchContext+0xbe>
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	605a      	str	r2, [r3, #4]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c68 <vTaskSwitchContext+0xf0>)
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	4a0a      	ldr	r2, [pc, #40]	@ (8008c6c <vTaskSwitchContext+0xf4>)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c46:	4b08      	ldr	r3, [pc, #32]	@ (8008c68 <vTaskSwitchContext+0xf0>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3358      	adds	r3, #88	@ 0x58
 8008c4c:	4a09      	ldr	r2, [pc, #36]	@ (8008c74 <vTaskSwitchContext+0xfc>)
 8008c4e:	6013      	str	r3, [r2, #0]
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20001af4 	.word	0x20001af4
 8008c5c:	20001ae0 	.word	0x20001ae0
 8008c60:	20001afc 	.word	0x20001afc
 8008c64:	20001af8 	.word	0x20001af8
 8008c68:	200015f8 	.word	0x200015f8
 8008c6c:	20001ad4 	.word	0x20001ad4
 8008c70:	200015fc 	.word	0x200015fc
 8008c74:	20000018 	.word	0x20000018

08008c78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10b      	bne.n	8008ca0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	60fb      	str	r3, [r7, #12]
}
 8008c9a:	bf00      	nop
 8008c9c:	bf00      	nop
 8008c9e:	e7fd      	b.n	8008c9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ca0:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <vTaskPlaceOnEventList+0x48>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3318      	adds	r3, #24
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7fe f894 	bl	8006dd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cae:	2101      	movs	r1, #1
 8008cb0:	6838      	ldr	r0, [r7, #0]
 8008cb2:	f000 fbdf 	bl	8009474 <prvAddCurrentTaskToDelayedList>
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	200015f8 	.word	0x200015f8

08008cc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10b      	bne.n	8008cee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	617b      	str	r3, [r7, #20]
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	e7fd      	b.n	8008cea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cee:	4b0a      	ldr	r3, [pc, #40]	@ (8008d18 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3318      	adds	r3, #24
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7fe f849 	bl	8006d8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d02:	f04f 33ff 	mov.w	r3, #4294967295
 8008d06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	68b8      	ldr	r0, [r7, #8]
 8008d0c:	f000 fbb2 	bl	8009474 <prvAddCurrentTaskToDelayedList>
	}
 8008d10:	bf00      	nop
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	200015f8 	.word	0x200015f8

08008d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10b      	bne.n	8008d4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	60fb      	str	r3, [r7, #12]
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	e7fd      	b.n	8008d46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	3318      	adds	r3, #24
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe f87a 	bl	8006e48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d54:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd0 <xTaskRemoveFromEventList+0xb4>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d11f      	bne.n	8008d9c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fe f871 	bl	8006e48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd4 <xTaskRemoveFromEventList+0xb8>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d903      	bls.n	8008d7a <xTaskRemoveFromEventList+0x5e>
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d76:	4a17      	ldr	r2, [pc, #92]	@ (8008dd4 <xTaskRemoveFromEventList+0xb8>)
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4a14      	ldr	r2, [pc, #80]	@ (8008dd8 <xTaskRemoveFromEventList+0xbc>)
 8008d88:	441a      	add	r2, r3
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7fd fffc 	bl	8006d8e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8008d96:	f000 f9bf 	bl	8009118 <prvResetNextTaskUnblockTime>
 8008d9a:	e005      	b.n	8008da8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	3318      	adds	r3, #24
 8008da0:	4619      	mov	r1, r3
 8008da2:	480e      	ldr	r0, [pc, #56]	@ (8008ddc <xTaskRemoveFromEventList+0xc0>)
 8008da4:	f7fd fff3 	bl	8006d8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dac:	4b0c      	ldr	r3, [pc, #48]	@ (8008de0 <xTaskRemoveFromEventList+0xc4>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d905      	bls.n	8008dc2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008db6:	2301      	movs	r3, #1
 8008db8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dba:	4b0a      	ldr	r3, [pc, #40]	@ (8008de4 <xTaskRemoveFromEventList+0xc8>)
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	e001      	b.n	8008dc6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dc6:	697b      	ldr	r3, [r7, #20]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20001af4 	.word	0x20001af4
 8008dd4:	20001ad4 	.word	0x20001ad4
 8008dd8:	200015fc 	.word	0x200015fc
 8008ddc:	20001a8c 	.word	0x20001a8c
 8008de0:	200015f8 	.word	0x200015f8
 8008de4:	20001ae0 	.word	0x20001ae0

08008de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008df0:	4b06      	ldr	r3, [pc, #24]	@ (8008e0c <vTaskInternalSetTimeOutState+0x24>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008df8:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <vTaskInternalSetTimeOutState+0x28>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	605a      	str	r2, [r3, #4]
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	20001ae4 	.word	0x20001ae4
 8008e10:	20001ad0 	.word	0x20001ad0

08008e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10b      	bne.n	8008e3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	613b      	str	r3, [r7, #16]
}
 8008e36:	bf00      	nop
 8008e38:	bf00      	nop
 8008e3a:	e7fd      	b.n	8008e38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10b      	bne.n	8008e5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	60fb      	str	r3, [r7, #12]
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	e7fd      	b.n	8008e56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008e5a:	f7fe f94d 	bl	80070f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed4 <xTaskCheckForTimeOut+0xc0>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e76:	d102      	bne.n	8008e7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	e023      	b.n	8008ec6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	4b15      	ldr	r3, [pc, #84]	@ (8008ed8 <xTaskCheckForTimeOut+0xc4>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d007      	beq.n	8008e9a <xTaskCheckForTimeOut+0x86>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d302      	bcc.n	8008e9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e94:	2301      	movs	r3, #1
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	e015      	b.n	8008ec6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d20b      	bcs.n	8008ebc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff ff99 	bl	8008de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61fb      	str	r3, [r7, #28]
 8008eba:	e004      	b.n	8008ec6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ec6:	f7fe f949 	bl	800715c <vPortExitCritical>

	return xReturn;
 8008eca:	69fb      	ldr	r3, [r7, #28]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3720      	adds	r7, #32
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	20001ad0 	.word	0x20001ad0
 8008ed8:	20001ae4 	.word	0x20001ae4

08008edc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ee0:	4b03      	ldr	r3, [pc, #12]	@ (8008ef0 <vTaskMissedYield+0x14>)
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
}
 8008ee6:	bf00      	nop
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	20001ae0 	.word	0x20001ae0

08008ef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008efc:	f000 f8a8 	bl	8009050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f00:	4b18      	ldr	r3, [pc, #96]	@ (8008f64 <prvIdleTask+0x70>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d907      	bls.n	8008f18 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008f08:	4b17      	ldr	r3, [pc, #92]	@ (8008f68 <prvIdleTask+0x74>)
 8008f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8008f18:	f7ff fc66 	bl	80087e8 <prvGetExpectedIdleTime>
 8008f1c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b31      	cmp	r3, #49	@ 0x31
 8008f22:	d9eb      	bls.n	8008efc <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8008f24:	f7ff fc52 	bl	80087cc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8008f28:	4b10      	ldr	r3, [pc, #64]	@ (8008f6c <prvIdleTask+0x78>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	4b10      	ldr	r3, [pc, #64]	@ (8008f70 <prvIdleTask+0x7c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d20b      	bcs.n	8008f4c <prvIdleTask+0x58>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	60bb      	str	r3, [r7, #8]
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	e7fd      	b.n	8008f48 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8008f4c:	f7ff fc4c 	bl	80087e8 <prvGetExpectedIdleTime>
 8008f50:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b31      	cmp	r3, #49	@ 0x31
 8008f56:	d902      	bls.n	8008f5e <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f7fe f97f 	bl	800725c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8008f5e:	f7ff fc7b 	bl	8008858 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8008f62:	e7cb      	b.n	8008efc <prvIdleTask+0x8>
 8008f64:	200015fc 	.word	0x200015fc
 8008f68:	e000ed04 	.word	0xe000ed04
 8008f6c:	20001aec 	.word	0x20001aec
 8008f70:	20001ad0 	.word	0x20001ad0

08008f74 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8008f82:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc0 <eTaskConfirmSleepModeStatus+0x4c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	71fb      	strb	r3, [r7, #7]
 8008f8e:	e010      	b.n	8008fb2 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8008f90:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc4 <eTaskConfirmSleepModeStatus+0x50>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	71fb      	strb	r3, [r7, #7]
 8008f9c:	e009      	b.n	8008fb2 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8008f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc8 <eTaskConfirmSleepModeStatus+0x54>)
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fcc <eTaskConfirmSleepModeStatus+0x58>)
 8008fa4:	6819      	ldr	r1, [r3, #0]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	1acb      	subs	r3, r1, r3
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d101      	bne.n	8008fb2 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
	}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	20001a8c 	.word	0x20001a8c
 8008fc4:	20001ae0 	.word	0x20001ae0
 8008fc8:	20001ab8 	.word	0x20001ab8
 8008fcc:	20001acc 	.word	0x20001acc

08008fd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	607b      	str	r3, [r7, #4]
 8008fda:	e00c      	b.n	8008ff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4a12      	ldr	r2, [pc, #72]	@ (8009030 <prvInitialiseTaskLists+0x60>)
 8008fe8:	4413      	add	r3, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fd fea2 	bl	8006d34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	607b      	str	r3, [r7, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b37      	cmp	r3, #55	@ 0x37
 8008ffa:	d9ef      	bls.n	8008fdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ffc:	480d      	ldr	r0, [pc, #52]	@ (8009034 <prvInitialiseTaskLists+0x64>)
 8008ffe:	f7fd fe99 	bl	8006d34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009002:	480d      	ldr	r0, [pc, #52]	@ (8009038 <prvInitialiseTaskLists+0x68>)
 8009004:	f7fd fe96 	bl	8006d34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009008:	480c      	ldr	r0, [pc, #48]	@ (800903c <prvInitialiseTaskLists+0x6c>)
 800900a:	f7fd fe93 	bl	8006d34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800900e:	480c      	ldr	r0, [pc, #48]	@ (8009040 <prvInitialiseTaskLists+0x70>)
 8009010:	f7fd fe90 	bl	8006d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009014:	480b      	ldr	r0, [pc, #44]	@ (8009044 <prvInitialiseTaskLists+0x74>)
 8009016:	f7fd fe8d 	bl	8006d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800901a:	4b0b      	ldr	r3, [pc, #44]	@ (8009048 <prvInitialiseTaskLists+0x78>)
 800901c:	4a05      	ldr	r2, [pc, #20]	@ (8009034 <prvInitialiseTaskLists+0x64>)
 800901e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009020:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <prvInitialiseTaskLists+0x7c>)
 8009022:	4a05      	ldr	r2, [pc, #20]	@ (8009038 <prvInitialiseTaskLists+0x68>)
 8009024:	601a      	str	r2, [r3, #0]
}
 8009026:	bf00      	nop
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	200015fc 	.word	0x200015fc
 8009034:	20001a5c 	.word	0x20001a5c
 8009038:	20001a70 	.word	0x20001a70
 800903c:	20001a8c 	.word	0x20001a8c
 8009040:	20001aa0 	.word	0x20001aa0
 8009044:	20001ab8 	.word	0x20001ab8
 8009048:	20001a84 	.word	0x20001a84
 800904c:	20001a88 	.word	0x20001a88

08009050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009056:	e019      	b.n	800908c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009058:	f7fe f84e 	bl	80070f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905c:	4b10      	ldr	r3, [pc, #64]	@ (80090a0 <prvCheckTasksWaitingTermination+0x50>)
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3304      	adds	r3, #4
 8009068:	4618      	mov	r0, r3
 800906a:	f7fd feed 	bl	8006e48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800906e:	4b0d      	ldr	r3, [pc, #52]	@ (80090a4 <prvCheckTasksWaitingTermination+0x54>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3b01      	subs	r3, #1
 8009074:	4a0b      	ldr	r2, [pc, #44]	@ (80090a4 <prvCheckTasksWaitingTermination+0x54>)
 8009076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009078:	4b0b      	ldr	r3, [pc, #44]	@ (80090a8 <prvCheckTasksWaitingTermination+0x58>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3b01      	subs	r3, #1
 800907e:	4a0a      	ldr	r2, [pc, #40]	@ (80090a8 <prvCheckTasksWaitingTermination+0x58>)
 8009080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009082:	f7fe f86b 	bl	800715c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f810 	bl	80090ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800908c:	4b06      	ldr	r3, [pc, #24]	@ (80090a8 <prvCheckTasksWaitingTermination+0x58>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e1      	bne.n	8009058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20001aa0 	.word	0x20001aa0
 80090a4:	20001acc 	.word	0x20001acc
 80090a8:	20001ab4 	.word	0x20001ab4

080090ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3358      	adds	r3, #88	@ 0x58
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fdb1 	bl	8009c20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d108      	bne.n	80090da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fd fd11 	bl	8006af4 <vPortFree>
				vPortFree( pxTCB );
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7fd fd0e 	bl	8006af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090d8:	e019      	b.n	800910e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d103      	bne.n	80090ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7fd fd05 	bl	8006af4 <vPortFree>
	}
 80090ea:	e010      	b.n	800910e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d00b      	beq.n	800910e <prvDeleteTCB+0x62>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	60fb      	str	r3, [r7, #12]
}
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	e7fd      	b.n	800910a <prvDeleteTCB+0x5e>
	}
 800910e:	bf00      	nop
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800911e:	4b0c      	ldr	r3, [pc, #48]	@ (8009150 <prvResetNextTaskUnblockTime+0x38>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d104      	bne.n	8009132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009128:	4b0a      	ldr	r3, [pc, #40]	@ (8009154 <prvResetNextTaskUnblockTime+0x3c>)
 800912a:	f04f 32ff 	mov.w	r2, #4294967295
 800912e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009130:	e008      	b.n	8009144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009132:	4b07      	ldr	r3, [pc, #28]	@ (8009150 <prvResetNextTaskUnblockTime+0x38>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	4a04      	ldr	r2, [pc, #16]	@ (8009154 <prvResetNextTaskUnblockTime+0x3c>)
 8009142:	6013      	str	r3, [r2, #0]
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	20001a84 	.word	0x20001a84
 8009154:	20001aec 	.word	0x20001aec

08009158 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800915e:	4b0b      	ldr	r3, [pc, #44]	@ (800918c <xTaskGetSchedulerState+0x34>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d102      	bne.n	800916c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009166:	2301      	movs	r3, #1
 8009168:	607b      	str	r3, [r7, #4]
 800916a:	e008      	b.n	800917e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800916c:	4b08      	ldr	r3, [pc, #32]	@ (8009190 <xTaskGetSchedulerState+0x38>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d102      	bne.n	800917a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009174:	2302      	movs	r3, #2
 8009176:	607b      	str	r3, [r7, #4]
 8009178:	e001      	b.n	800917e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800917a:	2300      	movs	r3, #0
 800917c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800917e:	687b      	ldr	r3, [r7, #4]
	}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	20001ad8 	.word	0x20001ad8
 8009190:	20001af4 	.word	0x20001af4

08009194 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d051      	beq.n	800924e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009258 <xTaskPriorityInherit+0xc4>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d241      	bcs.n	800923c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	db06      	blt.n	80091ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c0:	4b25      	ldr	r3, [pc, #148]	@ (8009258 <xTaskPriorityInherit+0xc4>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	6959      	ldr	r1, [r3, #20]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4a1f      	ldr	r2, [pc, #124]	@ (800925c <xTaskPriorityInherit+0xc8>)
 80091e0:	4413      	add	r3, r2
 80091e2:	4299      	cmp	r1, r3
 80091e4:	d122      	bne.n	800922c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	3304      	adds	r3, #4
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fd fe2c 	bl	8006e48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091f0:	4b19      	ldr	r3, [pc, #100]	@ (8009258 <xTaskPriorityInherit+0xc4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fe:	4b18      	ldr	r3, [pc, #96]	@ (8009260 <xTaskPriorityInherit+0xcc>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d903      	bls.n	800920e <xTaskPriorityInherit+0x7a>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920a:	4a15      	ldr	r2, [pc, #84]	@ (8009260 <xTaskPriorityInherit+0xcc>)
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4a10      	ldr	r2, [pc, #64]	@ (800925c <xTaskPriorityInherit+0xc8>)
 800921c:	441a      	add	r2, r3
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	3304      	adds	r3, #4
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f7fd fdb2 	bl	8006d8e <vListInsertEnd>
 800922a:	e004      	b.n	8009236 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800922c:	4b0a      	ldr	r3, [pc, #40]	@ (8009258 <xTaskPriorityInherit+0xc4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009236:	2301      	movs	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	e008      	b.n	800924e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009240:	4b05      	ldr	r3, [pc, #20]	@ (8009258 <xTaskPriorityInherit+0xc4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009246:	429a      	cmp	r2, r3
 8009248:	d201      	bcs.n	800924e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800924a:	2301      	movs	r3, #1
 800924c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800924e:	68fb      	ldr	r3, [r7, #12]
	}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	200015f8 	.word	0x200015f8
 800925c:	200015fc 	.word	0x200015fc
 8009260:	20001ad4 	.word	0x20001ad4

08009264 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009270:	2300      	movs	r3, #0
 8009272:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d058      	beq.n	800932c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800927a:	4b2f      	ldr	r3, [pc, #188]	@ (8009338 <xTaskPriorityDisinherit+0xd4>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	429a      	cmp	r2, r3
 8009282:	d00b      	beq.n	800929c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	60fb      	str	r3, [r7, #12]
}
 8009296:	bf00      	nop
 8009298:	bf00      	nop
 800929a:	e7fd      	b.n	8009298 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10b      	bne.n	80092bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	60bb      	str	r3, [r7, #8]
}
 80092b6:	bf00      	nop
 80092b8:	bf00      	nop
 80092ba:	e7fd      	b.n	80092b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c0:	1e5a      	subs	r2, r3, #1
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d02c      	beq.n	800932c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d128      	bne.n	800932c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	3304      	adds	r3, #4
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fd fdb2 	bl	8006e48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092fc:	4b0f      	ldr	r3, [pc, #60]	@ (800933c <xTaskPriorityDisinherit+0xd8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d903      	bls.n	800930c <xTaskPriorityDisinherit+0xa8>
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	4a0c      	ldr	r2, [pc, #48]	@ (800933c <xTaskPriorityDisinherit+0xd8>)
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4a09      	ldr	r2, [pc, #36]	@ (8009340 <xTaskPriorityDisinherit+0xdc>)
 800931a:	441a      	add	r2, r3
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	3304      	adds	r3, #4
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7fd fd33 	bl	8006d8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009328:	2301      	movs	r3, #1
 800932a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800932c:	697b      	ldr	r3, [r7, #20]
	}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	200015f8 	.word	0x200015f8
 800933c:	20001ad4 	.word	0x20001ad4
 8009340:	200015fc 	.word	0x200015fc

08009344 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009352:	2301      	movs	r3, #1
 8009354:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d06c      	beq.n	8009436 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10b      	bne.n	800937c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	60fb      	str	r3, [r7, #12]
}
 8009376:	bf00      	nop
 8009378:	bf00      	nop
 800937a:	e7fd      	b.n	8009378 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d902      	bls.n	800938c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	61fb      	str	r3, [r7, #28]
 800938a:	e002      	b.n	8009392 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009390:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	429a      	cmp	r2, r3
 800939a:	d04c      	beq.n	8009436 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d147      	bne.n	8009436 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80093a6:	4b26      	ldr	r3, [pc, #152]	@ (8009440 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d10b      	bne.n	80093c8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	60bb      	str	r3, [r7, #8]
}
 80093c2:	bf00      	nop
 80093c4:	bf00      	nop
 80093c6:	e7fd      	b.n	80093c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	db04      	blt.n	80093e6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	6959      	ldr	r1, [r3, #20]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4a13      	ldr	r2, [pc, #76]	@ (8009444 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093f6:	4413      	add	r3, r2
 80093f8:	4299      	cmp	r1, r3
 80093fa:	d11c      	bne.n	8009436 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	3304      	adds	r3, #4
 8009400:	4618      	mov	r0, r3
 8009402:	f7fd fd21 	bl	8006e48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940a:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d903      	bls.n	800941a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009416:	4a0c      	ldr	r2, [pc, #48]	@ (8009448 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a07      	ldr	r2, [pc, #28]	@ (8009444 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009428:	441a      	add	r2, r3
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	3304      	adds	r3, #4
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f7fd fcac 	bl	8006d8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009436:	bf00      	nop
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	200015f8 	.word	0x200015f8
 8009444:	200015fc 	.word	0x200015fc
 8009448:	20001ad4 	.word	0x20001ad4

0800944c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800944c:	b480      	push	{r7}
 800944e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009450:	4b07      	ldr	r3, [pc, #28]	@ (8009470 <pvTaskIncrementMutexHeldCount+0x24>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009458:	4b05      	ldr	r3, [pc, #20]	@ (8009470 <pvTaskIncrementMutexHeldCount+0x24>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800945e:	3201      	adds	r2, #1
 8009460:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009462:	4b03      	ldr	r3, [pc, #12]	@ (8009470 <pvTaskIncrementMutexHeldCount+0x24>)
 8009464:	681b      	ldr	r3, [r3, #0]
	}
 8009466:	4618      	mov	r0, r3
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	200015f8 	.word	0x200015f8

08009474 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800947e:	4b21      	ldr	r3, [pc, #132]	@ (8009504 <prvAddCurrentTaskToDelayedList+0x90>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009484:	4b20      	ldr	r3, [pc, #128]	@ (8009508 <prvAddCurrentTaskToDelayedList+0x94>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	3304      	adds	r3, #4
 800948a:	4618      	mov	r0, r3
 800948c:	f7fd fcdc 	bl	8006e48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009496:	d10a      	bne.n	80094ae <prvAddCurrentTaskToDelayedList+0x3a>
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d007      	beq.n	80094ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800949e:	4b1a      	ldr	r3, [pc, #104]	@ (8009508 <prvAddCurrentTaskToDelayedList+0x94>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4619      	mov	r1, r3
 80094a6:	4819      	ldr	r0, [pc, #100]	@ (800950c <prvAddCurrentTaskToDelayedList+0x98>)
 80094a8:	f7fd fc71 	bl	8006d8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094ac:	e026      	b.n	80094fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4413      	add	r3, r2
 80094b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094b6:	4b14      	ldr	r3, [pc, #80]	@ (8009508 <prvAddCurrentTaskToDelayedList+0x94>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d209      	bcs.n	80094da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094c6:	4b12      	ldr	r3, [pc, #72]	@ (8009510 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009508 <prvAddCurrentTaskToDelayedList+0x94>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4619      	mov	r1, r3
 80094d2:	4610      	mov	r0, r2
 80094d4:	f7fd fc7f 	bl	8006dd6 <vListInsert>
}
 80094d8:	e010      	b.n	80094fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094da:	4b0e      	ldr	r3, [pc, #56]	@ (8009514 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <prvAddCurrentTaskToDelayedList+0x94>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3304      	adds	r3, #4
 80094e4:	4619      	mov	r1, r3
 80094e6:	4610      	mov	r0, r2
 80094e8:	f7fd fc75 	bl	8006dd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d202      	bcs.n	80094fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094f6:	4a08      	ldr	r2, [pc, #32]	@ (8009518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	6013      	str	r3, [r2, #0]
}
 80094fc:	bf00      	nop
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20001ad0 	.word	0x20001ad0
 8009508:	200015f8 	.word	0x200015f8
 800950c:	20001ab8 	.word	0x20001ab8
 8009510:	20001a88 	.word	0x20001a88
 8009514:	20001a84 	.word	0x20001a84
 8009518:	20001aec 	.word	0x20001aec

0800951c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08a      	sub	sp, #40	@ 0x28
 8009520:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009526:	f000 fb13 	bl	8009b50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800952a:	4b1d      	ldr	r3, [pc, #116]	@ (80095a0 <xTimerCreateTimerTask+0x84>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d021      	beq.n	8009576 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800953a:	1d3a      	adds	r2, r7, #4
 800953c:	f107 0108 	add.w	r1, r7, #8
 8009540:	f107 030c 	add.w	r3, r7, #12
 8009544:	4618      	mov	r0, r3
 8009546:	f7fd f9ed 	bl	8006924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	9202      	str	r2, [sp, #8]
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	2302      	movs	r3, #2
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	2300      	movs	r3, #0
 800955a:	460a      	mov	r2, r1
 800955c:	4911      	ldr	r1, [pc, #68]	@ (80095a4 <xTimerCreateTimerTask+0x88>)
 800955e:	4812      	ldr	r0, [pc, #72]	@ (80095a8 <xTimerCreateTimerTask+0x8c>)
 8009560:	f7fe fe58 	bl	8008214 <xTaskCreateStatic>
 8009564:	4603      	mov	r3, r0
 8009566:	4a11      	ldr	r2, [pc, #68]	@ (80095ac <xTimerCreateTimerTask+0x90>)
 8009568:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800956a:	4b10      	ldr	r3, [pc, #64]	@ (80095ac <xTimerCreateTimerTask+0x90>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009572:	2301      	movs	r3, #1
 8009574:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	613b      	str	r3, [r7, #16]
}
 800958e:	bf00      	nop
 8009590:	bf00      	nop
 8009592:	e7fd      	b.n	8009590 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009594:	697b      	ldr	r3, [r7, #20]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20001b30 	.word	0x20001b30
 80095a4:	0800a748 	.word	0x0800a748
 80095a8:	080096e9 	.word	0x080096e9
 80095ac:	20001b34 	.word	0x20001b34

080095b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08a      	sub	sp, #40	@ 0x28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095be:	2300      	movs	r3, #0
 80095c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10b      	bne.n	80095e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	623b      	str	r3, [r7, #32]
}
 80095da:	bf00      	nop
 80095dc:	bf00      	nop
 80095de:	e7fd      	b.n	80095dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095e0:	4b19      	ldr	r3, [pc, #100]	@ (8009648 <xTimerGenericCommand+0x98>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d02a      	beq.n	800963e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2b05      	cmp	r3, #5
 80095f8:	dc18      	bgt.n	800962c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095fa:	f7ff fdad 	bl	8009158 <xTaskGetSchedulerState>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b02      	cmp	r3, #2
 8009602:	d109      	bne.n	8009618 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009604:	4b10      	ldr	r3, [pc, #64]	@ (8009648 <xTimerGenericCommand+0x98>)
 8009606:	6818      	ldr	r0, [r3, #0]
 8009608:	f107 0110 	add.w	r1, r7, #16
 800960c:	2300      	movs	r3, #0
 800960e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009610:	f7fe f8e8 	bl	80077e4 <xQueueGenericSend>
 8009614:	6278      	str	r0, [r7, #36]	@ 0x24
 8009616:	e012      	b.n	800963e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009618:	4b0b      	ldr	r3, [pc, #44]	@ (8009648 <xTimerGenericCommand+0x98>)
 800961a:	6818      	ldr	r0, [r3, #0]
 800961c:	f107 0110 	add.w	r1, r7, #16
 8009620:	2300      	movs	r3, #0
 8009622:	2200      	movs	r2, #0
 8009624:	f7fe f8de 	bl	80077e4 <xQueueGenericSend>
 8009628:	6278      	str	r0, [r7, #36]	@ 0x24
 800962a:	e008      	b.n	800963e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800962c:	4b06      	ldr	r3, [pc, #24]	@ (8009648 <xTimerGenericCommand+0x98>)
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	f107 0110 	add.w	r1, r7, #16
 8009634:	2300      	movs	r3, #0
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	f7fe f9d6 	bl	80079e8 <xQueueGenericSendFromISR>
 800963c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009640:	4618      	mov	r0, r3
 8009642:	3728      	adds	r7, #40	@ 0x28
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20001b30 	.word	0x20001b30

0800964c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af02      	add	r7, sp, #8
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009656:	4b23      	ldr	r3, [pc, #140]	@ (80096e4 <prvProcessExpiredTimer+0x98>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	3304      	adds	r3, #4
 8009664:	4618      	mov	r0, r3
 8009666:	f7fd fbef 	bl	8006e48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009670:	f003 0304 	and.w	r3, r3, #4
 8009674:	2b00      	cmp	r3, #0
 8009676:	d023      	beq.n	80096c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	699a      	ldr	r2, [r3, #24]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	18d1      	adds	r1, r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	6978      	ldr	r0, [r7, #20]
 8009686:	f000 f8d5 	bl	8009834 <prvInsertTimerInActiveList>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d020      	beq.n	80096d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009690:	2300      	movs	r3, #0
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	2300      	movs	r3, #0
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	2100      	movs	r1, #0
 800969a:	6978      	ldr	r0, [r7, #20]
 800969c:	f7ff ff88 	bl	80095b0 <xTimerGenericCommand>
 80096a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d114      	bne.n	80096d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	60fb      	str	r3, [r7, #12]
}
 80096ba:	bf00      	nop
 80096bc:	bf00      	nop
 80096be:	e7fd      	b.n	80096bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096c6:	f023 0301 	bic.w	r3, r3, #1
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	6978      	ldr	r0, [r7, #20]
 80096d8:	4798      	blx	r3
}
 80096da:	bf00      	nop
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20001b28 	.word	0x20001b28

080096e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096f0:	f107 0308 	add.w	r3, r7, #8
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f859 	bl	80097ac <prvGetNextExpireTime>
 80096fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4619      	mov	r1, r3
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f805 	bl	8009710 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009706:	f000 f8d7 	bl	80098b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800970a:	bf00      	nop
 800970c:	e7f0      	b.n	80096f0 <prvTimerTask+0x8>
	...

08009710 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800971a:	f7ff f857 	bl	80087cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800971e:	f107 0308 	add.w	r3, r7, #8
 8009722:	4618      	mov	r0, r3
 8009724:	f000 f866 	bl	80097f4 <prvSampleTimeNow>
 8009728:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d130      	bne.n	8009792 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10a      	bne.n	800974c <prvProcessTimerOrBlockTask+0x3c>
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	429a      	cmp	r2, r3
 800973c:	d806      	bhi.n	800974c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800973e:	f7ff f88b 	bl	8008858 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009742:	68f9      	ldr	r1, [r7, #12]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff ff81 	bl	800964c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800974a:	e024      	b.n	8009796 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d008      	beq.n	8009764 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009752:	4b13      	ldr	r3, [pc, #76]	@ (80097a0 <prvProcessTimerOrBlockTask+0x90>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <prvProcessTimerOrBlockTask+0x50>
 800975c:	2301      	movs	r3, #1
 800975e:	e000      	b.n	8009762 <prvProcessTimerOrBlockTask+0x52>
 8009760:	2300      	movs	r3, #0
 8009762:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009764:	4b0f      	ldr	r3, [pc, #60]	@ (80097a4 <prvProcessTimerOrBlockTask+0x94>)
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	4619      	mov	r1, r3
 8009772:	f7fe fd1b 	bl	80081ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009776:	f7ff f86f 	bl	8008858 <xTaskResumeAll>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009780:	4b09      	ldr	r3, [pc, #36]	@ (80097a8 <prvProcessTimerOrBlockTask+0x98>)
 8009782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	f3bf 8f6f 	isb	sy
}
 8009790:	e001      	b.n	8009796 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009792:	f7ff f861 	bl	8008858 <xTaskResumeAll>
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20001b2c 	.word	0x20001b2c
 80097a4:	20001b30 	.word	0x20001b30
 80097a8:	e000ed04 	.word	0xe000ed04

080097ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097b4:	4b0e      	ldr	r3, [pc, #56]	@ (80097f0 <prvGetNextExpireTime+0x44>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <prvGetNextExpireTime+0x16>
 80097be:	2201      	movs	r2, #1
 80097c0:	e000      	b.n	80097c4 <prvGetNextExpireTime+0x18>
 80097c2:	2200      	movs	r2, #0
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d105      	bne.n	80097dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097d0:	4b07      	ldr	r3, [pc, #28]	@ (80097f0 <prvGetNextExpireTime+0x44>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	60fb      	str	r3, [r7, #12]
 80097da:	e001      	b.n	80097e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097e0:	68fb      	ldr	r3, [r7, #12]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	20001b28 	.word	0x20001b28

080097f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097fc:	f7ff f8ca 	bl	8008994 <xTaskGetTickCount>
 8009800:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009802:	4b0b      	ldr	r3, [pc, #44]	@ (8009830 <prvSampleTimeNow+0x3c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	429a      	cmp	r2, r3
 800980a:	d205      	bcs.n	8009818 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800980c:	f000 f93a 	bl	8009a84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	e002      	b.n	800981e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800981e:	4a04      	ldr	r2, [pc, #16]	@ (8009830 <prvSampleTimeNow+0x3c>)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009824:	68fb      	ldr	r3, [r7, #12]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20001b38 	.word	0x20001b38

08009834 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009842:	2300      	movs	r3, #0
 8009844:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	429a      	cmp	r2, r3
 8009858:	d812      	bhi.n	8009880 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	429a      	cmp	r2, r3
 8009866:	d302      	bcc.n	800986e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009868:	2301      	movs	r3, #1
 800986a:	617b      	str	r3, [r7, #20]
 800986c:	e01b      	b.n	80098a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800986e:	4b10      	ldr	r3, [pc, #64]	@ (80098b0 <prvInsertTimerInActiveList+0x7c>)
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3304      	adds	r3, #4
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7fd faac 	bl	8006dd6 <vListInsert>
 800987e:	e012      	b.n	80098a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	429a      	cmp	r2, r3
 8009886:	d206      	bcs.n	8009896 <prvInsertTimerInActiveList+0x62>
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d302      	bcc.n	8009896 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009890:	2301      	movs	r3, #1
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	e007      	b.n	80098a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009896:	4b07      	ldr	r3, [pc, #28]	@ (80098b4 <prvInsertTimerInActiveList+0x80>)
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3304      	adds	r3, #4
 800989e:	4619      	mov	r1, r3
 80098a0:	4610      	mov	r0, r2
 80098a2:	f7fd fa98 	bl	8006dd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098a6:	697b      	ldr	r3, [r7, #20]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20001b2c 	.word	0x20001b2c
 80098b4:	20001b28 	.word	0x20001b28

080098b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08e      	sub	sp, #56	@ 0x38
 80098bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098be:	e0ce      	b.n	8009a5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	da19      	bge.n	80098fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098c6:	1d3b      	adds	r3, r7, #4
 80098c8:	3304      	adds	r3, #4
 80098ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10b      	bne.n	80098ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	61fb      	str	r3, [r7, #28]
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	e7fd      	b.n	80098e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098f0:	6850      	ldr	r0, [r2, #4]
 80098f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098f4:	6892      	ldr	r2, [r2, #8]
 80098f6:	4611      	mov	r1, r2
 80098f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f2c0 80ae 	blt.w	8009a5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800990e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009910:	3304      	adds	r3, #4
 8009912:	4618      	mov	r0, r3
 8009914:	f7fd fa98 	bl	8006e48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009918:	463b      	mov	r3, r7
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff ff6a 	bl	80097f4 <prvSampleTimeNow>
 8009920:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b09      	cmp	r3, #9
 8009926:	f200 8097 	bhi.w	8009a58 <prvProcessReceivedCommands+0x1a0>
 800992a:	a201      	add	r2, pc, #4	@ (adr r2, 8009930 <prvProcessReceivedCommands+0x78>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	08009959 	.word	0x08009959
 8009934:	08009959 	.word	0x08009959
 8009938:	08009959 	.word	0x08009959
 800993c:	080099cf 	.word	0x080099cf
 8009940:	080099e3 	.word	0x080099e3
 8009944:	08009a2f 	.word	0x08009a2f
 8009948:	08009959 	.word	0x08009959
 800994c:	08009959 	.word	0x08009959
 8009950:	080099cf 	.word	0x080099cf
 8009954:	080099e3 	.word	0x080099e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800995e:	f043 0301 	orr.w	r3, r3, #1
 8009962:	b2da      	uxtb	r2, r3
 8009964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	18d1      	adds	r1, r2, r3
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009978:	f7ff ff5c 	bl	8009834 <prvInsertTimerInActiveList>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d06c      	beq.n	8009a5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009988:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	d061      	beq.n	8009a5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	441a      	add	r2, r3
 80099a0:	2300      	movs	r3, #0
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	2300      	movs	r3, #0
 80099a6:	2100      	movs	r1, #0
 80099a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099aa:	f7ff fe01 	bl	80095b0 <xTimerGenericCommand>
 80099ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d152      	bne.n	8009a5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	61bb      	str	r3, [r7, #24]
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099d4:	f023 0301 	bic.w	r3, r3, #1
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099e0:	e03d      	b.n	8009a5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099e8:	f043 0301 	orr.w	r3, r3, #1
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10b      	bne.n	8009a1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	617b      	str	r3, [r7, #20]
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	e7fd      	b.n	8009a16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1c:	699a      	ldr	r2, [r3, #24]
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a20:	18d1      	adds	r1, r2, r3
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a28:	f7ff ff04 	bl	8009834 <prvInsertTimerInActiveList>
					break;
 8009a2c:	e017      	b.n	8009a5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a34:	f003 0302 	and.w	r3, r3, #2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d103      	bne.n	8009a44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a3e:	f7fd f859 	bl	8006af4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a42:	e00c      	b.n	8009a5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a4a:	f023 0301 	bic.w	r3, r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a56:	e002      	b.n	8009a5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a58:	bf00      	nop
 8009a5a:	e000      	b.n	8009a5e <prvProcessReceivedCommands+0x1a6>
					break;
 8009a5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a5e:	4b08      	ldr	r3, [pc, #32]	@ (8009a80 <prvProcessReceivedCommands+0x1c8>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	1d39      	adds	r1, r7, #4
 8009a64:	2200      	movs	r2, #0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fe f85c 	bl	8007b24 <xQueueReceive>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f47f af26 	bne.w	80098c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	3730      	adds	r7, #48	@ 0x30
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20001b30 	.word	0x20001b30

08009a84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b088      	sub	sp, #32
 8009a88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a8a:	e049      	b.n	8009b20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8009b48 <prvSwitchTimerLists+0xc4>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a96:	4b2c      	ldr	r3, [pc, #176]	@ (8009b48 <prvSwitchTimerLists+0xc4>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fd f9cf 	bl	8006e48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ab8:	f003 0304 	and.w	r3, r3, #4
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d02f      	beq.n	8009b20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d90e      	bls.n	8009af0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ade:	4b1a      	ldr	r3, [pc, #104]	@ (8009b48 <prvSwitchTimerLists+0xc4>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f7fd f974 	bl	8006dd6 <vListInsert>
 8009aee:	e017      	b.n	8009b20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009af0:	2300      	movs	r3, #0
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	2100      	movs	r1, #0
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f7ff fd58 	bl	80095b0 <xTimerGenericCommand>
 8009b00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10b      	bne.n	8009b20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0c:	f383 8811 	msr	BASEPRI, r3
 8009b10:	f3bf 8f6f 	isb	sy
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	603b      	str	r3, [r7, #0]
}
 8009b1a:	bf00      	nop
 8009b1c:	bf00      	nop
 8009b1e:	e7fd      	b.n	8009b1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b20:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <prvSwitchTimerLists+0xc4>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1b0      	bne.n	8009a8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b2a:	4b07      	ldr	r3, [pc, #28]	@ (8009b48 <prvSwitchTimerLists+0xc4>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b30:	4b06      	ldr	r3, [pc, #24]	@ (8009b4c <prvSwitchTimerLists+0xc8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a04      	ldr	r2, [pc, #16]	@ (8009b48 <prvSwitchTimerLists+0xc4>)
 8009b36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b38:	4a04      	ldr	r2, [pc, #16]	@ (8009b4c <prvSwitchTimerLists+0xc8>)
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	6013      	str	r3, [r2, #0]
}
 8009b3e:	bf00      	nop
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20001b28 	.word	0x20001b28
 8009b4c:	20001b2c 	.word	0x20001b2c

08009b50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b56:	f7fd facf 	bl	80070f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b5a:	4b15      	ldr	r3, [pc, #84]	@ (8009bb0 <prvCheckForValidListAndQueue+0x60>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d120      	bne.n	8009ba4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b62:	4814      	ldr	r0, [pc, #80]	@ (8009bb4 <prvCheckForValidListAndQueue+0x64>)
 8009b64:	f7fd f8e6 	bl	8006d34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b68:	4813      	ldr	r0, [pc, #76]	@ (8009bb8 <prvCheckForValidListAndQueue+0x68>)
 8009b6a:	f7fd f8e3 	bl	8006d34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b6e:	4b13      	ldr	r3, [pc, #76]	@ (8009bbc <prvCheckForValidListAndQueue+0x6c>)
 8009b70:	4a10      	ldr	r2, [pc, #64]	@ (8009bb4 <prvCheckForValidListAndQueue+0x64>)
 8009b72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b74:	4b12      	ldr	r3, [pc, #72]	@ (8009bc0 <prvCheckForValidListAndQueue+0x70>)
 8009b76:	4a10      	ldr	r2, [pc, #64]	@ (8009bb8 <prvCheckForValidListAndQueue+0x68>)
 8009b78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	4b11      	ldr	r3, [pc, #68]	@ (8009bc4 <prvCheckForValidListAndQueue+0x74>)
 8009b80:	4a11      	ldr	r2, [pc, #68]	@ (8009bc8 <prvCheckForValidListAndQueue+0x78>)
 8009b82:	2110      	movs	r1, #16
 8009b84:	200a      	movs	r0, #10
 8009b86:	f7fd fd1f 	bl	80075c8 <xQueueGenericCreateStatic>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	4a08      	ldr	r2, [pc, #32]	@ (8009bb0 <prvCheckForValidListAndQueue+0x60>)
 8009b8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b90:	4b07      	ldr	r3, [pc, #28]	@ (8009bb0 <prvCheckForValidListAndQueue+0x60>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d005      	beq.n	8009ba4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b98:	4b05      	ldr	r3, [pc, #20]	@ (8009bb0 <prvCheckForValidListAndQueue+0x60>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	490b      	ldr	r1, [pc, #44]	@ (8009bcc <prvCheckForValidListAndQueue+0x7c>)
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fe fada 	bl	8008158 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ba4:	f7fd fada 	bl	800715c <vPortExitCritical>
}
 8009ba8:	bf00      	nop
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20001b30 	.word	0x20001b30
 8009bb4:	20001b00 	.word	0x20001b00
 8009bb8:	20001b14 	.word	0x20001b14
 8009bbc:	20001b28 	.word	0x20001b28
 8009bc0:	20001b2c 	.word	0x20001b2c
 8009bc4:	20001bdc 	.word	0x20001bdc
 8009bc8:	20001b3c 	.word	0x20001b3c
 8009bcc:	0800a750 	.word	0x0800a750

08009bd0 <siprintf>:
 8009bd0:	b40e      	push	{r1, r2, r3}
 8009bd2:	b500      	push	{lr}
 8009bd4:	b09c      	sub	sp, #112	@ 0x70
 8009bd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009bd8:	9002      	str	r0, [sp, #8]
 8009bda:	9006      	str	r0, [sp, #24]
 8009bdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009be0:	4809      	ldr	r0, [pc, #36]	@ (8009c08 <siprintf+0x38>)
 8009be2:	9107      	str	r1, [sp, #28]
 8009be4:	9104      	str	r1, [sp, #16]
 8009be6:	4909      	ldr	r1, [pc, #36]	@ (8009c0c <siprintf+0x3c>)
 8009be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bec:	9105      	str	r1, [sp, #20]
 8009bee:	6800      	ldr	r0, [r0, #0]
 8009bf0:	9301      	str	r3, [sp, #4]
 8009bf2:	a902      	add	r1, sp, #8
 8009bf4:	f000 f9f8 	bl	8009fe8 <_svfiprintf_r>
 8009bf8:	9b02      	ldr	r3, [sp, #8]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	701a      	strb	r2, [r3, #0]
 8009bfe:	b01c      	add	sp, #112	@ 0x70
 8009c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c04:	b003      	add	sp, #12
 8009c06:	4770      	bx	lr
 8009c08:	20000018 	.word	0x20000018
 8009c0c:	ffff0208 	.word	0xffff0208

08009c10 <memset>:
 8009c10:	4402      	add	r2, r0
 8009c12:	4603      	mov	r3, r0
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d100      	bne.n	8009c1a <memset+0xa>
 8009c18:	4770      	bx	lr
 8009c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1e:	e7f9      	b.n	8009c14 <memset+0x4>

08009c20 <_reclaim_reent>:
 8009c20:	4b29      	ldr	r3, [pc, #164]	@ (8009cc8 <_reclaim_reent+0xa8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4283      	cmp	r3, r0
 8009c26:	b570      	push	{r4, r5, r6, lr}
 8009c28:	4604      	mov	r4, r0
 8009c2a:	d04b      	beq.n	8009cc4 <_reclaim_reent+0xa4>
 8009c2c:	69c3      	ldr	r3, [r0, #28]
 8009c2e:	b1ab      	cbz	r3, 8009c5c <_reclaim_reent+0x3c>
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	b16b      	cbz	r3, 8009c50 <_reclaim_reent+0x30>
 8009c34:	2500      	movs	r5, #0
 8009c36:	69e3      	ldr	r3, [r4, #28]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	5959      	ldr	r1, [r3, r5]
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	d13b      	bne.n	8009cb8 <_reclaim_reent+0x98>
 8009c40:	3504      	adds	r5, #4
 8009c42:	2d80      	cmp	r5, #128	@ 0x80
 8009c44:	d1f7      	bne.n	8009c36 <_reclaim_reent+0x16>
 8009c46:	69e3      	ldr	r3, [r4, #28]
 8009c48:	4620      	mov	r0, r4
 8009c4a:	68d9      	ldr	r1, [r3, #12]
 8009c4c:	f000 f878 	bl	8009d40 <_free_r>
 8009c50:	69e3      	ldr	r3, [r4, #28]
 8009c52:	6819      	ldr	r1, [r3, #0]
 8009c54:	b111      	cbz	r1, 8009c5c <_reclaim_reent+0x3c>
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f872 	bl	8009d40 <_free_r>
 8009c5c:	6961      	ldr	r1, [r4, #20]
 8009c5e:	b111      	cbz	r1, 8009c66 <_reclaim_reent+0x46>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 f86d 	bl	8009d40 <_free_r>
 8009c66:	69e1      	ldr	r1, [r4, #28]
 8009c68:	b111      	cbz	r1, 8009c70 <_reclaim_reent+0x50>
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 f868 	bl	8009d40 <_free_r>
 8009c70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009c72:	b111      	cbz	r1, 8009c7a <_reclaim_reent+0x5a>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 f863 	bl	8009d40 <_free_r>
 8009c7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c7c:	b111      	cbz	r1, 8009c84 <_reclaim_reent+0x64>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 f85e 	bl	8009d40 <_free_r>
 8009c84:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009c86:	b111      	cbz	r1, 8009c8e <_reclaim_reent+0x6e>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 f859 	bl	8009d40 <_free_r>
 8009c8e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009c90:	b111      	cbz	r1, 8009c98 <_reclaim_reent+0x78>
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 f854 	bl	8009d40 <_free_r>
 8009c98:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009c9a:	b111      	cbz	r1, 8009ca2 <_reclaim_reent+0x82>
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 f84f 	bl	8009d40 <_free_r>
 8009ca2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009ca4:	b111      	cbz	r1, 8009cac <_reclaim_reent+0x8c>
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 f84a 	bl	8009d40 <_free_r>
 8009cac:	6a23      	ldr	r3, [r4, #32]
 8009cae:	b14b      	cbz	r3, 8009cc4 <_reclaim_reent+0xa4>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cb6:	4718      	bx	r3
 8009cb8:	680e      	ldr	r6, [r1, #0]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 f840 	bl	8009d40 <_free_r>
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	e7bb      	b.n	8009c3c <_reclaim_reent+0x1c>
 8009cc4:	bd70      	pop	{r4, r5, r6, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000018 	.word	0x20000018

08009ccc <__errno>:
 8009ccc:	4b01      	ldr	r3, [pc, #4]	@ (8009cd4 <__errno+0x8>)
 8009cce:	6818      	ldr	r0, [r3, #0]
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	20000018 	.word	0x20000018

08009cd8 <__libc_init_array>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	4d0d      	ldr	r5, [pc, #52]	@ (8009d10 <__libc_init_array+0x38>)
 8009cdc:	4c0d      	ldr	r4, [pc, #52]	@ (8009d14 <__libc_init_array+0x3c>)
 8009cde:	1b64      	subs	r4, r4, r5
 8009ce0:	10a4      	asrs	r4, r4, #2
 8009ce2:	2600      	movs	r6, #0
 8009ce4:	42a6      	cmp	r6, r4
 8009ce6:	d109      	bne.n	8009cfc <__libc_init_array+0x24>
 8009ce8:	4d0b      	ldr	r5, [pc, #44]	@ (8009d18 <__libc_init_array+0x40>)
 8009cea:	4c0c      	ldr	r4, [pc, #48]	@ (8009d1c <__libc_init_array+0x44>)
 8009cec:	f000 fcac 	bl	800a648 <_init>
 8009cf0:	1b64      	subs	r4, r4, r5
 8009cf2:	10a4      	asrs	r4, r4, #2
 8009cf4:	2600      	movs	r6, #0
 8009cf6:	42a6      	cmp	r6, r4
 8009cf8:	d105      	bne.n	8009d06 <__libc_init_array+0x2e>
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}
 8009cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d00:	4798      	blx	r3
 8009d02:	3601      	adds	r6, #1
 8009d04:	e7ee      	b.n	8009ce4 <__libc_init_array+0xc>
 8009d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d0a:	4798      	blx	r3
 8009d0c:	3601      	adds	r6, #1
 8009d0e:	e7f2      	b.n	8009cf6 <__libc_init_array+0x1e>
 8009d10:	0800a938 	.word	0x0800a938
 8009d14:	0800a938 	.word	0x0800a938
 8009d18:	0800a938 	.word	0x0800a938
 8009d1c:	0800a93c 	.word	0x0800a93c

08009d20 <__retarget_lock_acquire_recursive>:
 8009d20:	4770      	bx	lr

08009d22 <__retarget_lock_release_recursive>:
 8009d22:	4770      	bx	lr

08009d24 <memcpy>:
 8009d24:	440a      	add	r2, r1
 8009d26:	4291      	cmp	r1, r2
 8009d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d2c:	d100      	bne.n	8009d30 <memcpy+0xc>
 8009d2e:	4770      	bx	lr
 8009d30:	b510      	push	{r4, lr}
 8009d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d3a:	4291      	cmp	r1, r2
 8009d3c:	d1f9      	bne.n	8009d32 <memcpy+0xe>
 8009d3e:	bd10      	pop	{r4, pc}

08009d40 <_free_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4605      	mov	r5, r0
 8009d44:	2900      	cmp	r1, #0
 8009d46:	d041      	beq.n	8009dcc <_free_r+0x8c>
 8009d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d4c:	1f0c      	subs	r4, r1, #4
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bfb8      	it	lt
 8009d52:	18e4      	addlt	r4, r4, r3
 8009d54:	f000 f8e0 	bl	8009f18 <__malloc_lock>
 8009d58:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd0 <_free_r+0x90>)
 8009d5a:	6813      	ldr	r3, [r2, #0]
 8009d5c:	b933      	cbnz	r3, 8009d6c <_free_r+0x2c>
 8009d5e:	6063      	str	r3, [r4, #4]
 8009d60:	6014      	str	r4, [r2, #0]
 8009d62:	4628      	mov	r0, r5
 8009d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d68:	f000 b8dc 	b.w	8009f24 <__malloc_unlock>
 8009d6c:	42a3      	cmp	r3, r4
 8009d6e:	d908      	bls.n	8009d82 <_free_r+0x42>
 8009d70:	6820      	ldr	r0, [r4, #0]
 8009d72:	1821      	adds	r1, r4, r0
 8009d74:	428b      	cmp	r3, r1
 8009d76:	bf01      	itttt	eq
 8009d78:	6819      	ldreq	r1, [r3, #0]
 8009d7a:	685b      	ldreq	r3, [r3, #4]
 8009d7c:	1809      	addeq	r1, r1, r0
 8009d7e:	6021      	streq	r1, [r4, #0]
 8009d80:	e7ed      	b.n	8009d5e <_free_r+0x1e>
 8009d82:	461a      	mov	r2, r3
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	b10b      	cbz	r3, 8009d8c <_free_r+0x4c>
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	d9fa      	bls.n	8009d82 <_free_r+0x42>
 8009d8c:	6811      	ldr	r1, [r2, #0]
 8009d8e:	1850      	adds	r0, r2, r1
 8009d90:	42a0      	cmp	r0, r4
 8009d92:	d10b      	bne.n	8009dac <_free_r+0x6c>
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	4401      	add	r1, r0
 8009d98:	1850      	adds	r0, r2, r1
 8009d9a:	4283      	cmp	r3, r0
 8009d9c:	6011      	str	r1, [r2, #0]
 8009d9e:	d1e0      	bne.n	8009d62 <_free_r+0x22>
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	6053      	str	r3, [r2, #4]
 8009da6:	4408      	add	r0, r1
 8009da8:	6010      	str	r0, [r2, #0]
 8009daa:	e7da      	b.n	8009d62 <_free_r+0x22>
 8009dac:	d902      	bls.n	8009db4 <_free_r+0x74>
 8009dae:	230c      	movs	r3, #12
 8009db0:	602b      	str	r3, [r5, #0]
 8009db2:	e7d6      	b.n	8009d62 <_free_r+0x22>
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	1821      	adds	r1, r4, r0
 8009db8:	428b      	cmp	r3, r1
 8009dba:	bf04      	itt	eq
 8009dbc:	6819      	ldreq	r1, [r3, #0]
 8009dbe:	685b      	ldreq	r3, [r3, #4]
 8009dc0:	6063      	str	r3, [r4, #4]
 8009dc2:	bf04      	itt	eq
 8009dc4:	1809      	addeq	r1, r1, r0
 8009dc6:	6021      	streq	r1, [r4, #0]
 8009dc8:	6054      	str	r4, [r2, #4]
 8009dca:	e7ca      	b.n	8009d62 <_free_r+0x22>
 8009dcc:	bd38      	pop	{r3, r4, r5, pc}
 8009dce:	bf00      	nop
 8009dd0:	20001d70 	.word	0x20001d70

08009dd4 <sbrk_aligned>:
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8009e14 <sbrk_aligned+0x40>)
 8009dd8:	460c      	mov	r4, r1
 8009dda:	6831      	ldr	r1, [r6, #0]
 8009ddc:	4605      	mov	r5, r0
 8009dde:	b911      	cbnz	r1, 8009de6 <sbrk_aligned+0x12>
 8009de0:	f000 fba6 	bl	800a530 <_sbrk_r>
 8009de4:	6030      	str	r0, [r6, #0]
 8009de6:	4621      	mov	r1, r4
 8009de8:	4628      	mov	r0, r5
 8009dea:	f000 fba1 	bl	800a530 <_sbrk_r>
 8009dee:	1c43      	adds	r3, r0, #1
 8009df0:	d103      	bne.n	8009dfa <sbrk_aligned+0x26>
 8009df2:	f04f 34ff 	mov.w	r4, #4294967295
 8009df6:	4620      	mov	r0, r4
 8009df8:	bd70      	pop	{r4, r5, r6, pc}
 8009dfa:	1cc4      	adds	r4, r0, #3
 8009dfc:	f024 0403 	bic.w	r4, r4, #3
 8009e00:	42a0      	cmp	r0, r4
 8009e02:	d0f8      	beq.n	8009df6 <sbrk_aligned+0x22>
 8009e04:	1a21      	subs	r1, r4, r0
 8009e06:	4628      	mov	r0, r5
 8009e08:	f000 fb92 	bl	800a530 <_sbrk_r>
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d1f2      	bne.n	8009df6 <sbrk_aligned+0x22>
 8009e10:	e7ef      	b.n	8009df2 <sbrk_aligned+0x1e>
 8009e12:	bf00      	nop
 8009e14:	20001d6c 	.word	0x20001d6c

08009e18 <_malloc_r>:
 8009e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e1c:	1ccd      	adds	r5, r1, #3
 8009e1e:	f025 0503 	bic.w	r5, r5, #3
 8009e22:	3508      	adds	r5, #8
 8009e24:	2d0c      	cmp	r5, #12
 8009e26:	bf38      	it	cc
 8009e28:	250c      	movcc	r5, #12
 8009e2a:	2d00      	cmp	r5, #0
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	db01      	blt.n	8009e34 <_malloc_r+0x1c>
 8009e30:	42a9      	cmp	r1, r5
 8009e32:	d904      	bls.n	8009e3e <_malloc_r+0x26>
 8009e34:	230c      	movs	r3, #12
 8009e36:	6033      	str	r3, [r6, #0]
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f14 <_malloc_r+0xfc>
 8009e42:	f000 f869 	bl	8009f18 <__malloc_lock>
 8009e46:	f8d8 3000 	ldr.w	r3, [r8]
 8009e4a:	461c      	mov	r4, r3
 8009e4c:	bb44      	cbnz	r4, 8009ea0 <_malloc_r+0x88>
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7ff ffbf 	bl	8009dd4 <sbrk_aligned>
 8009e56:	1c43      	adds	r3, r0, #1
 8009e58:	4604      	mov	r4, r0
 8009e5a:	d158      	bne.n	8009f0e <_malloc_r+0xf6>
 8009e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8009e60:	4627      	mov	r7, r4
 8009e62:	2f00      	cmp	r7, #0
 8009e64:	d143      	bne.n	8009eee <_malloc_r+0xd6>
 8009e66:	2c00      	cmp	r4, #0
 8009e68:	d04b      	beq.n	8009f02 <_malloc_r+0xea>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	4630      	mov	r0, r6
 8009e70:	eb04 0903 	add.w	r9, r4, r3
 8009e74:	f000 fb5c 	bl	800a530 <_sbrk_r>
 8009e78:	4581      	cmp	r9, r0
 8009e7a:	d142      	bne.n	8009f02 <_malloc_r+0xea>
 8009e7c:	6821      	ldr	r1, [r4, #0]
 8009e7e:	1a6d      	subs	r5, r5, r1
 8009e80:	4629      	mov	r1, r5
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff ffa6 	bl	8009dd4 <sbrk_aligned>
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d03a      	beq.n	8009f02 <_malloc_r+0xea>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	442b      	add	r3, r5
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	f8d8 3000 	ldr.w	r3, [r8]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	bb62      	cbnz	r2, 8009ef4 <_malloc_r+0xdc>
 8009e9a:	f8c8 7000 	str.w	r7, [r8]
 8009e9e:	e00f      	b.n	8009ec0 <_malloc_r+0xa8>
 8009ea0:	6822      	ldr	r2, [r4, #0]
 8009ea2:	1b52      	subs	r2, r2, r5
 8009ea4:	d420      	bmi.n	8009ee8 <_malloc_r+0xd0>
 8009ea6:	2a0b      	cmp	r2, #11
 8009ea8:	d917      	bls.n	8009eda <_malloc_r+0xc2>
 8009eaa:	1961      	adds	r1, r4, r5
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	6025      	str	r5, [r4, #0]
 8009eb0:	bf18      	it	ne
 8009eb2:	6059      	strne	r1, [r3, #4]
 8009eb4:	6863      	ldr	r3, [r4, #4]
 8009eb6:	bf08      	it	eq
 8009eb8:	f8c8 1000 	streq.w	r1, [r8]
 8009ebc:	5162      	str	r2, [r4, r5]
 8009ebe:	604b      	str	r3, [r1, #4]
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f000 f82f 	bl	8009f24 <__malloc_unlock>
 8009ec6:	f104 000b 	add.w	r0, r4, #11
 8009eca:	1d23      	adds	r3, r4, #4
 8009ecc:	f020 0007 	bic.w	r0, r0, #7
 8009ed0:	1ac2      	subs	r2, r0, r3
 8009ed2:	bf1c      	itt	ne
 8009ed4:	1a1b      	subne	r3, r3, r0
 8009ed6:	50a3      	strne	r3, [r4, r2]
 8009ed8:	e7af      	b.n	8009e3a <_malloc_r+0x22>
 8009eda:	6862      	ldr	r2, [r4, #4]
 8009edc:	42a3      	cmp	r3, r4
 8009ede:	bf0c      	ite	eq
 8009ee0:	f8c8 2000 	streq.w	r2, [r8]
 8009ee4:	605a      	strne	r2, [r3, #4]
 8009ee6:	e7eb      	b.n	8009ec0 <_malloc_r+0xa8>
 8009ee8:	4623      	mov	r3, r4
 8009eea:	6864      	ldr	r4, [r4, #4]
 8009eec:	e7ae      	b.n	8009e4c <_malloc_r+0x34>
 8009eee:	463c      	mov	r4, r7
 8009ef0:	687f      	ldr	r7, [r7, #4]
 8009ef2:	e7b6      	b.n	8009e62 <_malloc_r+0x4a>
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	d1fb      	bne.n	8009ef4 <_malloc_r+0xdc>
 8009efc:	2300      	movs	r3, #0
 8009efe:	6053      	str	r3, [r2, #4]
 8009f00:	e7de      	b.n	8009ec0 <_malloc_r+0xa8>
 8009f02:	230c      	movs	r3, #12
 8009f04:	6033      	str	r3, [r6, #0]
 8009f06:	4630      	mov	r0, r6
 8009f08:	f000 f80c 	bl	8009f24 <__malloc_unlock>
 8009f0c:	e794      	b.n	8009e38 <_malloc_r+0x20>
 8009f0e:	6005      	str	r5, [r0, #0]
 8009f10:	e7d6      	b.n	8009ec0 <_malloc_r+0xa8>
 8009f12:	bf00      	nop
 8009f14:	20001d70 	.word	0x20001d70

08009f18 <__malloc_lock>:
 8009f18:	4801      	ldr	r0, [pc, #4]	@ (8009f20 <__malloc_lock+0x8>)
 8009f1a:	f7ff bf01 	b.w	8009d20 <__retarget_lock_acquire_recursive>
 8009f1e:	bf00      	nop
 8009f20:	20001d68 	.word	0x20001d68

08009f24 <__malloc_unlock>:
 8009f24:	4801      	ldr	r0, [pc, #4]	@ (8009f2c <__malloc_unlock+0x8>)
 8009f26:	f7ff befc 	b.w	8009d22 <__retarget_lock_release_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	20001d68 	.word	0x20001d68

08009f30 <__ssputs_r>:
 8009f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f34:	688e      	ldr	r6, [r1, #8]
 8009f36:	461f      	mov	r7, r3
 8009f38:	42be      	cmp	r6, r7
 8009f3a:	680b      	ldr	r3, [r1, #0]
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	460c      	mov	r4, r1
 8009f40:	4690      	mov	r8, r2
 8009f42:	d82d      	bhi.n	8009fa0 <__ssputs_r+0x70>
 8009f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f4c:	d026      	beq.n	8009f9c <__ssputs_r+0x6c>
 8009f4e:	6965      	ldr	r5, [r4, #20]
 8009f50:	6909      	ldr	r1, [r1, #16]
 8009f52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f56:	eba3 0901 	sub.w	r9, r3, r1
 8009f5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f5e:	1c7b      	adds	r3, r7, #1
 8009f60:	444b      	add	r3, r9
 8009f62:	106d      	asrs	r5, r5, #1
 8009f64:	429d      	cmp	r5, r3
 8009f66:	bf38      	it	cc
 8009f68:	461d      	movcc	r5, r3
 8009f6a:	0553      	lsls	r3, r2, #21
 8009f6c:	d527      	bpl.n	8009fbe <__ssputs_r+0x8e>
 8009f6e:	4629      	mov	r1, r5
 8009f70:	f7ff ff52 	bl	8009e18 <_malloc_r>
 8009f74:	4606      	mov	r6, r0
 8009f76:	b360      	cbz	r0, 8009fd2 <__ssputs_r+0xa2>
 8009f78:	6921      	ldr	r1, [r4, #16]
 8009f7a:	464a      	mov	r2, r9
 8009f7c:	f7ff fed2 	bl	8009d24 <memcpy>
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f8a:	81a3      	strh	r3, [r4, #12]
 8009f8c:	6126      	str	r6, [r4, #16]
 8009f8e:	6165      	str	r5, [r4, #20]
 8009f90:	444e      	add	r6, r9
 8009f92:	eba5 0509 	sub.w	r5, r5, r9
 8009f96:	6026      	str	r6, [r4, #0]
 8009f98:	60a5      	str	r5, [r4, #8]
 8009f9a:	463e      	mov	r6, r7
 8009f9c:	42be      	cmp	r6, r7
 8009f9e:	d900      	bls.n	8009fa2 <__ssputs_r+0x72>
 8009fa0:	463e      	mov	r6, r7
 8009fa2:	6820      	ldr	r0, [r4, #0]
 8009fa4:	4632      	mov	r2, r6
 8009fa6:	4641      	mov	r1, r8
 8009fa8:	f000 faa8 	bl	800a4fc <memmove>
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	1b9b      	subs	r3, r3, r6
 8009fb0:	60a3      	str	r3, [r4, #8]
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	4433      	add	r3, r6
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	2000      	movs	r0, #0
 8009fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	f000 fac6 	bl	800a550 <_realloc_r>
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d1e0      	bne.n	8009f8c <__ssputs_r+0x5c>
 8009fca:	6921      	ldr	r1, [r4, #16]
 8009fcc:	4650      	mov	r0, sl
 8009fce:	f7ff feb7 	bl	8009d40 <_free_r>
 8009fd2:	230c      	movs	r3, #12
 8009fd4:	f8ca 3000 	str.w	r3, [sl]
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	e7e9      	b.n	8009fba <__ssputs_r+0x8a>
	...

08009fe8 <_svfiprintf_r>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	4698      	mov	r8, r3
 8009fee:	898b      	ldrh	r3, [r1, #12]
 8009ff0:	061b      	lsls	r3, r3, #24
 8009ff2:	b09d      	sub	sp, #116	@ 0x74
 8009ff4:	4607      	mov	r7, r0
 8009ff6:	460d      	mov	r5, r1
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	d510      	bpl.n	800a01e <_svfiprintf_r+0x36>
 8009ffc:	690b      	ldr	r3, [r1, #16]
 8009ffe:	b973      	cbnz	r3, 800a01e <_svfiprintf_r+0x36>
 800a000:	2140      	movs	r1, #64	@ 0x40
 800a002:	f7ff ff09 	bl	8009e18 <_malloc_r>
 800a006:	6028      	str	r0, [r5, #0]
 800a008:	6128      	str	r0, [r5, #16]
 800a00a:	b930      	cbnz	r0, 800a01a <_svfiprintf_r+0x32>
 800a00c:	230c      	movs	r3, #12
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	b01d      	add	sp, #116	@ 0x74
 800a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01a:	2340      	movs	r3, #64	@ 0x40
 800a01c:	616b      	str	r3, [r5, #20]
 800a01e:	2300      	movs	r3, #0
 800a020:	9309      	str	r3, [sp, #36]	@ 0x24
 800a022:	2320      	movs	r3, #32
 800a024:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a028:	f8cd 800c 	str.w	r8, [sp, #12]
 800a02c:	2330      	movs	r3, #48	@ 0x30
 800a02e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a1cc <_svfiprintf_r+0x1e4>
 800a032:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a036:	f04f 0901 	mov.w	r9, #1
 800a03a:	4623      	mov	r3, r4
 800a03c:	469a      	mov	sl, r3
 800a03e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a042:	b10a      	cbz	r2, 800a048 <_svfiprintf_r+0x60>
 800a044:	2a25      	cmp	r2, #37	@ 0x25
 800a046:	d1f9      	bne.n	800a03c <_svfiprintf_r+0x54>
 800a048:	ebba 0b04 	subs.w	fp, sl, r4
 800a04c:	d00b      	beq.n	800a066 <_svfiprintf_r+0x7e>
 800a04e:	465b      	mov	r3, fp
 800a050:	4622      	mov	r2, r4
 800a052:	4629      	mov	r1, r5
 800a054:	4638      	mov	r0, r7
 800a056:	f7ff ff6b 	bl	8009f30 <__ssputs_r>
 800a05a:	3001      	adds	r0, #1
 800a05c:	f000 80a7 	beq.w	800a1ae <_svfiprintf_r+0x1c6>
 800a060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a062:	445a      	add	r2, fp
 800a064:	9209      	str	r2, [sp, #36]	@ 0x24
 800a066:	f89a 3000 	ldrb.w	r3, [sl]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 809f 	beq.w	800a1ae <_svfiprintf_r+0x1c6>
 800a070:	2300      	movs	r3, #0
 800a072:	f04f 32ff 	mov.w	r2, #4294967295
 800a076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a07a:	f10a 0a01 	add.w	sl, sl, #1
 800a07e:	9304      	str	r3, [sp, #16]
 800a080:	9307      	str	r3, [sp, #28]
 800a082:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a086:	931a      	str	r3, [sp, #104]	@ 0x68
 800a088:	4654      	mov	r4, sl
 800a08a:	2205      	movs	r2, #5
 800a08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a090:	484e      	ldr	r0, [pc, #312]	@ (800a1cc <_svfiprintf_r+0x1e4>)
 800a092:	f7f6 f89d 	bl	80001d0 <memchr>
 800a096:	9a04      	ldr	r2, [sp, #16]
 800a098:	b9d8      	cbnz	r0, 800a0d2 <_svfiprintf_r+0xea>
 800a09a:	06d0      	lsls	r0, r2, #27
 800a09c:	bf44      	itt	mi
 800a09e:	2320      	movmi	r3, #32
 800a0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0a4:	0711      	lsls	r1, r2, #28
 800a0a6:	bf44      	itt	mi
 800a0a8:	232b      	movmi	r3, #43	@ 0x2b
 800a0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0b4:	d015      	beq.n	800a0e2 <_svfiprintf_r+0xfa>
 800a0b6:	9a07      	ldr	r2, [sp, #28]
 800a0b8:	4654      	mov	r4, sl
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f04f 0c0a 	mov.w	ip, #10
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c6:	3b30      	subs	r3, #48	@ 0x30
 800a0c8:	2b09      	cmp	r3, #9
 800a0ca:	d94b      	bls.n	800a164 <_svfiprintf_r+0x17c>
 800a0cc:	b1b0      	cbz	r0, 800a0fc <_svfiprintf_r+0x114>
 800a0ce:	9207      	str	r2, [sp, #28]
 800a0d0:	e014      	b.n	800a0fc <_svfiprintf_r+0x114>
 800a0d2:	eba0 0308 	sub.w	r3, r0, r8
 800a0d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	46a2      	mov	sl, r4
 800a0e0:	e7d2      	b.n	800a088 <_svfiprintf_r+0xa0>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	1d19      	adds	r1, r3, #4
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	9103      	str	r1, [sp, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	bfbb      	ittet	lt
 800a0ee:	425b      	neglt	r3, r3
 800a0f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a0f4:	9307      	strge	r3, [sp, #28]
 800a0f6:	9307      	strlt	r3, [sp, #28]
 800a0f8:	bfb8      	it	lt
 800a0fa:	9204      	strlt	r2, [sp, #16]
 800a0fc:	7823      	ldrb	r3, [r4, #0]
 800a0fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800a100:	d10a      	bne.n	800a118 <_svfiprintf_r+0x130>
 800a102:	7863      	ldrb	r3, [r4, #1]
 800a104:	2b2a      	cmp	r3, #42	@ 0x2a
 800a106:	d132      	bne.n	800a16e <_svfiprintf_r+0x186>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	1d1a      	adds	r2, r3, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	9203      	str	r2, [sp, #12]
 800a110:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a114:	3402      	adds	r4, #2
 800a116:	9305      	str	r3, [sp, #20]
 800a118:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a1dc <_svfiprintf_r+0x1f4>
 800a11c:	7821      	ldrb	r1, [r4, #0]
 800a11e:	2203      	movs	r2, #3
 800a120:	4650      	mov	r0, sl
 800a122:	f7f6 f855 	bl	80001d0 <memchr>
 800a126:	b138      	cbz	r0, 800a138 <_svfiprintf_r+0x150>
 800a128:	9b04      	ldr	r3, [sp, #16]
 800a12a:	eba0 000a 	sub.w	r0, r0, sl
 800a12e:	2240      	movs	r2, #64	@ 0x40
 800a130:	4082      	lsls	r2, r0
 800a132:	4313      	orrs	r3, r2
 800a134:	3401      	adds	r4, #1
 800a136:	9304      	str	r3, [sp, #16]
 800a138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a13c:	4824      	ldr	r0, [pc, #144]	@ (800a1d0 <_svfiprintf_r+0x1e8>)
 800a13e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a142:	2206      	movs	r2, #6
 800a144:	f7f6 f844 	bl	80001d0 <memchr>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d036      	beq.n	800a1ba <_svfiprintf_r+0x1d2>
 800a14c:	4b21      	ldr	r3, [pc, #132]	@ (800a1d4 <_svfiprintf_r+0x1ec>)
 800a14e:	bb1b      	cbnz	r3, 800a198 <_svfiprintf_r+0x1b0>
 800a150:	9b03      	ldr	r3, [sp, #12]
 800a152:	3307      	adds	r3, #7
 800a154:	f023 0307 	bic.w	r3, r3, #7
 800a158:	3308      	adds	r3, #8
 800a15a:	9303      	str	r3, [sp, #12]
 800a15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a15e:	4433      	add	r3, r6
 800a160:	9309      	str	r3, [sp, #36]	@ 0x24
 800a162:	e76a      	b.n	800a03a <_svfiprintf_r+0x52>
 800a164:	fb0c 3202 	mla	r2, ip, r2, r3
 800a168:	460c      	mov	r4, r1
 800a16a:	2001      	movs	r0, #1
 800a16c:	e7a8      	b.n	800a0c0 <_svfiprintf_r+0xd8>
 800a16e:	2300      	movs	r3, #0
 800a170:	3401      	adds	r4, #1
 800a172:	9305      	str	r3, [sp, #20]
 800a174:	4619      	mov	r1, r3
 800a176:	f04f 0c0a 	mov.w	ip, #10
 800a17a:	4620      	mov	r0, r4
 800a17c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a180:	3a30      	subs	r2, #48	@ 0x30
 800a182:	2a09      	cmp	r2, #9
 800a184:	d903      	bls.n	800a18e <_svfiprintf_r+0x1a6>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0c6      	beq.n	800a118 <_svfiprintf_r+0x130>
 800a18a:	9105      	str	r1, [sp, #20]
 800a18c:	e7c4      	b.n	800a118 <_svfiprintf_r+0x130>
 800a18e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a192:	4604      	mov	r4, r0
 800a194:	2301      	movs	r3, #1
 800a196:	e7f0      	b.n	800a17a <_svfiprintf_r+0x192>
 800a198:	ab03      	add	r3, sp, #12
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	462a      	mov	r2, r5
 800a19e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d8 <_svfiprintf_r+0x1f0>)
 800a1a0:	a904      	add	r1, sp, #16
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	f3af 8000 	nop.w
 800a1a8:	1c42      	adds	r2, r0, #1
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	d1d6      	bne.n	800a15c <_svfiprintf_r+0x174>
 800a1ae:	89ab      	ldrh	r3, [r5, #12]
 800a1b0:	065b      	lsls	r3, r3, #25
 800a1b2:	f53f af2d 	bmi.w	800a010 <_svfiprintf_r+0x28>
 800a1b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1b8:	e72c      	b.n	800a014 <_svfiprintf_r+0x2c>
 800a1ba:	ab03      	add	r3, sp, #12
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	462a      	mov	r2, r5
 800a1c0:	4b05      	ldr	r3, [pc, #20]	@ (800a1d8 <_svfiprintf_r+0x1f0>)
 800a1c2:	a904      	add	r1, sp, #16
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	f000 f879 	bl	800a2bc <_printf_i>
 800a1ca:	e7ed      	b.n	800a1a8 <_svfiprintf_r+0x1c0>
 800a1cc:	0800a8fc 	.word	0x0800a8fc
 800a1d0:	0800a906 	.word	0x0800a906
 800a1d4:	00000000 	.word	0x00000000
 800a1d8:	08009f31 	.word	0x08009f31
 800a1dc:	0800a902 	.word	0x0800a902

0800a1e0 <_printf_common>:
 800a1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	4616      	mov	r6, r2
 800a1e6:	4698      	mov	r8, r3
 800a1e8:	688a      	ldr	r2, [r1, #8]
 800a1ea:	690b      	ldr	r3, [r1, #16]
 800a1ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	bfb8      	it	lt
 800a1f4:	4613      	movlt	r3, r2
 800a1f6:	6033      	str	r3, [r6, #0]
 800a1f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1fc:	4607      	mov	r7, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	b10a      	cbz	r2, 800a206 <_printf_common+0x26>
 800a202:	3301      	adds	r3, #1
 800a204:	6033      	str	r3, [r6, #0]
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	0699      	lsls	r1, r3, #26
 800a20a:	bf42      	ittt	mi
 800a20c:	6833      	ldrmi	r3, [r6, #0]
 800a20e:	3302      	addmi	r3, #2
 800a210:	6033      	strmi	r3, [r6, #0]
 800a212:	6825      	ldr	r5, [r4, #0]
 800a214:	f015 0506 	ands.w	r5, r5, #6
 800a218:	d106      	bne.n	800a228 <_printf_common+0x48>
 800a21a:	f104 0a19 	add.w	sl, r4, #25
 800a21e:	68e3      	ldr	r3, [r4, #12]
 800a220:	6832      	ldr	r2, [r6, #0]
 800a222:	1a9b      	subs	r3, r3, r2
 800a224:	42ab      	cmp	r3, r5
 800a226:	dc26      	bgt.n	800a276 <_printf_common+0x96>
 800a228:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	3b00      	subs	r3, #0
 800a230:	bf18      	it	ne
 800a232:	2301      	movne	r3, #1
 800a234:	0692      	lsls	r2, r2, #26
 800a236:	d42b      	bmi.n	800a290 <_printf_common+0xb0>
 800a238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a23c:	4641      	mov	r1, r8
 800a23e:	4638      	mov	r0, r7
 800a240:	47c8      	blx	r9
 800a242:	3001      	adds	r0, #1
 800a244:	d01e      	beq.n	800a284 <_printf_common+0xa4>
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	6922      	ldr	r2, [r4, #16]
 800a24a:	f003 0306 	and.w	r3, r3, #6
 800a24e:	2b04      	cmp	r3, #4
 800a250:	bf02      	ittt	eq
 800a252:	68e5      	ldreq	r5, [r4, #12]
 800a254:	6833      	ldreq	r3, [r6, #0]
 800a256:	1aed      	subeq	r5, r5, r3
 800a258:	68a3      	ldr	r3, [r4, #8]
 800a25a:	bf0c      	ite	eq
 800a25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a260:	2500      	movne	r5, #0
 800a262:	4293      	cmp	r3, r2
 800a264:	bfc4      	itt	gt
 800a266:	1a9b      	subgt	r3, r3, r2
 800a268:	18ed      	addgt	r5, r5, r3
 800a26a:	2600      	movs	r6, #0
 800a26c:	341a      	adds	r4, #26
 800a26e:	42b5      	cmp	r5, r6
 800a270:	d11a      	bne.n	800a2a8 <_printf_common+0xc8>
 800a272:	2000      	movs	r0, #0
 800a274:	e008      	b.n	800a288 <_printf_common+0xa8>
 800a276:	2301      	movs	r3, #1
 800a278:	4652      	mov	r2, sl
 800a27a:	4641      	mov	r1, r8
 800a27c:	4638      	mov	r0, r7
 800a27e:	47c8      	blx	r9
 800a280:	3001      	adds	r0, #1
 800a282:	d103      	bne.n	800a28c <_printf_common+0xac>
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28c:	3501      	adds	r5, #1
 800a28e:	e7c6      	b.n	800a21e <_printf_common+0x3e>
 800a290:	18e1      	adds	r1, r4, r3
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	2030      	movs	r0, #48	@ 0x30
 800a296:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a29a:	4422      	add	r2, r4
 800a29c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2a4:	3302      	adds	r3, #2
 800a2a6:	e7c7      	b.n	800a238 <_printf_common+0x58>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	4641      	mov	r1, r8
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	47c8      	blx	r9
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	d0e6      	beq.n	800a284 <_printf_common+0xa4>
 800a2b6:	3601      	adds	r6, #1
 800a2b8:	e7d9      	b.n	800a26e <_printf_common+0x8e>
	...

0800a2bc <_printf_i>:
 800a2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c0:	7e0f      	ldrb	r7, [r1, #24]
 800a2c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2c4:	2f78      	cmp	r7, #120	@ 0x78
 800a2c6:	4691      	mov	r9, r2
 800a2c8:	4680      	mov	r8, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	469a      	mov	sl, r3
 800a2ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2d2:	d807      	bhi.n	800a2e4 <_printf_i+0x28>
 800a2d4:	2f62      	cmp	r7, #98	@ 0x62
 800a2d6:	d80a      	bhi.n	800a2ee <_printf_i+0x32>
 800a2d8:	2f00      	cmp	r7, #0
 800a2da:	f000 80d2 	beq.w	800a482 <_printf_i+0x1c6>
 800a2de:	2f58      	cmp	r7, #88	@ 0x58
 800a2e0:	f000 80b9 	beq.w	800a456 <_printf_i+0x19a>
 800a2e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2ec:	e03a      	b.n	800a364 <_printf_i+0xa8>
 800a2ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2f2:	2b15      	cmp	r3, #21
 800a2f4:	d8f6      	bhi.n	800a2e4 <_printf_i+0x28>
 800a2f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a2fc <_printf_i+0x40>)
 800a2f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2fc:	0800a355 	.word	0x0800a355
 800a300:	0800a369 	.word	0x0800a369
 800a304:	0800a2e5 	.word	0x0800a2e5
 800a308:	0800a2e5 	.word	0x0800a2e5
 800a30c:	0800a2e5 	.word	0x0800a2e5
 800a310:	0800a2e5 	.word	0x0800a2e5
 800a314:	0800a369 	.word	0x0800a369
 800a318:	0800a2e5 	.word	0x0800a2e5
 800a31c:	0800a2e5 	.word	0x0800a2e5
 800a320:	0800a2e5 	.word	0x0800a2e5
 800a324:	0800a2e5 	.word	0x0800a2e5
 800a328:	0800a469 	.word	0x0800a469
 800a32c:	0800a393 	.word	0x0800a393
 800a330:	0800a423 	.word	0x0800a423
 800a334:	0800a2e5 	.word	0x0800a2e5
 800a338:	0800a2e5 	.word	0x0800a2e5
 800a33c:	0800a48b 	.word	0x0800a48b
 800a340:	0800a2e5 	.word	0x0800a2e5
 800a344:	0800a393 	.word	0x0800a393
 800a348:	0800a2e5 	.word	0x0800a2e5
 800a34c:	0800a2e5 	.word	0x0800a2e5
 800a350:	0800a42b 	.word	0x0800a42b
 800a354:	6833      	ldr	r3, [r6, #0]
 800a356:	1d1a      	adds	r2, r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6032      	str	r2, [r6, #0]
 800a35c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a364:	2301      	movs	r3, #1
 800a366:	e09d      	b.n	800a4a4 <_printf_i+0x1e8>
 800a368:	6833      	ldr	r3, [r6, #0]
 800a36a:	6820      	ldr	r0, [r4, #0]
 800a36c:	1d19      	adds	r1, r3, #4
 800a36e:	6031      	str	r1, [r6, #0]
 800a370:	0606      	lsls	r6, r0, #24
 800a372:	d501      	bpl.n	800a378 <_printf_i+0xbc>
 800a374:	681d      	ldr	r5, [r3, #0]
 800a376:	e003      	b.n	800a380 <_printf_i+0xc4>
 800a378:	0645      	lsls	r5, r0, #25
 800a37a:	d5fb      	bpl.n	800a374 <_printf_i+0xb8>
 800a37c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a380:	2d00      	cmp	r5, #0
 800a382:	da03      	bge.n	800a38c <_printf_i+0xd0>
 800a384:	232d      	movs	r3, #45	@ 0x2d
 800a386:	426d      	negs	r5, r5
 800a388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a38c:	4859      	ldr	r0, [pc, #356]	@ (800a4f4 <_printf_i+0x238>)
 800a38e:	230a      	movs	r3, #10
 800a390:	e011      	b.n	800a3b6 <_printf_i+0xfa>
 800a392:	6821      	ldr	r1, [r4, #0]
 800a394:	6833      	ldr	r3, [r6, #0]
 800a396:	0608      	lsls	r0, r1, #24
 800a398:	f853 5b04 	ldr.w	r5, [r3], #4
 800a39c:	d402      	bmi.n	800a3a4 <_printf_i+0xe8>
 800a39e:	0649      	lsls	r1, r1, #25
 800a3a0:	bf48      	it	mi
 800a3a2:	b2ad      	uxthmi	r5, r5
 800a3a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3a6:	4853      	ldr	r0, [pc, #332]	@ (800a4f4 <_printf_i+0x238>)
 800a3a8:	6033      	str	r3, [r6, #0]
 800a3aa:	bf14      	ite	ne
 800a3ac:	230a      	movne	r3, #10
 800a3ae:	2308      	moveq	r3, #8
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3b6:	6866      	ldr	r6, [r4, #4]
 800a3b8:	60a6      	str	r6, [r4, #8]
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	bfa2      	ittt	ge
 800a3be:	6821      	ldrge	r1, [r4, #0]
 800a3c0:	f021 0104 	bicge.w	r1, r1, #4
 800a3c4:	6021      	strge	r1, [r4, #0]
 800a3c6:	b90d      	cbnz	r5, 800a3cc <_printf_i+0x110>
 800a3c8:	2e00      	cmp	r6, #0
 800a3ca:	d04b      	beq.n	800a464 <_printf_i+0x1a8>
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a3d6:	5dc7      	ldrb	r7, [r0, r7]
 800a3d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3dc:	462f      	mov	r7, r5
 800a3de:	42bb      	cmp	r3, r7
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	d9f4      	bls.n	800a3ce <_printf_i+0x112>
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d10b      	bne.n	800a400 <_printf_i+0x144>
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	07df      	lsls	r7, r3, #31
 800a3ec:	d508      	bpl.n	800a400 <_printf_i+0x144>
 800a3ee:	6923      	ldr	r3, [r4, #16]
 800a3f0:	6861      	ldr	r1, [r4, #4]
 800a3f2:	4299      	cmp	r1, r3
 800a3f4:	bfde      	ittt	le
 800a3f6:	2330      	movle	r3, #48	@ 0x30
 800a3f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a400:	1b92      	subs	r2, r2, r6
 800a402:	6122      	str	r2, [r4, #16]
 800a404:	f8cd a000 	str.w	sl, [sp]
 800a408:	464b      	mov	r3, r9
 800a40a:	aa03      	add	r2, sp, #12
 800a40c:	4621      	mov	r1, r4
 800a40e:	4640      	mov	r0, r8
 800a410:	f7ff fee6 	bl	800a1e0 <_printf_common>
 800a414:	3001      	adds	r0, #1
 800a416:	d14a      	bne.n	800a4ae <_printf_i+0x1f2>
 800a418:	f04f 30ff 	mov.w	r0, #4294967295
 800a41c:	b004      	add	sp, #16
 800a41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	f043 0320 	orr.w	r3, r3, #32
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	4833      	ldr	r0, [pc, #204]	@ (800a4f8 <_printf_i+0x23c>)
 800a42c:	2778      	movs	r7, #120	@ 0x78
 800a42e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	6831      	ldr	r1, [r6, #0]
 800a436:	061f      	lsls	r7, r3, #24
 800a438:	f851 5b04 	ldr.w	r5, [r1], #4
 800a43c:	d402      	bmi.n	800a444 <_printf_i+0x188>
 800a43e:	065f      	lsls	r7, r3, #25
 800a440:	bf48      	it	mi
 800a442:	b2ad      	uxthmi	r5, r5
 800a444:	6031      	str	r1, [r6, #0]
 800a446:	07d9      	lsls	r1, r3, #31
 800a448:	bf44      	itt	mi
 800a44a:	f043 0320 	orrmi.w	r3, r3, #32
 800a44e:	6023      	strmi	r3, [r4, #0]
 800a450:	b11d      	cbz	r5, 800a45a <_printf_i+0x19e>
 800a452:	2310      	movs	r3, #16
 800a454:	e7ac      	b.n	800a3b0 <_printf_i+0xf4>
 800a456:	4827      	ldr	r0, [pc, #156]	@ (800a4f4 <_printf_i+0x238>)
 800a458:	e7e9      	b.n	800a42e <_printf_i+0x172>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	f023 0320 	bic.w	r3, r3, #32
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	e7f6      	b.n	800a452 <_printf_i+0x196>
 800a464:	4616      	mov	r6, r2
 800a466:	e7bd      	b.n	800a3e4 <_printf_i+0x128>
 800a468:	6833      	ldr	r3, [r6, #0]
 800a46a:	6825      	ldr	r5, [r4, #0]
 800a46c:	6961      	ldr	r1, [r4, #20]
 800a46e:	1d18      	adds	r0, r3, #4
 800a470:	6030      	str	r0, [r6, #0]
 800a472:	062e      	lsls	r6, r5, #24
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	d501      	bpl.n	800a47c <_printf_i+0x1c0>
 800a478:	6019      	str	r1, [r3, #0]
 800a47a:	e002      	b.n	800a482 <_printf_i+0x1c6>
 800a47c:	0668      	lsls	r0, r5, #25
 800a47e:	d5fb      	bpl.n	800a478 <_printf_i+0x1bc>
 800a480:	8019      	strh	r1, [r3, #0]
 800a482:	2300      	movs	r3, #0
 800a484:	6123      	str	r3, [r4, #16]
 800a486:	4616      	mov	r6, r2
 800a488:	e7bc      	b.n	800a404 <_printf_i+0x148>
 800a48a:	6833      	ldr	r3, [r6, #0]
 800a48c:	1d1a      	adds	r2, r3, #4
 800a48e:	6032      	str	r2, [r6, #0]
 800a490:	681e      	ldr	r6, [r3, #0]
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	2100      	movs	r1, #0
 800a496:	4630      	mov	r0, r6
 800a498:	f7f5 fe9a 	bl	80001d0 <memchr>
 800a49c:	b108      	cbz	r0, 800a4a2 <_printf_i+0x1e6>
 800a49e:	1b80      	subs	r0, r0, r6
 800a4a0:	6060      	str	r0, [r4, #4]
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	6123      	str	r3, [r4, #16]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4ac:	e7aa      	b.n	800a404 <_printf_i+0x148>
 800a4ae:	6923      	ldr	r3, [r4, #16]
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	47d0      	blx	sl
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d0ad      	beq.n	800a418 <_printf_i+0x15c>
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	079b      	lsls	r3, r3, #30
 800a4c0:	d413      	bmi.n	800a4ea <_printf_i+0x22e>
 800a4c2:	68e0      	ldr	r0, [r4, #12]
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	4298      	cmp	r0, r3
 800a4c8:	bfb8      	it	lt
 800a4ca:	4618      	movlt	r0, r3
 800a4cc:	e7a6      	b.n	800a41c <_printf_i+0x160>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	47d0      	blx	sl
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d09d      	beq.n	800a418 <_printf_i+0x15c>
 800a4dc:	3501      	adds	r5, #1
 800a4de:	68e3      	ldr	r3, [r4, #12]
 800a4e0:	9903      	ldr	r1, [sp, #12]
 800a4e2:	1a5b      	subs	r3, r3, r1
 800a4e4:	42ab      	cmp	r3, r5
 800a4e6:	dcf2      	bgt.n	800a4ce <_printf_i+0x212>
 800a4e8:	e7eb      	b.n	800a4c2 <_printf_i+0x206>
 800a4ea:	2500      	movs	r5, #0
 800a4ec:	f104 0619 	add.w	r6, r4, #25
 800a4f0:	e7f5      	b.n	800a4de <_printf_i+0x222>
 800a4f2:	bf00      	nop
 800a4f4:	0800a90d 	.word	0x0800a90d
 800a4f8:	0800a91e 	.word	0x0800a91e

0800a4fc <memmove>:
 800a4fc:	4288      	cmp	r0, r1
 800a4fe:	b510      	push	{r4, lr}
 800a500:	eb01 0402 	add.w	r4, r1, r2
 800a504:	d902      	bls.n	800a50c <memmove+0x10>
 800a506:	4284      	cmp	r4, r0
 800a508:	4623      	mov	r3, r4
 800a50a:	d807      	bhi.n	800a51c <memmove+0x20>
 800a50c:	1e43      	subs	r3, r0, #1
 800a50e:	42a1      	cmp	r1, r4
 800a510:	d008      	beq.n	800a524 <memmove+0x28>
 800a512:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a51a:	e7f8      	b.n	800a50e <memmove+0x12>
 800a51c:	4402      	add	r2, r0
 800a51e:	4601      	mov	r1, r0
 800a520:	428a      	cmp	r2, r1
 800a522:	d100      	bne.n	800a526 <memmove+0x2a>
 800a524:	bd10      	pop	{r4, pc}
 800a526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a52a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a52e:	e7f7      	b.n	800a520 <memmove+0x24>

0800a530 <_sbrk_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d06      	ldr	r5, [pc, #24]	@ (800a54c <_sbrk_r+0x1c>)
 800a534:	2300      	movs	r3, #0
 800a536:	4604      	mov	r4, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	602b      	str	r3, [r5, #0]
 800a53c:	f7f7 f996 	bl	800186c <_sbrk>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d102      	bne.n	800a54a <_sbrk_r+0x1a>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b103      	cbz	r3, 800a54a <_sbrk_r+0x1a>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	20001d64 	.word	0x20001d64

0800a550 <_realloc_r>:
 800a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a554:	4680      	mov	r8, r0
 800a556:	4615      	mov	r5, r2
 800a558:	460c      	mov	r4, r1
 800a55a:	b921      	cbnz	r1, 800a566 <_realloc_r+0x16>
 800a55c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	4611      	mov	r1, r2
 800a562:	f7ff bc59 	b.w	8009e18 <_malloc_r>
 800a566:	b92a      	cbnz	r2, 800a574 <_realloc_r+0x24>
 800a568:	f7ff fbea 	bl	8009d40 <_free_r>
 800a56c:	2400      	movs	r4, #0
 800a56e:	4620      	mov	r0, r4
 800a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a574:	f000 f81a 	bl	800a5ac <_malloc_usable_size_r>
 800a578:	4285      	cmp	r5, r0
 800a57a:	4606      	mov	r6, r0
 800a57c:	d802      	bhi.n	800a584 <_realloc_r+0x34>
 800a57e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a582:	d8f4      	bhi.n	800a56e <_realloc_r+0x1e>
 800a584:	4629      	mov	r1, r5
 800a586:	4640      	mov	r0, r8
 800a588:	f7ff fc46 	bl	8009e18 <_malloc_r>
 800a58c:	4607      	mov	r7, r0
 800a58e:	2800      	cmp	r0, #0
 800a590:	d0ec      	beq.n	800a56c <_realloc_r+0x1c>
 800a592:	42b5      	cmp	r5, r6
 800a594:	462a      	mov	r2, r5
 800a596:	4621      	mov	r1, r4
 800a598:	bf28      	it	cs
 800a59a:	4632      	movcs	r2, r6
 800a59c:	f7ff fbc2 	bl	8009d24 <memcpy>
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f7ff fbcc 	bl	8009d40 <_free_r>
 800a5a8:	463c      	mov	r4, r7
 800a5aa:	e7e0      	b.n	800a56e <_realloc_r+0x1e>

0800a5ac <_malloc_usable_size_r>:
 800a5ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b0:	1f18      	subs	r0, r3, #4
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	bfbc      	itt	lt
 800a5b6:	580b      	ldrlt	r3, [r1, r0]
 800a5b8:	18c0      	addlt	r0, r0, r3
 800a5ba:	4770      	bx	lr

0800a5bc <round>:
 800a5bc:	ec51 0b10 	vmov	r0, r1, d0
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a5c6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a5ca:	2a13      	cmp	r2, #19
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	dc1b      	bgt.n	800a60a <round+0x4e>
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	da0b      	bge.n	800a5ee <round+0x32>
 800a5d6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a5da:	3201      	adds	r2, #1
 800a5dc:	bf04      	itt	eq
 800a5de:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a5e2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	e015      	b.n	800a61a <round+0x5e>
 800a5ee:	4c15      	ldr	r4, [pc, #84]	@ (800a644 <round+0x88>)
 800a5f0:	4114      	asrs	r4, r2
 800a5f2:	ea04 0601 	and.w	r6, r4, r1
 800a5f6:	4306      	orrs	r6, r0
 800a5f8:	d00f      	beq.n	800a61a <round+0x5e>
 800a5fa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a5fe:	fa41 f202 	asr.w	r2, r1, r2
 800a602:	4413      	add	r3, r2
 800a604:	ea23 0304 	bic.w	r3, r3, r4
 800a608:	e7ed      	b.n	800a5e6 <round+0x2a>
 800a60a:	2a33      	cmp	r2, #51	@ 0x33
 800a60c:	dd08      	ble.n	800a620 <round+0x64>
 800a60e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a612:	d102      	bne.n	800a61a <round+0x5e>
 800a614:	4602      	mov	r2, r0
 800a616:	f7f5 fe31 	bl	800027c <__adddf3>
 800a61a:	ec41 0b10 	vmov	d0, r0, r1
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a624:	f04f 34ff 	mov.w	r4, #4294967295
 800a628:	40f4      	lsrs	r4, r6
 800a62a:	4204      	tst	r4, r0
 800a62c:	d0f5      	beq.n	800a61a <round+0x5e>
 800a62e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a632:	2201      	movs	r2, #1
 800a634:	408a      	lsls	r2, r1
 800a636:	1952      	adds	r2, r2, r5
 800a638:	bf28      	it	cs
 800a63a:	3301      	addcs	r3, #1
 800a63c:	ea22 0204 	bic.w	r2, r2, r4
 800a640:	e7d2      	b.n	800a5e8 <round+0x2c>
 800a642:	bf00      	nop
 800a644:	000fffff 	.word	0x000fffff

0800a648 <_init>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	bf00      	nop
 800a64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a64e:	bc08      	pop	{r3}
 800a650:	469e      	mov	lr, r3
 800a652:	4770      	bx	lr

0800a654 <_fini>:
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	bf00      	nop
 800a658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a65a:	bc08      	pop	{r3}
 800a65c:	469e      	mov	lr, r3
 800a65e:	4770      	bx	lr
